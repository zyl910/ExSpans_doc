{
  "ChangeLog.html": {
    "href": "ChangeLog.html",
    "title": "ChangeLog (变更日志) | ExSpans",
    "summary": "ChangeLog (变更日志) [2025-06-15] v1.0 Major: Release v1.0 (发布 v1.0 版)."
  },
  "README.html": {
    "href": "README.html",
    "title": "ExSpans | ExSpans",
    "summary": "ExSpans ExSpans: Extended spans of nint index range (nint 索引范围的扩展跨度). Package Nuget Description ExSpans Extended spans of nint index range (nint 索引范围的扩展跨度). Commonly types: ExMemoryExtensions, ExNativeMemory. ExSpans.Core Extended spans of nint index range - Core type (nint 索引范围的扩展跨度 - 核心类型). Commonly types: ExSpan<T>, ReadOnlyExSpan<T>, ExMemoryMarshal, SafeBufferSpanProvider. Purpose (用途) Span, introduced in C# 7.2, is a new structure that allows developers to access contiguous regions of arbitrary memory in a type-safe manner. It works with both managed memory (e.g., arrays) and unmanaged memory (e.g., memory allocated via Marshal.AllocHGlobal), and does not require memory copying, thus improving performance (Span 是 C# 7.2 引入的一种新结构, 允许开发者以类型安全的方式访问任意内存的连续区域. 它既可以用于托管内存（如数组）, 又可以用于非托管内存（如通过 Marshal.AllocHGlobal 分配的内存）, 并且不需要进行内存复制, 从而提高性能). However, Span has a limitation: it uses int (Int32: 32-bit integer) index. Even on 64-bit operating systems, it can only access data up to 2G(2^31) in length. The Marshal.AllocHGlobal method supports nint (IntPtr: native-sized integer) lengths for memory allocation, allowing allocations exceeding 2GB on 64-bit systems—something Span struggles with. Manually manipulating unmanaged memory without Span is cumbersome and the code is not very generalizable (然而 Span 存在一个局限性, 它使用的是 int (Int32: 32位整数) 类型的索引. 即使是在 64位操作系统中, 它仅能访问最长 2G(2^31) 的数据. 而 Marshal.AllocHGlobal 方法在分配内存时支持 nint (IntPtr: 原生整数) 类型的长度, 在 64位系统上能分配超过 2GB 的非托管内存, Span 难以支持这么长的数据. 在没有 Span 的时候, 手动操作非托管内存是非常繁琐的, 而且代码的通用性不高). ExSpan solves this limitation by using nint type indexes. The byte size of nint matches that of a native pointer, enabling 64-bit index on 64-bit systems. ExSpan is used in exactly the same way as Span, and provides a large number of utility functions like Span. This makes it suitable for image processing, video processing, deep learning, and other large-scale data areas (ExSpan 解决了这一局限性, 它使用 nint 类型的索引. nint 类型的字节大小, 与原生指针完全相同, 故在64位系统上能以64位的索引来访问数据. ExSpan 的用法与 Span 完全相同, 且像 Span 那样提供了大量的工具函数. 这使得它适用于 图像处理、视频处理、深度学习等大规模数据的领域). ExSpan inherits the advantages of Span (ExSpan 继承了Span 的优点): Zero-allocation. ExSpan is a stack-allocated struct, avoiding heap allocations and reducing garbage collection overhead (零分配. ExSpan 是一个零分配的表示形式, 意味着它不会在堆上分配内存, 而是分配在栈上, 这样可以减少垃圾回收的负担). Safety. ExSpan provides safe memory access, avoiding the risks associated with pointer manipulation, such as buffer overflows and null pointer access (安全性. ExSpan 提供了安全的内存访问, 避免了指针操作带来的风险, 如缓冲区溢出和空指针访问). Generality. Can be used in managed memory (e.g. arrays) as well as unmanaged memory (e.g., memory allocated via Marshal.AllocHGlobal) (通用性. 既可以用于托管内存（如数组）, 又可以用于非托管内存（如通过 Marshal.AllocHGlobal 分配的内存）). Slicing capabilities. ExSpan supports slicing operations, making it easy to create an ExSpan that points to a part of an array or block of memory without having to copy the data (切片功能. ExSpan 支持切片操作, 可以轻松创建指向数组或内存块某一部分的 ExSpan, 而无需复制数据). High performance. Due to the design of ExSpan, the performance of manipulating it is close to that of directly manipulating an array. This makes it suitable for high-performance applications, such as buffer data processing, string parsing, image processing, and so on (高性能. 由于 ExSpan 的设计, 操作它的性能接近于直接操作数组. 使其适合高性能应用场景, 如 缓冲区数据处理、字符串解析、图像处理 等). Feature-rich. Like Span, it provides a large number of utility functions. For example, ExMemoryMarshal instead of MemoryMarshal, ExMemoryExtensions instead of MemoryExtensions, and ExNativeMemory instead of NativeMemory. They also provide classes such as SafeBufferSpanProvider. They utilize the VectorTraits library to implement cross-platform SIMD hardware acceleration (功能丰富. 像 Span 那样提供了大量的工具函数. 例如用 ExMemoryMarshal 替代 MemoryMarshal, 用 ExMemoryExtensions 替代 MemoryExtensions, 用 ExNativeMemory 替代 NativeMemory. 还提供了 SafeBufferSpanProvider 等类. 且它们利用 VectorTraits 库, 实现了跨平台的SIMD硬件加速). This library also has these advantages (本库还具有这些优点). \uFEFF Multiple .NET versions are supported. Since NET Framework 4.5, to the latest .NET 9, all supported. Also supported NET Standard 1.1 ~ .NET Standard 2.1 (支持多种 .NET版本. 从 .NET Framework 4.5, 到最新的 .NET 9, 全都支持. 而且支持 .NET Standard 1.1 ~ .NET Standard 2.1). Porting new versions of features. It provides the latest Span functionality to earlier versions of .NET, such as .NET 6.0's added MemoryExtensions.TryWrite methods (移植新版本的功能. 能给早期版本的.NET, 提供最新的 Span功能. 例如 .NET 6.0 新增的 MemoryExtensions.TryWrite 方法). Cross-platform. It is composed entirely of managed code and supports Windows, Linux, MacOS, iOS, Android, Wasm, and more. It avoids the tedious task of \"choosing a different native dll for the current platform\" (跨平台. 它完全由托管代码所组成, 能够支持 Windows, Linux, MacOS, iOS, Android, Wasm 等平台. 能避免繁琐的“根据当前平台选择不同的原生dll”工作). Native AOT supported. Native AOT technology can be used to compile the program into native code (machine code) for the target platform when needed. NET runtime is no longer needed and has the advantage of faster startup (支持原生AOT. 当需要时, 可以利用原生AOT技术, 将程序编译为目标平台的原生代码(机器码). 此时不再需要 .NET 运行时, 且具有启动速度快等优点). Getting started (入门指南) 1) Install via NuGet (通过NuGet安装) This library can be installed using the \"Package Manager\" GUI. Alternatively, you can install it by entering the following command in the \"Package Manager Console\" (可以使用“包管理器”GUI来安装本库. 或可在“包管理器控制台”里输入以下命令进行安装). NuGet: PM> Install-Package ExSpans 2) Simple Example (简单范例) A checksum calculation function (一个计算校验和的函数) First, we use ReadOnlySpan to implement a function that calculates the checksum (首先, 我们用 ReadOnlySpan 实现一个计算校验和的函数). static int SumSpan(ReadOnlySpan<int> span) { int rt = 0; // Result. for (int i = 0; i < span.Length; i++) { rt += span[i]; } return rt; } The function can then be modified with the ReadOnlyExSpan type from the ExSpans library. Simply change ReadOnlySpan to ReadOnlyExSpan and change the index type from int to nint, and you're done (随后可以用 ExSpans 库中的 ReadOnlyExSpan 类型来改造这个函数. 仅需将 ReadOnlySpan 改为 ReadOnlyExSpan, 再将索引类型从 int 改为 nint, 便完成了改造). static int SumExSpan(ReadOnlyExSpan<int> span) { int rt = 0; // Result. for (nint i = 0; i < span.Length; i++) { rt += span[i]; } return rt; } Full code of the program (完整程序的代码) The usage of ExSpan (or ReadOnlyExSpan) is exactly the same as Span (or ReadOnlySpan), except that the index type has been changed from int to nint (ExSpan(或 ReadOnlyExSpan) 的用法, 与 Span(或 ReadOnlySpan) 完全相同, 仅是索引类型从 int 改为了 nint). \uFEFF This library provides a large number of utility functions like Span. For example, ExMemoryMarshal is used instead of MemoryMarshal, ExMemoryExtensions is used instead of MemoryExtensions, and ExNativeMemory is used instead of NativeMemory. The Count method used in the following example is an extension method of ExMemoryExtensions (本库像 Span 那样提供了大量的工具函数. 例如用 ExMemoryMarshal 替代 MemoryMarshal, 用 ExMemoryExtensions 替代 MemoryExtensions, 用 ExNativeMemory 替代 NativeMemory. 后面范例代码中使用的 Count 方法, 是 ExMemoryExtensions 里的扩展方法). Using type conversion operators or extension methods such as AsSpan/AsExSpan, it is easy to perform type conversion between ExSpan (or ReadOnlyExSpan) and Span (or ReadOnlySpan) (使用类型转换运算符, 或是 AsSpan/AsExSpan 等扩展方法, 可以方便的将 ExSpan(或 ReadOnlyExSpan) 与 Span(或 ReadOnlySpan) 进行类型转换). Below are various usages displayed (下面展示了各种用法). using System; using System.IO; using Zyl.ExSpans; namespace Zyl.ExSpans.Sample { internal class Program { static void Main(string[] args) { TextWriter writer = Console.Out; OutputHeader(writer); // Test some. TestSimple(writer); Test2GB(writer); } internal static void OutputHeader(TextWriter writer) { writer.WriteLine(\"ExSpans.Sample\"); writer.WriteLine(); } static void TestSimple(TextWriter writer) { const int bufferSize = 16; // Create ExSpan by Array. int[] sourceArray = new int[bufferSize]; TestExSpan(writer, \"Array\", new ExSpan<int>(sourceArray)); // Use constructor method. //TestExSpan(writer, \"Array\", sourceArray.AsExSpan()); // Or use extension method. writer.WriteLine(); // Create ExSpan by Span. Span<int> sourceSpan = stackalloc int[bufferSize]; TestExSpan(writer, \"Span\", sourceSpan); // Use implicit conversion. //TestExSpan(writer, \"Span\", sourceSpan.AsExSpan()); // Or use extension method. // Convert ExSpan to Span. ExSpan<int> intSpan = sourceSpan; // Implicit conversion Span to ExSpan. Span<int> span = (Span<int>)intSpan; // Use explicit conversion. //Span<int> span = intSpan.AsSpan(); // Or use extension method. writer.WriteLine(string.Format(\"Span[1]: {0} // 0x{0:X}\", span[1])); int checkSum = SumExSpan(intSpan); // Implicit conversion ExSpan to ReadOnlyExSpan. writer.WriteLine(string.Format(\"CheckSum: {0} // 0x{0:X}\", checkSum)); writer.WriteLine(); } static void TestExSpan(TextWriter writer, string title, ExSpan<int> span) { try { // Write. writer.WriteLine($\"[TestExSpan-{title}]\"); span.Fill(0x01020304); span[0] = 0x12345678; span[span.Length - 1] = 0x78563412; // Read. writer.WriteLine(string.Format(\"Data[0]: {0} // 0x{0:X}\", span[0])); writer.WriteLine(string.Format(\"Data[1]: {0} // 0x{0:X}\", span[1])); writer.WriteLine(string.Format(\"Data[^1]: {0} // 0x{0:X}\", span[span.Length - 1])); writer.WriteLine(string.Format(\"Count(Data[1]): {0} // 0x{0:X}\", (long)span.Count(span[1]))); } catch (Exception ex) { writer.WriteLine(string.Format(\"Run TestExSpan fail! {0}\", ex.ToString())); } } static int SumExSpan(ReadOnlyExSpan<int> span) { int rt = 0; // Result. for (nint i = 0; i < span.Length; i++) { rt += span[i]; } return rt; } static unsafe void Test2GB(TextWriter writer) { const nint OutputMaxLength = 8; nuint byteSize = 2U * 1024 * 1024 * 1024; // 2GB if (IntPtr.Size > sizeof(int)) { byteSize += sizeof(int); } nint bufferSize = (nint)(byteSize / sizeof(int)); // Create ExSpan by Pointer. try { void* buffer = ExNativeMemory.Alloc(byteSize); try { ExSpan<int> intSpan = new ExSpan<int>(buffer, bufferSize); TestExSpan(writer, \"2GB\", intSpan); writer.WriteLine(string.Format(\"ItemsToString: {0}\", intSpan.ItemsToString(OutputMaxLength, OutputMaxLength))); writer.WriteLine(string.Format(\"intSpan.Count(): {0} // 0x{0:X}\", (long)intSpan.Count(intSpan[1]))); writer.WriteLine(string.Format(\"intSpan.Length: {0} // 0x{0:X}\", (long)intSpan.Length)); // Cast to byte. ExSpan<byte> byteSpan = ExMemoryMarshal.Cast<int, byte>(intSpan); writer.WriteLine(string.Format(\"byteSpan.Length: {0} // 0x{0:X}\", (long)byteSpan.Length)); writer.WriteLine(string.Format(\"byteSpan[0]: {0} // 0x{0:X}\", byteSpan[0])); writer.WriteLine(string.Format(\"byteSpan.ItemsToString: {0}\", byteSpan.ItemsToString(OutputMaxLength, OutputMaxLength))); writer.WriteLine(string.Format(\"byteSpan.Count(): {0} // 0x{0:X}\", (long)byteSpan.Count(byteSpan[1]))); writer.WriteLine(); } finally { ExNativeMemory.Free(buffer); } } catch (Exception ex) { writer.WriteLine(string.Format(\"Run Test2GB fail! {0}\", ex.ToString())); } } } } The example is located in samples/ExSpans.Sample/Program.cs (该范例位于位于 samples/ExSpans.Sample/Program.cs). \uFEFF This library provides ItemsToString extension methods for types such as ExSpan, which are used to output the values of each elements (本库为 ExSpan 等类型提供了 ItemsToString 扩展方法, 用于输出各个元素的值). \uFEFF This library also provides ItemsToString extension methods for types such as Span. It can be used by using the Zyl.ExSpans.Extensions.ApplySpans namespace (本库还为 Span 等类型也提供了 ItemsToString 扩展方法. 引用 Zyl.ExSpans.Extensions.ApplySpans 命名空间后便可使用它). using Zyl.ExSpans.Extensions.ApplySpans; For details, see tests/ExSpans.Tests/Extensions/ApplySpans/ApplySpanCoreExtensionsTest.cs. Output results (输出结果) [TestExSpan-Array] Data[0]: 305419896 // 0x12345678 Data[1]: 16909060 // 0x1020304 Data[^1]: 2018915346 // 0x78563412 Count(Data[1]): 14 // 0xE [TestExSpan-Span] Data[0]: 305419896 // 0x12345678 Data[1]: 16909060 // 0x1020304 Data[^1]: 2018915346 // 0x78563412 Count(Data[1]): 14 // 0xE Span[1]: 16909060 // 0x1020304 CheckSum: -1733905214 // 0x98A6B4C2 [TestExSpan-2GB] Data[0]: 305419896 // 0x12345678 Data[1]: 16909060 // 0x1020304 Data[^1]: 2018915346 // 0x78563412 Count(Data[1]): 536870911 // 0x1FFFFFFF ItemsToString: ExSpan<int>[536870913]{305419896, 16909060, 16909060, 16909060, 16909060, 16909060, 16909060, 16909060, ..., 16909060, 16909060, 16909060, 16909060, 16909060, 16909060, 16909060, 2018915346} intSpan.Count(): 536870911 // 0x1FFFFFFF intSpan.Length: 536870913 // 0x20000001 byteSpan.Length: 2147483652 // 0x80000004 byteSpan[0]: 120 // 0x78 byteSpan.ItemsToString: ExSpan<byte>[2147483652]{120, 86, 52, 18, 4, 3, 2, 1, ..., 4, 3, 2, 1, 18, 52, 86, 120} byteSpan.Count(): 2 // 0x2 Manipulating Memory Mapped Files with ExSpan (使用 ExSpan 操作内存映射文件) Because of the cumbersome way of manipulating data in memory-mapped files, I had hoped to use Span to manipulate memory-mapped files. However, memory-mapped files use 64-bit index, and Span's 32-bit index is not sufficient (由于内存映射文件的数据操作方法用起来比较繁琐, 曾经希望能用 Span 来操作内存映射文件. 但内存映射文件用了 64位索引, Span的32索引力不从心). Now ExSpan uses a range of nint index, which are 64-bit on 64-bit operating systems, and are very suitable for memory-mapped files with 64-bit index (现在 ExSpan 使用 nint 索引的范围, 在64位操作系统上是64位的, 非常适合64位索引的内存映射文件). And this library also provides SafeBufferSpanProvider type to simplify this operation (而且本库还提供了 SafeBufferSpanProvider 类型来简化这一操作). Use CreateSpanProvider extension method to create SafeBufferSpanProvider based on SafeMemoryMappedViewHandle of memory mapped file (使用 CreateSpanProvider 扩展方法, 基于 内存映射文件的SafeMemoryMappedViewHandle 来创建 SafeBufferSpanProvider). SafeBufferSpanProvider supports using statement, which can automatically manage the release of unmanaged data (SafeBufferSpanProvider 支持 using 语句, 能自动管理非托管数据的释放). SafeBufferSpanProvider's CreateExSpan method can be used to create ExSpan (SafeBufferSpanProvider 的 CreateExSpan 方法可以用来创建 ExSpan). Code of the program (程序的代码) using System; using System.IO; using System.IO.MemoryMappedFiles; using Zyl.ExSpans; namespace Zyl.ExSpans.Sample { internal class ATestMemoryMappedFile { static void Main(string[] args) { TextWriter writer = Console.Out; // Test some. TestMemoryMappedFile(writer); } internal static void TestMemoryMappedFile(TextWriter writer) { try { const string MemoryMappedFilePath = \"ExSpans.Sample.tmp\"; const string? MemoryMappedFileMapName = null; // If it is not null, MacOS will throw an exception. System.PlatformNotSupportedException: Named maps are not supported. const long MemoryMappedFileSize = 1 * 1024 * 1024; // 1MB using MemoryMappedFile mappedFile = MemoryMappedFile.CreateFromFile(MemoryMappedFilePath, FileMode.Create, MemoryMappedFileMapName, MemoryMappedFileSize); using MemoryMappedViewAccessor accessor = mappedFile.CreateViewAccessor(); using SafeBufferSpanProvider spanProvider = accessor.SafeMemoryMappedViewHandle.CreateSpanProvider(); // Write. writer.WriteLine(\"[TestMemoryMappedFile]\"); ExSpan<int> spanInt = spanProvider.CreateExSpan<int>(); spanInt.Fill(0x01020304); spanInt[0] = 0x12345678; // Read. writer.WriteLine(string.Format(\"Data[0]: {0} // 0x{0:X}\", spanInt[0])); writer.WriteLine(string.Format(\"Data[1]: {0} // 0x{0:X}\", spanInt[1])); // Extension methods provided by ExSpanExtensions. writer.WriteLine(string.Format(\"ItemsToString: {0}\", spanProvider.ItemsToString(spanProvider.GetPinnableReadOnlyReference(), 16))); // done. writer.WriteLine(); } catch (Exception ex) { writer.WriteLine(string.Format(\"Run TestMemoryMappedFile fail! {0}\", ex.ToString())); } } } } The example is located in samples/ExSpans.Sample/ATestMemoryMappedFile.cs (该范例位于位于 samples/ExSpans.Sample/ATestMemoryMappedFile.cs). Note: SafeBufferSpanProvider also supports ItemsToString extension method. Before .NET 9, the spanProvider.GetPinnableReadOnlyReference() parameter had to be passed; since .NET 9, this parameter can be omitted (注: SafeBufferSpanProvider 也支持 ItemsToString 扩展方法. 在 .NET 9 以前, 需传递 spanProvider.GetPinnableReadOnlyReference() 参数; 而从 .NET 9 开始, 可省略该参数). Output results (输出结果) [TestMemoryMappedFile] Data[0]: 305419896 // 0x12345678 Data[1]: 16909060 // 0x1020304 ItemsToString: SafeBufferSpanProvider[1048576]{120, 86, 52, 18, 4, 3, 2, 1, 4, 3, 2, 1, 4, 3, 2, 1, ...} Benchmark (基准测试) From Starting from NET 7, ExSpan's performance is the same as Span The following benchmark tests will prove this assertion (从 .NET 7 开始, ExSpan 的性能与 Span 相同. 下面的基准测试将证明这一论断). Source code for benchmark (基准测试的源代码) \uFEFF The following is the source code for benchmark ExSpan as an array summing application (下面将以数组求和为例, 来对 ExSpan 编写基准测试代码). \uFEFF The benchmark tool used is BenchmarkDotNet (测试工具用的是 BenchmarkDotNet). \uFEFF StaticSumForArray: Summation using index access to arrays (使用索引访问数组实现求和) First, use the array summing method as a baseline (首先, 以数组求和的方法作为 baseline). using TMy = Int32; public static TMy StaticSumForArray(TMy[] src, int srcCount) { TMy rt = 0; // Result. for (int i = 0; i < srcCount; ++i) { rt += src[i]; } return rt; } [Benchmark(Baseline = true)] public void SumForArray() { dstTMy = StaticSumForArray(srcArray, srcArray.Length); } The srcArray is a pre-allocated array (srcArray 是预先分配好的数组). The dstTMy is a global variable, in order to avoid erasing the SumForArray method during compilation optimization (dstTMy 是一个全局变量, 为了避免编译优化时抹掉 SumForArray 方法). Summation using index access to Span (使用索引访问 Span 实现求和) Summation using index access to Span (该方法使用索引访问 Span 实现求和). public static TMy StaticSumForSpan(TMy[] src, int srcCount) { TMy rt = 0; // Result. Span<TMy> span = new Span<TMy>(src, 0, srcCount); for (int i = 0; i < srcCount; ++i) { rt += span[i]; } return rt; } [Benchmark] public void SumForSpan() { dstTMy = StaticSumForSpan(srcArray, srcArray.Length); } SumForExSpan: Summation using index access to ExSpan (使用索引访问 ExSpan 实现求和) Simply change Span to ExSpan and change the index type from int to nint, and you're done (仅需将 Span 改为 ExSpan, 再将索引类型从 int 改为 nint, 便完成了改造)! public static TMy StaticSumForExSpan(TMy[] src, int srcCount) { TMy rt = 0; // Result. nint srcCountCur = srcCount; ExSpan<TMy> span = new ExSpan<TMy>(src, 0, srcCountCur); for (nint i = 0; i < srcCountCur; ++i) { rt += span[i]; } return rt; } [Benchmark] public void SumForExSpan() { dstTMy = StaticSumForExSpan(srcArray, srcArray.Length); } Other methods (其他方法) In addition to the methods introduced above, there are also the following methods (除了上面介绍的方法外, 还有以下方法). SumForPtr: Summation using native pointer access to arrays (使用原生指针访问数组实现求和). SumForExSpanByPtr: Summation using index access to ExSpan created by pointer (使用索引访问 指针创建的ExSpan 实现求和). SumForExSpanUsePtr: Summation using native pointer access to ExSpan (使用原生指针访问 ExSpan 实现求和). SumForExSpanUseRef: Summation using managed pointer(ref) access to ExSpan (使用 托管指针(ref) 访问 ExSpan 实现求和). For details, see tests/ExSpans.Benchmarks.Inc/AExSpan/SumBenchmark_Int32.cs. Benchmarks of X86 architecture .NET 7 BenchmarkDotNet v0.14.0, Windows 11 (10.0.26100.4351) AMD Ryzen 7 7840H w/ Radeon 780M Graphics, 1 CPU, 16 logical and 8 physical cores .NET SDK 9.0.301 [Host] : .NET 7.0.20 (7.0.2024.26716), X64 RyuJIT AVX2 MediumRun : .NET 7.0.20 (7.0.2024.26716), X64 RyuJIT AVX2 | Method | N | Mean | Error | StdDev | Ratio | Code Size | |------------------- |------- |---------:|---------:|---------:|------:|----------:| | SumForArray | 262144 | 60.40 us | 0.234 us | 0.335 us | 1.00 | 500 B | | SumForPtr | 262144 | 58.54 us | 0.173 us | 0.258 us | 0.97 | 145 B | | SumForSpan | 262144 | 58.49 us | 0.199 us | 0.297 us | 0.97 | 186 B | | SumForExSpan | 262144 | 58.47 us | 0.208 us | 0.305 us | 0.97 | 205 B | | SumForExSpanByPtr | 262144 | 58.01 us | 0.099 us | 0.135 us | 0.96 | 187 B | | SumForExSpanUsePtr | 262144 | 58.49 us | 0.121 us | 0.177 us | 0.97 | 174 B | | SumForExSpanUseRef | 262144 | 58.72 us | 0.164 us | 0.245 us | 0.97 | 159 B | It can be seen that the performance of ExSpan is the same as Span (可见, ExSpan 的性能与 Span 相同). .NET Framework BenchmarkDotNet v0.14.0, Windows 11 (10.0.26100.4351) AMD Ryzen 7 7840H w/ Radeon 780M Graphics, 1 CPU, 16 logical and 8 physical cores [Host] : .NET Framework 4.8.1 (4.8.9300.0), X64 RyuJIT VectorSize=256 MediumRun : .NET Framework 4.8.1 (4.8.9300.0), X64 RyuJIT VectorSize=256 | Method | N | Mean | Error | StdDev | Ratio | RatioSD | Code Size | |------------------- |------- |----------:|---------:|----------:|------:|--------:|----------:| | SumForArray | 262144 | 69.20 us | 0.268 us | 0.376 us | 1.00 | 0.01 | 6,943 B | | SumForPtr | 262144 | 58.80 us | 0.131 us | 0.193 us | 0.85 | 0.01 | 154 B | | SumForSpan | 262144 | 122.44 us | 0.437 us | 0.640 us | 1.77 | 0.01 | 250 B | | SumForExSpan | 262144 | 562.53 us | 8.190 us | 12.259 us | 8.13 | 0.18 | 584 B | | SumForExSpanByPtr | 262144 | 219.07 us | 0.659 us | 0.965 us | 3.17 | 0.02 | 381 B | | SumForExSpanUsePtr | 262144 | 58.61 us | 0.194 us | 0.285 us | 0.85 | 0.01 | 635 B | | SumForExSpanUseRef | 262144 | 58.72 us | 0.187 us | 0.279 us | 0.85 | 0.01 | 614 B | As you can see, before .NET 7, ExSpan's performance was a bit slower than Span (可见, 在 .NET 7 之前, ExSpan 的性能比 Span 慢一些). \uFEFF There is a way around this performance issue - use ExSpan only as a passing parameter, and then use pointers to manipulate the data. See SumForExSpanUsePtr or SumForExSpanUseRef, both of which are faster than SumForArray/SumForSpan. This library's ExMemoryExtensions and other types are optimized in this way (有一种办法可以解决这种性能问题——仅将 ExSpan 用做传参, 随后用指针进行数据处理. 可参考 SumForExSpanUsePtr 或 SumForExSpanUseRef, 它们都比 SumForArray/SumForSpan 快. 本库的 ExMemoryExtensions 等类型, 就是用这个办法进行优化的). Benchmarks of Arm architecture .NET 7 BenchmarkDotNet v0.14.0, macOS Sequoia 15.5 (24F74) [Darwin 24.5.0] Apple M2, 1 CPU, 8 logical and 8 physical cores .NET SDK 9.0.102 [Host] : .NET 7.0.20 (7.0.2024.26716), Arm64 RyuJIT AdvSIMD MediumRun : .NET 7.0.20 (7.0.2024.26716), Arm64 RyuJIT AdvSIMD | Method | N | Mean | Error | StdDev | Ratio | RatioSD | |------------------- |------- |----------:|---------:|---------:|------:|--------:| | SumForArray | 262144 | 95.02 us | 0.303 us | 0.444 us | 1.00 | 0.01 | | SumForPtr | 262144 | 93.60 us | 3.269 us | 4.893 us | 0.99 | 0.05 | | SumForSpan | 262144 | 96.30 us | 1.313 us | 1.966 us | 1.01 | 0.02 | | SumForExSpan | 262144 | 121.74 us | 0.064 us | 0.092 us | 1.28 | 0.01 | | SumForExSpanByPtr | 262144 | 122.65 us | 0.488 us | 0.715 us | 1.29 | 0.01 | | SumForExSpanUsePtr | 262144 | 88.76 us | 0.596 us | 0.873 us | 0.93 | 0.01 | | SumForExSpanUseRef | 262144 | 89.04 us | 0.338 us | 0.506 us | 0.94 | 0.01 | It can be seen that the performance of ExSpan is very similar to Span, slightly slower by about 26% (可见, ExSpan 的性能与 Span 很接近, 慢了 (121.74 / 96.30 - 1 =) 26% 左右). .NET 9 BenchmarkDotNet v0.14.0, macOS Sequoia 15.5 (24F74) [Darwin 24.5.0] Apple M2, 1 CPU, 8 logical and 8 physical cores .NET SDK 9.0.102 [Host] : .NET 9.0.1 (9.0.124.61010), Arm64 RyuJIT AdvSIMD MediumRun : .NET 9.0.1 (9.0.124.61010), Arm64 RyuJIT AdvSIMD | Method | N | Mean | Error | StdDev | Ratio | |------------------- |------- |----------:|---------:|---------:|------:| | SumForArray | 262144 | 86.25 us | 0.069 us | 0.103 us | 1.00 | | SumForPtr | 262144 | 76.78 us | 0.335 us | 0.492 us | 0.89 | | SumForSpan | 262144 | 93.34 us | 0.238 us | 0.326 us | 1.08 | | SumForExSpan | 262144 | 104.89 us | 0.087 us | 0.131 us | 1.22 | | SumForExSpanByPtr | 262144 | 104.72 us | 0.072 us | 0.105 us | 1.21 | | SumForExSpanUsePtr | 262144 | 78.05 us | 0.841 us | 1.259 us | 0.90 | | SumForExSpanUseRef | 262144 | 78.02 us | 0.854 us | 1.252 us | 0.90 | The performance of .NET 9 has made progress again, and the performance of ExSpan is very close to Span The difference is only about 12% (.NET 9 时性能又有进度, ExSpan 的性能与 Span 很接近了. 仅相差 (104.89 / 93.34 - 1 =) 12% 左右). If you want to pursue optimal performance, you can also use pointers for optimization You can refer to SumForExSpanUsePtr or SumForExSpanUseRef, both of which are faster than SumForSpan (若想追求最佳性能, 也可利用指针进行优化. 可参考 SumForExSpanUsePtr 或 SumForExSpanUseRef, 它们都比 SumForSpan 快). Documentation (文档) Online document: https://zyl910.github.io/ExSpans_doc/ DocFX: Run docfx_serve.bat. Then browse http://localhost:8080/ . ChangeLog (变更日志) Full list: ChangeLog"
  },
  "api/Zyl.ExSpans.ExMemoryExtensions.BinarySearch.html": {
    "href": "api/Zyl.ExSpans.ExMemoryExtensions.BinarySearch.html",
    "title": "Method BinarySearch | ExSpans",
    "summary": "Method BinarySearch Namespace Zyl.ExSpans Assembly ExSpans.dll BinarySearch<T>(ExSpan<T>, IComparable<T>) Searches an entire sorted ExSpan<T> for a value using the specified IComparable<T> generic interface. public static nint BinarySearch<T>(this ExSpan<T> span, IComparable<T> comparable) Parameters span ExSpan<T> The sorted ExSpan<T> to search. comparable IComparable<T> The IComparable<T> to use when comparing. Returns nint The zero-based index of comparable in the sorted span, if comparable is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than comparable or, if there is no larger element, the bitwise complement of Length. Type Parameters T The element type of the span. Exceptions ArgumentNullException comparable is null . BinarySearch<T, TComparable>(ExSpan<T>, TComparable) Searches an entire sorted ExSpan<T> for a value using the specified TComparable generic type. public static nint BinarySearch<T, TComparable>(this ExSpan<T> span, TComparable comparable) where TComparable : IComparable<T> Parameters span ExSpan<T> The sorted ExSpan<T> to search. comparable TComparable The TComparable to use when comparing. Returns nint The zero-based index of comparable in the sorted span, if comparable is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than comparable or, if there is no larger element, the bitwise complement of Length. Type Parameters T The element type of the span. TComparable The specific type of IComparable<T>. Exceptions ArgumentNullException comparable is null . BinarySearch<T, TComparer>(ExSpan<T>, T, TComparer) Searches an entire sorted ExSpan<T> for the specified value using the specified TComparer generic type. public static nint BinarySearch<T, TComparer>(this ExSpan<T> span, T value, TComparer comparer) where TComparer : IComparer<T> Parameters span ExSpan<T> The sorted ExSpan<T> to search. value T The object to locate. The value can be null for reference types. comparer TComparer The TComparer to use when comparing. Returns nint The zero-based index of value in the sorted span, if value is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than value or, if there is no larger element, the bitwise complement of Length. Type Parameters T The element type of the span. TComparer The specific type of IComparer<T>. Exceptions ArgumentNullException comparer is null . BinarySearch<T>(ReadOnlyExSpan<T>, IComparable<T>) Searches an entire sorted ReadOnlyExSpan<T> for a value using the specified IComparable<T> generic interface. public static nint BinarySearch<T>(this ReadOnlyExSpan<T> span, IComparable<T> comparable) Parameters span ReadOnlyExSpan<T> The sorted ReadOnlyExSpan<T> to search. comparable IComparable<T> The IComparable<T> to use when comparing. Returns nint The zero-based index of comparable in the sorted span, if comparable is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than comparable or, if there is no larger element, the bitwise complement of Length. Type Parameters T The element type of the span. Exceptions ArgumentNullException comparable is null . BinarySearch<T, TComparable>(ReadOnlyExSpan<T>, TComparable) Searches an entire sorted ReadOnlyExSpan<T> for a value using the specified TComparable generic type. public static nint BinarySearch<T, TComparable>(this ReadOnlyExSpan<T> span, TComparable comparable) where TComparable : IComparable<T> Parameters span ReadOnlyExSpan<T> The sorted ReadOnlyExSpan<T> to search. comparable TComparable The TComparable to use when comparing. Returns nint The zero-based index of comparable in the sorted span, if comparable is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than comparable or, if there is no larger element, the bitwise complement of Length. Type Parameters T The element type of the span. TComparable The specific type of IComparable<T>. Exceptions ArgumentNullException comparable is null . BinarySearch<T, TComparer>(ReadOnlyExSpan<T>, T, TComparer) Searches an entire sorted ReadOnlyExSpan<T> for the specified value using the specified TComparer generic type. public static nint BinarySearch<T, TComparer>(this ReadOnlyExSpan<T> span, T value, TComparer comparer) where TComparer : IComparer<T> Parameters span ReadOnlyExSpan<T> The sorted ReadOnlyExSpan<T> to search. value T The object to locate. The value can be null for reference types. comparer TComparer The TComparer to use when comparing. Returns nint The zero-based index of value in the sorted span, if value is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than value or, if there is no larger element, the bitwise complement of Length. Type Parameters T The element type of the span. TComparer The specific type of IComparer<T>. Exceptions ArgumentNullException comparer is null ."
  },
  "api/Zyl.ExSpans.ExMemoryExtensions.CommonPrefixLength.html": {
    "href": "api/Zyl.ExSpans.ExMemoryExtensions.CommonPrefixLength.html",
    "title": "Method CommonPrefixLength | ExSpans",
    "summary": "Method CommonPrefixLength Namespace Zyl.ExSpans Assembly ExSpans.dll CommonPrefixLength<T>(ExSpan<T>, ReadOnlyExSpan<T>) Finds the length of any common prefix shared between span and other. public static nint CommonPrefixLength<T>(this ExSpan<T> span, ReadOnlyExSpan<T> other) Parameters span ExSpan<T> The first sequence to compare. other ReadOnlyExSpan<T> The second sequence to compare. Returns nint The length of the common prefix shared by the two ExSpans. If there's no shared prefix, 0 is returned. Type Parameters T The type of the elements in the spans. CommonPrefixLength<T>(ExSpan<T>, ReadOnlyExSpan<T>, IEqualityComparer<T>?) Finds the length of any common prefix shared between span and other. public static nint CommonPrefixLength<T>(this ExSpan<T> span, ReadOnlyExSpan<T> other, IEqualityComparer<T>? comparer) Parameters span ExSpan<T> The first sequence to compare. other ReadOnlyExSpan<T> The second sequence to compare. comparer IEqualityComparer<T> The IEqualityComparer<T> implementation to use when comparing elements, or null to use the default IEqualityComparer<T> for the type of an element. Returns nint The length of the common prefix shared by the two ExSpans. If there's no shared prefix, 0 is returned. Type Parameters T The type of the elements in the spans. CommonPrefixLength<T>(ReadOnlyExSpan<T>, ReadOnlyExSpan<T>) Finds the length of any common prefix shared between span and other. public static nint CommonPrefixLength<T>(this ReadOnlyExSpan<T> span, ReadOnlyExSpan<T> other) Parameters span ReadOnlyExSpan<T> The first sequence to compare. other ReadOnlyExSpan<T> The second sequence to compare. Returns nint The length of the common prefix shared by the two ExSpans. If there's no shared prefix, 0 is returned. Type Parameters T The type of the elements in the spans. CommonPrefixLength<T>(ReadOnlyExSpan<T>, ReadOnlyExSpan<T>, IEqualityComparer<T>?) Determines the length of any common prefix shared between span and other. public static nint CommonPrefixLength<T>(this ReadOnlyExSpan<T> span, ReadOnlyExSpan<T> other, IEqualityComparer<T>? comparer) Parameters span ReadOnlyExSpan<T> The first sequence to compare. other ReadOnlyExSpan<T> The second sequence to compare. comparer IEqualityComparer<T> The IEqualityComparer<T> implementation to use when comparing elements, or null to use the default IEqualityComparer<T> for the type of an element. Returns nint The length of the common prefix shared by the two ExSpans. If there's no shared prefix, 0 is returned. Type Parameters T The type of the elements in the sequences."
  },
  "api/Zyl.ExSpans.ExMemoryExtensions.CompareTo.html": {
    "href": "api/Zyl.ExSpans.ExMemoryExtensions.CompareTo.html",
    "title": "Method CompareTo | ExSpans",
    "summary": "Method CompareTo Namespace Zyl.ExSpans Assembly ExSpans.dll CompareTo(ReadOnlyExSpan<char>, ReadOnlyExSpan<char>, StringComparison) Compares the specified span and other using the specified comparisonType, and returns an integer that indicates their relative position in the sort order. public static int CompareTo(this ReadOnlyExSpan<char> span, ReadOnlyExSpan<char> other, StringComparison comparisonType) Parameters span ReadOnlyExSpan<char> The source span. other ReadOnlyExSpan<char> The value to compare with the source span. comparisonType StringComparison One of the enumeration values that determines how the span and other are compared. Returns int Exceptions ExSpanTooLongException Throws an exception if the length is out of the range of Int32."
  },
  "api/Zyl.ExSpans.ExMemoryExtensions.Contains.html": {
    "href": "api/Zyl.ExSpans.ExMemoryExtensions.Contains.html",
    "title": "Method Contains | ExSpans",
    "summary": "Method Contains Namespace Zyl.ExSpans Assembly ExSpans.dll Contains<T>(ExSpan<T>, T) Searches for the specified value and returns true if found. If not found, returns false. Values are compared using IEquatable{T}.Equals(T). public static bool Contains<T>(this ExSpan<T> span, T value) where T : IEquatable<T>? Parameters span ExSpan<T> The span to search. value T The value to search for. Returns bool Type Parameters T Contains<T>(ReadOnlyExSpan<T>, T) Searches for the specified value and returns true if found. If not found, returns false. Values are compared using IEquatable{T}.Equals(T). public static bool Contains<T>(this ReadOnlyExSpan<T> span, T value) where T : IEquatable<T>? Parameters span ReadOnlyExSpan<T> The span to search. value T The value to search for. Returns bool Type Parameters T Contains<T>(ReadOnlyExSpan<T>, T, IEqualityComparer<T>?) Searches for the specified value and returns true if found. If not found, returns false. public static bool Contains<T>(this ReadOnlyExSpan<T> span, T value, IEqualityComparer<T>? comparer = null) Parameters span ReadOnlyExSpan<T> The span to search. value T The value to search for. comparer IEqualityComparer<T> The IEqualityComparer<T> implementation to use when comparing elements, or null to use the default IEqualityComparer<T> for the type of an element. Returns bool Type Parameters T Contains(ReadOnlyExSpan<char>, ReadOnlyExSpan<char>, StringComparison) Returns a value indicating whether the specified value occurs within the span. public static bool Contains(this ReadOnlyExSpan<char> span, ReadOnlyExSpan<char> value, StringComparison comparisonType) Parameters span ReadOnlyExSpan<char> The source span. value ReadOnlyExSpan<char> The value to seek within the source span. comparisonType StringComparison One of the enumeration values that determines how the span and value are compared. Returns bool Exceptions ExSpanTooLongException Throws an exception if the length is out of the range of Int32."
  },
  "api/Zyl.ExSpans.ExMemoryExtensions.ContainsAny.html": {
    "href": "api/Zyl.ExSpans.ExMemoryExtensions.ContainsAny.html",
    "title": "Method ContainsAny | ExSpans",
    "summary": "Method ContainsAny Namespace Zyl.ExSpans Assembly ExSpans.dll ContainsAny<T>(ExSpan<T>, T, T) Searches for any occurrence of the specified value0 or value1, and returns true if found. If not found, returns false. public static bool ContainsAny<T>(this ExSpan<T> span, T value0, T value1) where T : IEquatable<T>? Parameters span ExSpan<T> The span to search. value0 T One of the values to search for. value1 T One of the values to search for. Returns bool Type Parameters T ContainsAny<T>(ExSpan<T>, T, T, T) Searches for any occurrence of the specified value0, value1, or value2, and returns true if found. If not found, returns false. public static bool ContainsAny<T>(this ExSpan<T> span, T value0, T value1, T value2) where T : IEquatable<T>? Parameters span ExSpan<T> The span to search. value0 T One of the values to search for. value1 T One of the values to search for. value2 T One of the values to search for. Returns bool Type Parameters T ContainsAny<T>(ExSpan<T>, ReadOnlyExSpan<T>) Searches for any occurrence of any of the specified values and returns true if found. If not found, returns false. public static bool ContainsAny<T>(this ExSpan<T> span, ReadOnlyExSpan<T> values) where T : IEquatable<T>? Parameters span ExSpan<T> The span to search. values ReadOnlyExSpan<T> The set of values to search for. Returns bool Type Parameters T ContainsAny<T>(ReadOnlyExSpan<T>, T, T) Searches for any occurrence of the specified value0 or value1, and returns true if found. If not found, returns false. public static bool ContainsAny<T>(this ReadOnlyExSpan<T> span, T value0, T value1) where T : IEquatable<T>? Parameters span ReadOnlyExSpan<T> The span to search. value0 T One of the values to search for. value1 T One of the values to search for. Returns bool Type Parameters T ContainsAny<T>(ReadOnlyExSpan<T>, T, T, IEqualityComparer<T>?) Searches for any occurrence of the specified value0 or value1, and returns true if found. If not found, returns false. public static bool ContainsAny<T>(this ReadOnlyExSpan<T> span, T value0, T value1, IEqualityComparer<T>? comparer = null) Parameters span ReadOnlyExSpan<T> The span to search. value0 T One of the values to search for. value1 T One of the values to search for. comparer IEqualityComparer<T> The IEqualityComparer<T> implementation to use when comparing elements, or null to use the default IEqualityComparer<T> for the type of an element. Returns bool Type Parameters T ContainsAny<T>(ReadOnlyExSpan<T>, T, T, T) Searches for any occurrence of the specified value0, value1, or value2, and returns true if found. If not found, returns false. public static bool ContainsAny<T>(this ReadOnlyExSpan<T> span, T value0, T value1, T value2) where T : IEquatable<T>? Parameters span ReadOnlyExSpan<T> The span to search. value0 T One of the values to search for. value1 T One of the values to search for. value2 T One of the values to search for. Returns bool Type Parameters T ContainsAny<T>(ReadOnlyExSpan<T>, T, T, T, IEqualityComparer<T>?) Searches for any occurrence of the specified value0, value1, or value2, and returns true if found. If not found, returns false. public static bool ContainsAny<T>(this ReadOnlyExSpan<T> span, T value0, T value1, T value2, IEqualityComparer<T>? comparer = null) Parameters span ReadOnlyExSpan<T> The span to search. value0 T One of the values to search for. value1 T One of the values to search for. value2 T One of the values to search for. comparer IEqualityComparer<T> The IEqualityComparer<T> implementation to use when comparing elements, or null to use the default IEqualityComparer<T> for the type of an element. Returns bool Type Parameters T ContainsAny<T>(ReadOnlyExSpan<T>, ReadOnlyExSpan<T>) Searches for any occurrence of any of the specified values and returns true if found. If not found, returns false. public static bool ContainsAny<T>(this ReadOnlyExSpan<T> span, ReadOnlyExSpan<T> values) where T : IEquatable<T>? Parameters span ReadOnlyExSpan<T> The span to search. values ReadOnlyExSpan<T> The set of values to search for. Returns bool Type Parameters T ContainsAny<T>(ReadOnlyExSpan<T>, ReadOnlyExSpan<T>, IEqualityComparer<T>?) Searches for any occurrence of any of the specified values and returns true if found. If not found, returns false. public static bool ContainsAny<T>(this ReadOnlyExSpan<T> span, ReadOnlyExSpan<T> values, IEqualityComparer<T>? comparer = null) Parameters span ReadOnlyExSpan<T> The span to search. values ReadOnlyExSpan<T> The set of values to search for. comparer IEqualityComparer<T> The comparer to use. If null, Default is used. Returns bool Type Parameters T"
  },
  "api/Zyl.ExSpans.ExMemoryExtensions.ContainsAnyExcept.html": {
    "href": "api/Zyl.ExSpans.ExMemoryExtensions.ContainsAnyExcept.html",
    "title": "Method ContainsAnyExcept | ExSpans",
    "summary": "Method ContainsAnyExcept Namespace Zyl.ExSpans Assembly ExSpans.dll ContainsAnyExcept<T>(ExSpan<T>, T) Searches for any value other than the specified value. public static bool ContainsAnyExcept<T>(this ExSpan<T> span, T value) where T : IEquatable<T>? Parameters span ExSpan<T> The span to search. value T A value to avoid. Returns bool True if any value other than value is present in the span. If all of the values are value, returns false. Type Parameters T ContainsAnyExcept<T>(ExSpan<T>, T, T) Searches for any value other than the specified value0 or value1. public static bool ContainsAnyExcept<T>(this ExSpan<T> span, T value0, T value1) where T : IEquatable<T>? Parameters span ExSpan<T> The span to search. value0 T A value to avoid. value1 T A value to avoid. Returns bool True if any value other than value0 and value1 is present in the span. If all of the values are value0 or value1, returns false. Type Parameters T ContainsAnyExcept<T>(ExSpan<T>, T, T, T) Searches for any value other than the specified value0, value1, or value2. public static bool ContainsAnyExcept<T>(this ExSpan<T> span, T value0, T value1, T value2) where T : IEquatable<T>? Parameters span ExSpan<T> The span to search. value0 T A value to avoid. value1 T A value to avoid. value2 T A value to avoid. Returns bool True if any value other than value0, value1, and value2 is present in the span. If all of the values are value0, value1, or value2, returns false. Type Parameters T ContainsAnyExcept<T>(ExSpan<T>, ReadOnlyExSpan<T>) Searches for any value other than the specified values. public static bool ContainsAnyExcept<T>(this ExSpan<T> span, ReadOnlyExSpan<T> values) where T : IEquatable<T>? Parameters span ExSpan<T> The span to search. values ReadOnlyExSpan<T> The values to avoid. Returns bool True if any value other than those in values is present in the span. If all of the values are in values, returns false. Type Parameters T ContainsAnyExcept<T>(ReadOnlyExSpan<T>, T) Searches for any value other than the specified value. public static bool ContainsAnyExcept<T>(this ReadOnlyExSpan<T> span, T value) where T : IEquatable<T>? Parameters span ReadOnlyExSpan<T> The span to search. value T A value to avoid. Returns bool True if any value other than value is present in the span. If all of the values are value, returns false. Type Parameters T ContainsAnyExcept<T>(ReadOnlyExSpan<T>, T, IEqualityComparer<T>?) Searches for any value other than the specified value. public static bool ContainsAnyExcept<T>(this ReadOnlyExSpan<T> span, T value, IEqualityComparer<T>? comparer = null) Parameters span ReadOnlyExSpan<T> The span to search. value T A value to avoid. comparer IEqualityComparer<T> The IEqualityComparer<T> implementation to use when comparing elements, or null to use the default IEqualityComparer<T> for the type of an element. Returns bool True if any value other than value is present in the span. If all of the values are value, returns false. Type Parameters T ContainsAnyExcept<T>(ReadOnlyExSpan<T>, T, T) Searches for any value other than the specified value0 or value1. public static bool ContainsAnyExcept<T>(this ReadOnlyExSpan<T> span, T value0, T value1) where T : IEquatable<T>? Parameters span ReadOnlyExSpan<T> The span to search. value0 T A value to avoid. value1 T A value to avoid. Returns bool True if any value other than value0 and value1 is present in the span. If all of the values are value0 or value1, returns false. Type Parameters T ContainsAnyExcept<T>(ReadOnlyExSpan<T>, T, T, IEqualityComparer<T>?) Searches for any value other than the specified value0 or value1. public static bool ContainsAnyExcept<T>(this ReadOnlyExSpan<T> span, T value0, T value1, IEqualityComparer<T>? comparer = null) Parameters span ReadOnlyExSpan<T> The span to search. value0 T A value to avoid. value1 T A value to avoid. comparer IEqualityComparer<T> The IEqualityComparer<T> implementation to use when comparing elements, or null to use the default IEqualityComparer<T> for the type of an element. Returns bool True if any value other than value0 and value1 is present in the span. If all of the values are value0 or value1, returns false. Type Parameters T ContainsAnyExcept<T>(ReadOnlyExSpan<T>, T, T, T) Searches for any value other than the specified value0, value1, or value2. public static bool ContainsAnyExcept<T>(this ReadOnlyExSpan<T> span, T value0, T value1, T value2) where T : IEquatable<T>? Parameters span ReadOnlyExSpan<T> The span to search. value0 T A value to avoid. value1 T A value to avoid. value2 T A value to avoid. Returns bool True if any value other than value0, value1, and value2 is present in the span. If all of the values are value0, value1, or value2, returns false. Type Parameters T ContainsAnyExcept<T>(ReadOnlyExSpan<T>, T, T, T, IEqualityComparer<T>?) Searches for any value other than the specified value0, value1, or value2. public static bool ContainsAnyExcept<T>(this ReadOnlyExSpan<T> span, T value0, T value1, T value2, IEqualityComparer<T>? comparer = null) Parameters span ReadOnlyExSpan<T> The span to search. value0 T A value to avoid. value1 T A value to avoid. value2 T A value to avoid. comparer IEqualityComparer<T> The IEqualityComparer<T> implementation to use when comparing elements, or null to use the default IEqualityComparer<T> for the type of an element. Returns bool True if any value other than value0, value1, and value2 is present in the span. If all of the values are value0, value1, or value2, returns false. Type Parameters T ContainsAnyExcept<T>(ReadOnlyExSpan<T>, ReadOnlyExSpan<T>) Searches for any value other than the specified values. public static bool ContainsAnyExcept<T>(this ReadOnlyExSpan<T> span, ReadOnlyExSpan<T> values) where T : IEquatable<T>? Parameters span ReadOnlyExSpan<T> The span to search. values ReadOnlyExSpan<T> The values to avoid. Returns bool True if any value other than those in values is present in the span. If all of the values are in values, returns false. Type Parameters T ContainsAnyExcept<T>(ReadOnlyExSpan<T>, ReadOnlyExSpan<T>, IEqualityComparer<T>?) Searches for any value other than the specified values. public static bool ContainsAnyExcept<T>(this ReadOnlyExSpan<T> span, ReadOnlyExSpan<T> values, IEqualityComparer<T>? comparer = null) Parameters span ReadOnlyExSpan<T> The span to search. values ReadOnlyExSpan<T> The values to avoid. comparer IEqualityComparer<T> The IEqualityComparer<T> implementation to use when comparing elements, or null to use the default IEqualityComparer<T> for the type of an element. Returns bool True if any value other than those in values is present in the span. If all of the values are in values, returns false. Type Parameters T"
  },
  "api/Zyl.ExSpans.ExMemoryExtensions.ContainsAnyExceptInRange.html": {
    "href": "api/Zyl.ExSpans.ExMemoryExtensions.ContainsAnyExceptInRange.html",
    "title": "Method ContainsAnyExceptInRange | ExSpans",
    "summary": "Method ContainsAnyExceptInRange Namespace Zyl.ExSpans Assembly ExSpans.dll ContainsAnyExceptInRange<T>(ExSpan<T>, T, T) Searches for any value outside of the range between lowInclusive and highInclusive, inclusive. public static bool ContainsAnyExceptInRange<T>(this ExSpan<T> span, T lowInclusive, T highInclusive) where T : IComparable<T> Parameters span ExSpan<T> The span to search. lowInclusive T A lower bound, inclusive, of the excluded range. highInclusive T A upper bound, inclusive, of the excluded range. Returns bool True if any value other than those in the specified range is present in the span. If all of the values are inside of the specified range, returns false. Type Parameters T ContainsAnyExceptInRange<T>(ReadOnlyExSpan<T>, T, T) Searches for any value outside of the range between lowInclusive and highInclusive, inclusive. public static bool ContainsAnyExceptInRange<T>(this ReadOnlyExSpan<T> span, T lowInclusive, T highInclusive) where T : IComparable<T> Parameters span ReadOnlyExSpan<T> The span to search. lowInclusive T A lower bound, inclusive, of the excluded range. highInclusive T A upper bound, inclusive, of the excluded range. Returns bool True if any value other than those in the specified range is present in the span. If all of the values are inside of the specified range, returns false. Type Parameters T"
  },
  "api/Zyl.ExSpans.ExMemoryExtensions.ContainsAnyInRange.html": {
    "href": "api/Zyl.ExSpans.ExMemoryExtensions.ContainsAnyInRange.html",
    "title": "Method ContainsAnyInRange | ExSpans",
    "summary": "Method ContainsAnyInRange Namespace Zyl.ExSpans Assembly ExSpans.dll ContainsAnyInRange<T>(ExSpan<T>, T, T) Searches for any value in the range between lowInclusive and highInclusive, inclusive, and returns true if found. If not found, returns false. public static bool ContainsAnyInRange<T>(this ExSpan<T> span, T lowInclusive, T highInclusive) where T : IComparable<T> Parameters span ExSpan<T> The span to search. lowInclusive T A lower bound, inclusive, of the range for which to search. highInclusive T A upper bound, inclusive, of the range for which to search. Returns bool Type Parameters T ContainsAnyInRange<T>(ReadOnlyExSpan<T>, T, T) Searches for any value in the range between lowInclusive and highInclusive, inclusive, and returns true if found. If not found, returns false. public static bool ContainsAnyInRange<T>(this ReadOnlyExSpan<T> span, T lowInclusive, T highInclusive) where T : IComparable<T> Parameters span ReadOnlyExSpan<T> The span to search. lowInclusive T A lower bound, inclusive, of the range for which to search. highInclusive T A upper bound, inclusive, of the range for which to search. Returns bool Type Parameters T"
  },
  "api/Zyl.ExSpans.ExMemoryExtensions.Count.html": {
    "href": "api/Zyl.ExSpans.ExMemoryExtensions.Count.html",
    "title": "Method Count | ExSpans",
    "summary": "Method Count Namespace Zyl.ExSpans Assembly ExSpans.dll Count<T>(ExSpan<T>, T) Counts the number of times the specified value occurs in the span. public static nint Count<T>(this ExSpan<T> span, T value) where T : IEquatable<T>? Parameters span ExSpan<T> The span to search. value T The value for which to search. Returns nint The number of times value was found in the span. Type Parameters T The element type of the span. Count<T>(ReadOnlyExSpan<T>, T) Counts the number of times the specified value occurs in the span. public static nint Count<T>(this ReadOnlyExSpan<T> span, T value) where T : IEquatable<T>? Parameters span ReadOnlyExSpan<T> The span to search. value T The value for which to search. Returns nint The number of times value was found in the span. Type Parameters T The element type of the span. Count<T>(ReadOnlyExSpan<T>, T, IEqualityComparer<T>?) Counts the number of times the specified value occurs in the span. public static nint Count<T>(this ReadOnlyExSpan<T> span, T value, IEqualityComparer<T>? comparer = null) Parameters span ReadOnlyExSpan<T> The span to search. value T The value for which to search. comparer IEqualityComparer<T> The IEqualityComparer<T> implementation to use when comparing elements, or null to use the default IEqualityComparer<T> for the type of an element. Returns nint The number of times value was found in the span. Type Parameters T The element type of the span. Count<T>(ExSpan<T>, ReadOnlyExSpan<T>) Counts the number of times the specified value occurs in the span. public static nint Count<T>(this ExSpan<T> span, ReadOnlyExSpan<T> value) where T : IEquatable<T>? Parameters span ExSpan<T> The span to search. value ReadOnlyExSpan<T> The value for which to search. Returns nint The number of times value was found in the span. Type Parameters T The element type of the span. Count<T>(ReadOnlyExSpan<T>, ReadOnlyExSpan<T>) Counts the number of times the specified value occurs in the span. public static nint Count<T>(this ReadOnlyExSpan<T> span, ReadOnlyExSpan<T> value) where T : IEquatable<T>? Parameters span ReadOnlyExSpan<T> The span to search. value ReadOnlyExSpan<T> The value for which to search. Returns nint The number of times value was found in the span. Type Parameters T The element type of the span. Count<T>(ReadOnlyExSpan<T>, ReadOnlyExSpan<T>, IEqualityComparer<T>?) Counts the number of times the specified value occurs in the span. public static nint Count<T>(this ReadOnlyExSpan<T> span, ReadOnlyExSpan<T> value, IEqualityComparer<T>? comparer = null) Parameters span ReadOnlyExSpan<T> The span to search. value ReadOnlyExSpan<T> The value for which to search. comparer IEqualityComparer<T> The IEqualityComparer<T> implementation to use when comparing elements, or null to use the default IEqualityComparer<T> for the type of an element. Returns nint The number of times value was found in the span. Type Parameters T The element type of the span."
  },
  "api/Zyl.ExSpans.ExMemoryExtensions.CountAny.html": {
    "href": "api/Zyl.ExSpans.ExMemoryExtensions.CountAny.html",
    "title": "Method CountAny | ExSpans",
    "summary": "Method CountAny Namespace Zyl.ExSpans Assembly ExSpans.dll CountAny<T>(ReadOnlyExSpan<T>, ReadOnlyExSpan<T>) Counts the number of times any of the specified values occurs in the span. public static nint CountAny<T>(this ReadOnlyExSpan<T> span, ReadOnlyExSpan<T> values) where T : IEquatable<T>? Parameters span ReadOnlyExSpan<T> The span to search. values ReadOnlyExSpan<T> The set of values for which to search. Returns nint The number of times any of the T elements in values was found in the span. Type Parameters T The element type of the span. Remarks If values is empty, 0 is returned. CountAny<T>(ReadOnlyExSpan<T>, ReadOnlyExSpan<T>, IEqualityComparer<T>?) Counts the number of times any of the specified values occurs in the span. public static nint CountAny<T>(this ReadOnlyExSpan<T> span, ReadOnlyExSpan<T> values, IEqualityComparer<T>? comparer = null) Parameters span ReadOnlyExSpan<T> The span to search. values ReadOnlyExSpan<T> The set of values for which to search. comparer IEqualityComparer<T> The IEqualityComparer<T> implementation to use when comparing elements, or null to use the default IEqualityComparer<T> for the type of an element. Returns nint The number of times any of the T elements in values was found in the span. Type Parameters T The element type of the span. Remarks If values is empty, 0 is returned."
  },
  "api/Zyl.ExSpans.ExMemoryExtensions.EndsWith.html": {
    "href": "api/Zyl.ExSpans.ExMemoryExtensions.EndsWith.html",
    "title": "Method EndsWith | ExSpans",
    "summary": "Method EndsWith Namespace Zyl.ExSpans Assembly ExSpans.dll EndsWith<T>(ExSpan<T>, ReadOnlyExSpan<T>) Determines whether the specified sequence appears at the end of the span. public static bool EndsWith<T>(this ExSpan<T> span, ReadOnlyExSpan<T> value) where T : IEquatable<T>? Parameters span ExSpan<T> value ReadOnlyExSpan<T> Returns bool Type Parameters T EndsWith<T>(ReadOnlyExSpan<T>, ReadOnlyExSpan<T>) Determines whether the specified sequence appears at the end of the span. public static bool EndsWith<T>(this ReadOnlyExSpan<T> span, ReadOnlyExSpan<T> value) where T : IEquatable<T>? Parameters span ReadOnlyExSpan<T> value ReadOnlyExSpan<T> Returns bool Type Parameters T EndsWith<T>(ReadOnlyExSpan<T>, ReadOnlyExSpan<T>, IEqualityComparer<T>?) Determines whether the specified sequence appears at the end of the read-only span. public static bool EndsWith<T>(this ReadOnlyExSpan<T> span, ReadOnlyExSpan<T> value, IEqualityComparer<T>? comparer = null) Parameters span ReadOnlyExSpan<T> The source span. value ReadOnlyExSpan<T> The sequence to compare to the end of span. comparer IEqualityComparer<T> The IEqualityComparer<T> implementation to use when comparing elements, or null to use the default IEqualityComparer<T> for the type of an element. Returns bool Type Parameters T EndsWith<T>(ReadOnlyExSpan<T>, T) Determines whether the specified value appears at the end of the span. public static bool EndsWith<T>(this ReadOnlyExSpan<T> span, T value) where T : IEquatable<T>? Parameters span ReadOnlyExSpan<T> The span to search. value T The value to compare. Returns bool true if value matches the end of span; otherwise, false. Type Parameters T The type of the elements in the span. EndsWith<T>(ReadOnlyExSpan<T>, T, IEqualityComparer<T>?) Determines whether the specified value appears at the end of the span. public static bool EndsWith<T>(this ReadOnlyExSpan<T> span, T value, IEqualityComparer<T>? comparer = null) Parameters span ReadOnlyExSpan<T> The span to search. value T The value to compare. comparer IEqualityComparer<T> The IEqualityComparer<T> implementation to use when comparing elements, or null to use the default IEqualityComparer<T> for the type of an element. Returns bool true if value matches the end of span; otherwise, false. Type Parameters T The type of the elements in the span. EndsWith(ReadOnlyExSpan<char>, ReadOnlyExSpan<char>, StringComparison) Determines whether the end of the span matches the specified value when compared using the specified comparisonType option. public static bool EndsWith(this ReadOnlyExSpan<char> span, ReadOnlyExSpan<char> value, StringComparison comparisonType) Parameters span ReadOnlyExSpan<char> The source span. value ReadOnlyExSpan<char> The sequence to compare to the end of the source span. comparisonType StringComparison One of the enumeration values that determines how the span and value are compared. Returns bool Exceptions ExSpanTooLongException Throws an exception if the length is out of the range of Int32."
  },
  "api/Zyl.ExSpans.ExMemoryExtensions.EnumerateLines.html": {
    "href": "api/Zyl.ExSpans.ExMemoryExtensions.EnumerateLines.html",
    "title": "Method EnumerateLines | ExSpans",
    "summary": "Method EnumerateLines Namespace Zyl.ExSpans Assembly ExSpans.dll EnumerateLines(ReadOnlyExSpan<char>) Returns an enumeration of lines over the provided span. public static ExSpanLineEnumerator EnumerateLines(this ReadOnlyExSpan<char> span) Parameters span ReadOnlyExSpan<char> Returns ExSpanLineEnumerator Remarks It is recommended that protocol parsers not utilize this API. See the documentation for ReplaceLineEndings() for more information on how newline sequences are detected. EnumerateLines(ExSpan<char>) Returns an enumeration of lines over the provided span. public static ExSpanLineEnumerator EnumerateLines(this ExSpan<char> span) Parameters span ExSpan<char> Returns ExSpanLineEnumerator Remarks It is recommended that protocol parsers not utilize this API. See the documentation for ReplaceLineEndings() for more information on how newline sequences are detected."
  },
  "api/Zyl.ExSpans.ExMemoryExtensions.EnumerateRunes.html": {
    "href": "api/Zyl.ExSpans.ExMemoryExtensions.EnumerateRunes.html",
    "title": "Method EnumerateRunes | ExSpans",
    "summary": "Method EnumerateRunes Namespace Zyl.ExSpans Assembly ExSpans.dll EnumerateRunes(ReadOnlyExSpan<char>) Returns an enumeration of Rune from the provided span. public static ExSpanRuneEnumerator EnumerateRunes(this ReadOnlyExSpan<char> span) Parameters span ReadOnlyExSpan<char> Returns ExSpanRuneEnumerator Remarks Invalid sequences will be represented in the enumeration by ReplacementChar. EnumerateRunes(ExSpan<char>) Returns an enumeration of Rune from the provided span. public static ExSpanRuneEnumerator EnumerateRunes(this ExSpan<char> span) Parameters span ExSpan<char> Returns ExSpanRuneEnumerator Remarks Invalid sequences will be represented in the enumeration by ReplacementChar."
  },
  "api/Zyl.ExSpans.ExMemoryExtensions.Equals.html": {
    "href": "api/Zyl.ExSpans.ExMemoryExtensions.Equals.html",
    "title": "Method Equals | ExSpans",
    "summary": "Method Equals Namespace Zyl.ExSpans Assembly ExSpans.dll Equals(ReadOnlyExSpan<char>, ReadOnlyExSpan<char>, StringComparison) Determines whether this span and the specified other span have the same characters when compared using the specified comparisonType option. public static bool Equals(this ReadOnlyExSpan<char> span, ReadOnlyExSpan<char> other, StringComparison comparisonType) Parameters span ReadOnlyExSpan<char> The source span. other ReadOnlyExSpan<char> The value to compare with the source span. comparisonType StringComparison One of the enumeration values that determines how the span and other are compared. Returns bool Exceptions ExSpanTooLongException Throws an exception if the length is out of the range of Int32."
  },
  "api/Zyl.ExSpans.ExMemoryExtensions.Fill.html": {
    "href": "api/Zyl.ExSpans.ExMemoryExtensions.Fill.html",
    "title": "Method Fill | ExSpans",
    "summary": "Method Fill Namespace Zyl.ExSpans Assembly ExSpans.dll Fill<T>(ExSpan<T>, T) Fills the contents of this span with the given value (用指定的值填充此跨度的内容). public static void Fill<T>(this ExSpan<T> span, T value) Parameters span ExSpan<T> Target span (目标跨度). value T The given value (指定的值). Type Parameters T The element type (元素的类型)."
  },
  "api/Zyl.ExSpans.ExMemoryExtensions.IndexOf.html": {
    "href": "api/Zyl.ExSpans.ExMemoryExtensions.IndexOf.html",
    "title": "Method IndexOf | ExSpans",
    "summary": "Method IndexOf Namespace Zyl.ExSpans Assembly ExSpans.dll IndexOf<T>(ExSpan<T>, T) Searches for the specified value and returns the index of its first occurrence. If not found, returns -1. Values are compared using IEquatable{T}.Equals(T). public static nint IndexOf<T>(this ExSpan<T> span, T value) where T : IEquatable<T>? Parameters span ExSpan<T> The span to search. value T The value to search for. Returns nint Type Parameters T IndexOf<T>(ExSpan<T>, ReadOnlyExSpan<T>) Searches for the specified sequence and returns the index of its first occurrence. If not found, returns -1. Values are compared using IEquatable{T}.Equals(T). public static nint IndexOf<T>(this ExSpan<T> span, ReadOnlyExSpan<T> value) where T : IEquatable<T>? Parameters span ExSpan<T> The span to search. value ReadOnlyExSpan<T> The sequence to search for. Returns nint Type Parameters T IndexOf<T>(ReadOnlyExSpan<T>, T) Searches for the specified value and returns the index of its first occurrence. If not found, returns -1. Values are compared using IEquatable{T}.Equals(T). public static nint IndexOf<T>(this ReadOnlyExSpan<T> span, T value) where T : IEquatable<T>? Parameters span ReadOnlyExSpan<T> The span to search. value T The value to search for. Returns nint Type Parameters T IndexOf<T>(ReadOnlyExSpan<T>, T, IEqualityComparer<T>?) Searches for the specified value and returns the index of its first occurrence. If not found, returns -1. Values are compared using IEquatable{T}.Equals(T). public static nint IndexOf<T>(this ReadOnlyExSpan<T> span, T value, IEqualityComparer<T>? comparer = null) Parameters span ReadOnlyExSpan<T> The span to search. value T The value to search for. comparer IEqualityComparer<T> The IEqualityComparer<T> implementation to use when comparing elements, or null to use the default IEqualityComparer<T> for the type of an element. Returns nint Type Parameters T IndexOf<T>(ReadOnlyExSpan<T>, ReadOnlyExSpan<T>) Searches for the specified sequence and returns the index of its first occurrence. If not found, returns -1. Values are compared using IEquatable{T}.Equals(T). public static nint IndexOf<T>(this ReadOnlyExSpan<T> span, ReadOnlyExSpan<T> value) where T : IEquatable<T>? Parameters span ReadOnlyExSpan<T> The span to search. value ReadOnlyExSpan<T> The sequence to search for. Returns nint Type Parameters T IndexOf<T>(ReadOnlyExSpan<T>, ReadOnlyExSpan<T>, IEqualityComparer<T>?) Searches for the specified sequence and returns the index of its first occurrence. If not found, returns -1. Values are compared using IEquatable{T}.Equals(T). public static nint IndexOf<T>(this ReadOnlyExSpan<T> span, ReadOnlyExSpan<T> value, IEqualityComparer<T>? comparer = null) Parameters span ReadOnlyExSpan<T> The span to search. value ReadOnlyExSpan<T> The sequence to search for. comparer IEqualityComparer<T> The IEqualityComparer<T> implementation to use when comparing elements, or null to use the default IEqualityComparer<T> for the type of an element. Returns nint Type Parameters T IndexOf(ReadOnlyExSpan<char>, ReadOnlyExSpan<char>, StringComparison) Reports the zero-based index of the first occurrence of the specified value in the current span. public static nint IndexOf(this ReadOnlyExSpan<char> span, ReadOnlyExSpan<char> value, StringComparison comparisonType) Parameters span ReadOnlyExSpan<char> The source span. value ReadOnlyExSpan<char> The value to seek within the source span. comparisonType StringComparison One of the enumeration values that determines how the span and value are compared. Returns nint Exceptions ExSpanTooLongException Throws an exception if the length is out of the range of Int32."
  },
  "api/Zyl.ExSpans.ExMemoryExtensions.IndexOfAny.html": {
    "href": "api/Zyl.ExSpans.ExMemoryExtensions.IndexOfAny.html",
    "title": "Method IndexOfAny | ExSpans",
    "summary": "Method IndexOfAny Namespace Zyl.ExSpans Assembly ExSpans.dll IndexOfAny<T>(ExSpan<T>, T, T) Searches for the first index of any of the specified values similar to calling IndexOf several times with the logical OR operator. If not found, returns -1. public static nint IndexOfAny<T>(this ExSpan<T> span, T value0, T value1) where T : IEquatable<T>? Parameters span ExSpan<T> The span to search. value0 T One of the values to search for. value1 T One of the values to search for. Returns nint Type Parameters T IndexOfAny<T>(ExSpan<T>, T, T, T) Searches for the first index of any of the specified values similar to calling IndexOf several times with the logical OR operator. If not found, returns -1. public static nint IndexOfAny<T>(this ExSpan<T> span, T value0, T value1, T value2) where T : IEquatable<T>? Parameters span ExSpan<T> The span to search. value0 T One of the values to search for. value1 T One of the values to search for. value2 T One of the values to search for. Returns nint Type Parameters T IndexOfAny<T>(ExSpan<T>, ReadOnlyExSpan<T>) Searches for the first index of any of the specified values similar to calling IndexOf several times with the logical OR operator. If not found, returns -1. public static nint IndexOfAny<T>(this ExSpan<T> span, ReadOnlyExSpan<T> values) where T : IEquatable<T>? Parameters span ExSpan<T> The span to search. values ReadOnlyExSpan<T> The set of values to search for. Returns nint Type Parameters T IndexOfAny<T>(ReadOnlyExSpan<T>, T, T) Searches for the first index of any of the specified values similar to calling IndexOf several times with the logical OR operator. If not found, returns -1. public static nint IndexOfAny<T>(this ReadOnlyExSpan<T> span, T value0, T value1) where T : IEquatable<T>? Parameters span ReadOnlyExSpan<T> The span to search. value0 T One of the values to search for. value1 T One of the values to search for. Returns nint Type Parameters T IndexOfAny<T>(ReadOnlyExSpan<T>, T, T, IEqualityComparer<T>?) Searches for the first index of any of the specified values similar to calling IndexOf several times with the logical OR operator. If not found, returns -1. public static nint IndexOfAny<T>(this ReadOnlyExSpan<T> span, T value0, T value1, IEqualityComparer<T>? comparer = null) Parameters span ReadOnlyExSpan<T> The span to search. value0 T One of the values to search for. value1 T One of the values to search for. comparer IEqualityComparer<T> The IEqualityComparer<T> implementation to use when comparing elements, or null to use the default IEqualityComparer<T> for the type of an element. Returns nint Type Parameters T IndexOfAny<T>(ReadOnlyExSpan<T>, T, T, T) Searches for the first index of any of the specified values similar to calling IndexOf several times with the logical OR operator. If not found, returns -1. public static nint IndexOfAny<T>(this ReadOnlyExSpan<T> span, T value0, T value1, T value2) where T : IEquatable<T>? Parameters span ReadOnlyExSpan<T> The span to search. value0 T One of the values to search for. value1 T One of the values to search for. value2 T One of the values to search for. Returns nint Type Parameters T IndexOfAny<T>(ReadOnlyExSpan<T>, T, T, T, IEqualityComparer<T>?) Searches for the first index of any of the specified values similar to calling IndexOf several times with the logical OR operator. If not found, returns -1. public static nint IndexOfAny<T>(this ReadOnlyExSpan<T> span, T value0, T value1, T value2, IEqualityComparer<T>? comparer = null) Parameters span ReadOnlyExSpan<T> The span to search. value0 T One of the values to search for. value1 T One of the values to search for. value2 T One of the values to search for. comparer IEqualityComparer<T> The IEqualityComparer<T> implementation to use when comparing elements, or null to use the default IEqualityComparer<T> for the type of an element. Returns nint Type Parameters T IndexOfAny<T>(ReadOnlyExSpan<T>, ReadOnlyExSpan<T>) Searches for the first index of any of the specified values similar to calling IndexOf several times with the logical OR operator. If not found, returns -1. public static nint IndexOfAny<T>(this ReadOnlyExSpan<T> span, ReadOnlyExSpan<T> values) where T : IEquatable<T>? Parameters span ReadOnlyExSpan<T> The span to search. values ReadOnlyExSpan<T> The set of values to search for. Returns nint Type Parameters T IndexOfAny<T>(ReadOnlyExSpan<T>, ReadOnlyExSpan<T>, IEqualityComparer<T>?) Searches for the first index of any of the specified values similar to calling IndexOf several times with the logical OR operator. If not found, returns -1. public static nint IndexOfAny<T>(this ReadOnlyExSpan<T> span, ReadOnlyExSpan<T> values, IEqualityComparer<T>? comparer = null) Parameters span ReadOnlyExSpan<T> The span to search. values ReadOnlyExSpan<T> The set of values to search for. comparer IEqualityComparer<T> The IEqualityComparer<T> implementation to use when comparing elements, or null to use the default IEqualityComparer<T> for the type of an element. Returns nint Type Parameters T"
  },
  "api/Zyl.ExSpans.ExMemoryExtensions.IndexOfAnyExcept.html": {
    "href": "api/Zyl.ExSpans.ExMemoryExtensions.IndexOfAnyExcept.html",
    "title": "Method IndexOfAnyExcept | ExSpans",
    "summary": "Method IndexOfAnyExcept Namespace Zyl.ExSpans Assembly ExSpans.dll IndexOfAnyExcept<T>(ExSpan<T>, T) Searches for the first index of any value other than the specified value. public static nint IndexOfAnyExcept<T>(this ExSpan<T> span, T value) where T : IEquatable<T>? Parameters span ExSpan<T> The span to search. value T A value to avoid. Returns nint The index in the span of the first occurrence of any value other than value. If all of the values are value, returns -1. Type Parameters T The type of the span and values. IndexOfAnyExcept<T>(ExSpan<T>, T, T) Searches for the first index of any value other than the specified value0 or value1. public static nint IndexOfAnyExcept<T>(this ExSpan<T> span, T value0, T value1) where T : IEquatable<T>? Parameters span ExSpan<T> The span to search. value0 T A value to avoid. value1 T A value to avoid Returns nint The index in the span of the first occurrence of any value other than value0 and value1. If all of the values are value0 or value1, returns -1. Type Parameters T The type of the span and values. IndexOfAnyExcept<T>(ExSpan<T>, T, T, T) Searches for the first index of any value other than the specified value0, value1, or value2. public static nint IndexOfAnyExcept<T>(this ExSpan<T> span, T value0, T value1, T value2) where T : IEquatable<T>? Parameters span ExSpan<T> The span to search. value0 T A value to avoid. value1 T A value to avoid value2 T A value to avoid Returns nint The index in the span of the first occurrence of any value other than value0, value1, and value2. If all of the values are value0, value1, or value2, returns -1. Type Parameters T The type of the span and values. IndexOfAnyExcept<T>(ExSpan<T>, ReadOnlyExSpan<T>) Searches for the first index of any value other than the specified values. public static nint IndexOfAnyExcept<T>(this ExSpan<T> span, ReadOnlyExSpan<T> values) where T : IEquatable<T>? Parameters span ExSpan<T> The span to search. values ReadOnlyExSpan<T> The values to avoid. Returns nint The index in the span of the first occurrence of any value other than those in values. If all of the values are in values, returns -1. Type Parameters T The type of the span and values. IndexOfAnyExcept<T>(ReadOnlyExSpan<T>, T) Searches for the first index of any value other than the specified value. public static nint IndexOfAnyExcept<T>(this ReadOnlyExSpan<T> span, T value) where T : IEquatable<T>? Parameters span ReadOnlyExSpan<T> The span to search. value T A value to avoid. Returns nint The index in the span of the first occurrence of any value other than value. If all of the values are value, returns -1. Type Parameters T The type of the span and values. IndexOfAnyExcept<T>(ReadOnlyExSpan<T>, T, IEqualityComparer<T>?) Searches for the first index of any value other than the specified value. public static nint IndexOfAnyExcept<T>(this ReadOnlyExSpan<T> span, T value, IEqualityComparer<T>? comparer = null) Parameters span ReadOnlyExSpan<T> The span to search. value T A value to avoid. comparer IEqualityComparer<T> The IEqualityComparer<T> implementation to use when comparing elements, or null to use the default IEqualityComparer<T> for the type of an element. Returns nint The index in the span of the first occurrence of any value other than value. If all of the values are value, returns -1. Type Parameters T The type of the span and values. IndexOfAnyExcept<T>(ReadOnlyExSpan<T>, T, T) Searches for the first index of any value other than the specified value0 or value1. public static nint IndexOfAnyExcept<T>(this ReadOnlyExSpan<T> span, T value0, T value1) where T : IEquatable<T>? Parameters span ReadOnlyExSpan<T> The span to search. value0 T A value to avoid. value1 T A value to avoid Returns nint The index in the span of the first occurrence of any value other than value0 and value1. If all of the values are value0 or value1, returns -1. Type Parameters T The type of the span and values. IndexOfAnyExcept<T>(ReadOnlyExSpan<T>, T, T, IEqualityComparer<T>?) Searches for the first index of any value other than the specified value0 or value1. public static nint IndexOfAnyExcept<T>(this ReadOnlyExSpan<T> span, T value0, T value1, IEqualityComparer<T>? comparer = null) Parameters span ReadOnlyExSpan<T> The span to search. value0 T A value to avoid. value1 T A value to avoid comparer IEqualityComparer<T> The IEqualityComparer<T> implementation to use when comparing elements, or null to use the default IEqualityComparer<T> for the type of an element. Returns nint The index in the span of the first occurrence of any value other than value0 and value1. If all of the values are value0 or value1, returns -1. Type Parameters T The type of the span and values. IndexOfAnyExcept<T>(ReadOnlyExSpan<T>, T, T, T) Searches for the first index of any value other than the specified value0, value1, or value2. public static nint IndexOfAnyExcept<T>(this ReadOnlyExSpan<T> span, T value0, T value1, T value2) where T : IEquatable<T>? Parameters span ReadOnlyExSpan<T> The span to search. value0 T A value to avoid. value1 T A value to avoid value2 T A value to avoid Returns nint The index in the span of the first occurrence of any value other than value0, value1, and value2. If all of the values are value0, value1, and value2, returns -1. Type Parameters T The type of the span and values. IndexOfAnyExcept<T>(ReadOnlyExSpan<T>, T, T, T, IEqualityComparer<T>?) Searches for the first index of any value other than the specified value0, value1, or value2. public static nint IndexOfAnyExcept<T>(this ReadOnlyExSpan<T> span, T value0, T value1, T value2, IEqualityComparer<T>? comparer = null) Parameters span ReadOnlyExSpan<T> The span to search. value0 T A value to avoid. value1 T A value to avoid value2 T A value to avoid comparer IEqualityComparer<T> The IEqualityComparer<T> implementation to use when comparing elements, or null to use the default IEqualityComparer<T> for the type of an element. Returns nint The index in the span of the first occurrence of any value other than value0, value1, and value2. If all of the values are value0, value1, and value2, returns -1. Type Parameters T The type of the span and values. IndexOfAnyExcept<T>(ReadOnlyExSpan<T>, ReadOnlyExSpan<T>) Searches for the first index of any value other than the specified values. public static nint IndexOfAnyExcept<T>(this ReadOnlyExSpan<T> span, ReadOnlyExSpan<T> values) where T : IEquatable<T>? Parameters span ReadOnlyExSpan<T> The span to search. values ReadOnlyExSpan<T> The values to avoid. Returns nint The index in the span of the first occurrence of any value other than those in values. If all of the values are in values, returns -1. Type Parameters T The type of the span and values. IndexOfAnyExcept<T>(ReadOnlyExSpan<T>, ReadOnlyExSpan<T>, IEqualityComparer<T>?) Searches for the first index of any value other than the specified values. public static nint IndexOfAnyExcept<T>(this ReadOnlyExSpan<T> span, ReadOnlyExSpan<T> values, IEqualityComparer<T>? comparer = null) Parameters span ReadOnlyExSpan<T> The span to search. values ReadOnlyExSpan<T> The values to avoid. comparer IEqualityComparer<T> The IEqualityComparer<T> implementation to use when comparing elements, or null to use the default IEqualityComparer<T> for the type of an element. Returns nint The index in the span of the first occurrence of any value other than those in values. If all of the values are in values, returns -1. Type Parameters T The type of the span and values."
  },
  "api/Zyl.ExSpans.ExMemoryExtensions.IndexOfAnyExceptInRange.html": {
    "href": "api/Zyl.ExSpans.ExMemoryExtensions.IndexOfAnyExceptInRange.html",
    "title": "Method IndexOfAnyExceptInRange | ExSpans",
    "summary": "Method IndexOfAnyExceptInRange Namespace Zyl.ExSpans Assembly ExSpans.dll IndexOfAnyExceptInRange<T>(ExSpan<T>, T, T) Searches for the first index of any value outside of the range between lowInclusive and highInclusive, inclusive. public static nint IndexOfAnyExceptInRange<T>(this ExSpan<T> span, T lowInclusive, T highInclusive) where T : IComparable<T> Parameters span ExSpan<T> The span to search. lowInclusive T A lower bound, inclusive, of the excluded range. highInclusive T A upper bound, inclusive, of the excluded range. Returns nint The index in the span of the first occurrence of any value outside of the specified range. If all of the values are inside of the specified range, returns -1. Type Parameters T The type of the span and values. IndexOfAnyExceptInRange<T>(ReadOnlyExSpan<T>, T, T) Searches for the first index of any value outside of the range between lowInclusive and highInclusive, inclusive. public static nint IndexOfAnyExceptInRange<T>(this ReadOnlyExSpan<T> span, T lowInclusive, T highInclusive) where T : IComparable<T> Parameters span ReadOnlyExSpan<T> The span to search. lowInclusive T A lower bound, inclusive, of the excluded range. highInclusive T A upper bound, inclusive, of the excluded range. Returns nint The index in the span of the first occurrence of any value outside of the specified range. If all of the values are inside of the specified range, returns -1. Type Parameters T The type of the span and values."
  },
  "api/Zyl.ExSpans.ExMemoryExtensions.IndexOfAnyInRange.html": {
    "href": "api/Zyl.ExSpans.ExMemoryExtensions.IndexOfAnyInRange.html",
    "title": "Method IndexOfAnyInRange | ExSpans",
    "summary": "Method IndexOfAnyInRange Namespace Zyl.ExSpans Assembly ExSpans.dll IndexOfAnyInRange<T>(ExSpan<T>, T, T) Searches for the first index of any value in the range between lowInclusive and highInclusive, inclusive. public static nint IndexOfAnyInRange<T>(this ExSpan<T> span, T lowInclusive, T highInclusive) where T : IComparable<T> Parameters span ExSpan<T> The span to search. lowInclusive T A lower bound, inclusive, of the range for which to search. highInclusive T A upper bound, inclusive, of the range for which to search. Returns nint The index in the span of the first occurrence of any value in the specified range. If all of the values are outside of the specified range, returns -1. Type Parameters T The type of the span and values. IndexOfAnyInRange<T>(ReadOnlyExSpan<T>, T, T) Searches for the first index of any value in the range between lowInclusive and highInclusive, inclusive. public static nint IndexOfAnyInRange<T>(this ReadOnlyExSpan<T> span, T lowInclusive, T highInclusive) where T : IComparable<T> Parameters span ReadOnlyExSpan<T> The span to search. lowInclusive T A lower bound, inclusive, of the range for which to search. highInclusive T A upper bound, inclusive, of the range for which to search. Returns nint The index in the span of the first occurrence of any value in the specified range. If all of the values are outside of the specified range, returns -1. Type Parameters T The type of the span and values."
  },
  "api/Zyl.ExSpans.ExMemoryExtensions.IsWhiteSpace.html": {
    "href": "api/Zyl.ExSpans.ExMemoryExtensions.IsWhiteSpace.html",
    "title": "Method IsWhiteSpace | ExSpans",
    "summary": "Method IsWhiteSpace Namespace Zyl.ExSpans Assembly ExSpans.dll IsWhiteSpace(ReadOnlyExSpan<char>) Indicates whether the specified span contains only white-space characters. public static bool IsWhiteSpace(this ReadOnlyExSpan<char> span) Parameters span ReadOnlyExSpan<char> Returns bool"
  },
  "api/Zyl.ExSpans.ExMemoryExtensions.LastIndexOf.html": {
    "href": "api/Zyl.ExSpans.ExMemoryExtensions.LastIndexOf.html",
    "title": "Method LastIndexOf | ExSpans",
    "summary": "Method LastIndexOf Namespace Zyl.ExSpans Assembly ExSpans.dll LastIndexOf<T>(ExSpan<T>, T) Searches for the specified value and returns the index of its last occurrence. If not found, returns -1. Values are compared using IEquatable{T}.Equals(T). public static nint LastIndexOf<T>(this ExSpan<T> span, T value) where T : IEquatable<T>? Parameters span ExSpan<T> The span to search. value T The value to search for. Returns nint Type Parameters T LastIndexOf<T>(ExSpan<T>, ReadOnlyExSpan<T>) Searches for the specified sequence and returns the index of its last occurrence. If not found, returns -1. Values are compared using IEquatable{T}.Equals(T). public static nint LastIndexOf<T>(this ExSpan<T> span, ReadOnlyExSpan<T> value) where T : IEquatable<T>? Parameters span ExSpan<T> The span to search. value ReadOnlyExSpan<T> The sequence to search for. Returns nint Type Parameters T LastIndexOf<T>(ReadOnlyExSpan<T>, T) Searches for the specified value and returns the index of its last occurrence. If not found, returns -1. Values are compared using IEquatable{T}.Equals(T). public static nint LastIndexOf<T>(this ReadOnlyExSpan<T> span, T value) where T : IEquatable<T>? Parameters span ReadOnlyExSpan<T> The span to search. value T The value to search for. Returns nint Type Parameters T LastIndexOf<T>(ReadOnlyExSpan<T>, T, IEqualityComparer<T>?) Searches for the specified value and returns the index of its last occurrence. If not found, returns -1. Values are compared using IEquatable{T}.Equals(T). public static nint LastIndexOf<T>(this ReadOnlyExSpan<T> span, T value, IEqualityComparer<T>? comparer = null) Parameters span ReadOnlyExSpan<T> The span to search. value T The value to search for. comparer IEqualityComparer<T> The IEqualityComparer<T> implementation to use when comparing elements, or null to use the default IEqualityComparer<T> for the type of an element. Returns nint Type Parameters T LastIndexOf<T>(ReadOnlyExSpan<T>, ReadOnlyExSpan<T>) Searches for the specified sequence and returns the index of its last occurrence. If not found, returns -1. Values are compared using IEquatable{T}.Equals(T). public static nint LastIndexOf<T>(this ReadOnlyExSpan<T> span, ReadOnlyExSpan<T> value) where T : IEquatable<T>? Parameters span ReadOnlyExSpan<T> The span to search. value ReadOnlyExSpan<T> The sequence to search for. Returns nint Type Parameters T LastIndexOf<T>(ReadOnlyExSpan<T>, ReadOnlyExSpan<T>, IEqualityComparer<T>?) Searches for the specified sequence and returns the index of its last occurrence. If not found, returns -1. Values are compared using IEquatable{T}.Equals(T). public static nint LastIndexOf<T>(this ReadOnlyExSpan<T> span, ReadOnlyExSpan<T> value, IEqualityComparer<T>? comparer = null) Parameters span ReadOnlyExSpan<T> The span to search. value ReadOnlyExSpan<T> The sequence to search for. comparer IEqualityComparer<T> The IEqualityComparer<T> implementation to use when comparing elements, or null to use the default IEqualityComparer<T> for the type of an element. Returns nint Type Parameters T LastIndexOf(ReadOnlyExSpan<char>, ReadOnlyExSpan<char>, StringComparison) Reports the zero-based index of the last occurrence of the specified value in the current span. public static nint LastIndexOf(this ReadOnlyExSpan<char> span, ReadOnlyExSpan<char> value, StringComparison comparisonType) Parameters span ReadOnlyExSpan<char> The source span. value ReadOnlyExSpan<char> The value to seek within the source span. comparisonType StringComparison One of the enumeration values that determines how the span and value are compared. Returns nint Exceptions ExSpanTooLongException Throws an exception if the length is out of the range of Int32."
  },
  "api/Zyl.ExSpans.ExMemoryExtensions.LastIndexOfAny.html": {
    "href": "api/Zyl.ExSpans.ExMemoryExtensions.LastIndexOfAny.html",
    "title": "Method LastIndexOfAny | ExSpans",
    "summary": "Method LastIndexOfAny Namespace Zyl.ExSpans Assembly ExSpans.dll LastIndexOfAny<T>(ExSpan<T>, T, T) Searches for the last index of any of the specified values similar to calling LastIndexOf several times with the logical OR operator. If not found, returns -1. public static nint LastIndexOfAny<T>(this ExSpan<T> span, T value0, T value1) where T : IEquatable<T>? Parameters span ExSpan<T> The span to search. value0 T One of the values to search for. value1 T One of the values to search for. Returns nint Type Parameters T LastIndexOfAny<T>(ExSpan<T>, T, T, T) Searches for the last index of any of the specified values similar to calling LastIndexOf several times with the logical OR operator. If not found, returns -1. public static nint LastIndexOfAny<T>(this ExSpan<T> span, T value0, T value1, T value2) where T : IEquatable<T>? Parameters span ExSpan<T> The span to search. value0 T One of the values to search for. value1 T One of the values to search for. value2 T One of the values to search for. Returns nint Type Parameters T LastIndexOfAny<T>(ExSpan<T>, ReadOnlyExSpan<T>) Searches for the last index of any of the specified values similar to calling LastIndexOf several times with the logical OR operator. If not found, returns -1. public static nint LastIndexOfAny<T>(this ExSpan<T> span, ReadOnlyExSpan<T> values) where T : IEquatable<T>? Parameters span ExSpan<T> The span to search. values ReadOnlyExSpan<T> The set of values to search for. Returns nint Type Parameters T LastIndexOfAny<T>(ReadOnlyExSpan<T>, T, T) Searches for the last index of any of the specified values similar to calling LastIndexOf several times with the logical OR operator. If not found, returns -1. public static nint LastIndexOfAny<T>(this ReadOnlyExSpan<T> span, T value0, T value1) where T : IEquatable<T>? Parameters span ReadOnlyExSpan<T> The span to search. value0 T One of the values to search for. value1 T One of the values to search for. Returns nint Type Parameters T LastIndexOfAny<T>(ReadOnlyExSpan<T>, T, T, IEqualityComparer<T>?) Searches for the last index of any of the specified values similar to calling LastIndexOf several times with the logical OR operator. If not found, returns -1. public static nint LastIndexOfAny<T>(this ReadOnlyExSpan<T> span, T value0, T value1, IEqualityComparer<T>? comparer = null) Parameters span ReadOnlyExSpan<T> The span to search. value0 T One of the values to search for. value1 T One of the values to search for. comparer IEqualityComparer<T> The IEqualityComparer<T> implementation to use when comparing elements, or null to use the default IEqualityComparer<T> for the type of an element. Returns nint Type Parameters T LastIndexOfAny<T>(ReadOnlyExSpan<T>, T, T, T) Searches for the last index of any of the specified values similar to calling LastIndexOf several times with the logical OR operator. If not found, returns -1. public static nint LastIndexOfAny<T>(this ReadOnlyExSpan<T> span, T value0, T value1, T value2) where T : IEquatable<T>? Parameters span ReadOnlyExSpan<T> The span to search. value0 T One of the values to search for. value1 T One of the values to search for. value2 T One of the values to search for. Returns nint Type Parameters T LastIndexOfAny<T>(ReadOnlyExSpan<T>, T, T, T, IEqualityComparer<T>?) Searches for the last index of any of the specified values similar to calling LastIndexOf several times with the logical OR operator. If not found, returns -1. public static nint LastIndexOfAny<T>(this ReadOnlyExSpan<T> span, T value0, T value1, T value2, IEqualityComparer<T>? comparer = null) Parameters span ReadOnlyExSpan<T> The span to search. value0 T One of the values to search for. value1 T One of the values to search for. value2 T One of the values to search for. comparer IEqualityComparer<T> The IEqualityComparer<T> implementation to use when comparing elements, or null to use the default IEqualityComparer<T> for the type of an element. Returns nint Type Parameters T LastIndexOfAny<T>(ReadOnlyExSpan<T>, ReadOnlyExSpan<T>) Searches for the last index of any of the specified values similar to calling LastIndexOf several times with the logical OR operator. If not found, returns -1. public static nint LastIndexOfAny<T>(this ReadOnlyExSpan<T> span, ReadOnlyExSpan<T> values) where T : IEquatable<T>? Parameters span ReadOnlyExSpan<T> The span to search. values ReadOnlyExSpan<T> The set of values to search for. Returns nint Type Parameters T LastIndexOfAny<T>(ReadOnlyExSpan<T>, ReadOnlyExSpan<T>, IEqualityComparer<T>?) Searches for the last index of any of the specified values similar to calling LastIndexOf several times with the logical OR operator. If not found, returns -1. public static nint LastIndexOfAny<T>(this ReadOnlyExSpan<T> span, ReadOnlyExSpan<T> values, IEqualityComparer<T>? comparer = null) Parameters span ReadOnlyExSpan<T> The span to search. values ReadOnlyExSpan<T> The set of values to search for. comparer IEqualityComparer<T> The IEqualityComparer<T> implementation to use when comparing elements, or null to use the default IEqualityComparer<T> for the type of an element. Returns nint Type Parameters T"
  },
  "api/Zyl.ExSpans.ExMemoryExtensions.LastIndexOfAnyExcept.html": {
    "href": "api/Zyl.ExSpans.ExMemoryExtensions.LastIndexOfAnyExcept.html",
    "title": "Method LastIndexOfAnyExcept | ExSpans",
    "summary": "Method LastIndexOfAnyExcept Namespace Zyl.ExSpans Assembly ExSpans.dll LastIndexOfAnyExcept<T>(ExSpan<T>, T) Searches for the last index of any value other than the specified value. public static nint LastIndexOfAnyExcept<T>(this ExSpan<T> span, T value) where T : IEquatable<T>? Parameters span ExSpan<T> The span to search. value T A value to avoid. Returns nint The index in the span of the last occurrence of any value other than value. If all of the values are value, returns -1. Type Parameters T The type of the span and values. LastIndexOfAnyExcept<T>(ExSpan<T>, T, T) Searches for the last index of any value other than the specified value0 or value1. public static nint LastIndexOfAnyExcept<T>(this ExSpan<T> span, T value0, T value1) where T : IEquatable<T>? Parameters span ExSpan<T> The span to search. value0 T A value to avoid. value1 T A value to avoid Returns nint The index in the span of the last occurrence of any value other than value0 and value1. If all of the values are value0 or value1, returns -1. Type Parameters T The type of the span and values. LastIndexOfAnyExcept<T>(ExSpan<T>, T, T, T) Searches for the last index of any value other than the specified value0, value1, or value2. public static nint LastIndexOfAnyExcept<T>(this ExSpan<T> span, T value0, T value1, T value2) where T : IEquatable<T>? Parameters span ExSpan<T> The span to search. value0 T A value to avoid. value1 T A value to avoid value2 T A value to avoid Returns nint The index in the span of the last occurrence of any value other than value0, value1, and value2. If all of the values are value0, value1, and value2, returns -1. Type Parameters T The type of the span and values. LastIndexOfAnyExcept<T>(ExSpan<T>, ReadOnlyExSpan<T>) Searches for the last index of any value other than the specified values. public static nint LastIndexOfAnyExcept<T>(this ExSpan<T> span, ReadOnlyExSpan<T> values) where T : IEquatable<T>? Parameters span ExSpan<T> The span to search. values ReadOnlyExSpan<T> The values to avoid. Returns nint The index in the span of the last occurrence of any value other than those in values. If all of the values are in values, returns -1. Type Parameters T The type of the span and values. LastIndexOfAnyExcept<T>(ReadOnlyExSpan<T>, T) Searches for the last index of any value other than the specified value. public static nint LastIndexOfAnyExcept<T>(this ReadOnlyExSpan<T> span, T value) where T : IEquatable<T>? Parameters span ReadOnlyExSpan<T> The span to search. value T A value to avoid. Returns nint The index in the span of the last occurrence of any value other than value. If all of the values are value, returns -1. Type Parameters T The type of the span and values. LastIndexOfAnyExcept<T>(ReadOnlyExSpan<T>, T, IEqualityComparer<T>?) Searches for the last index of any value other than the specified value. public static nint LastIndexOfAnyExcept<T>(this ReadOnlyExSpan<T> span, T value, IEqualityComparer<T>? comparer = null) Parameters span ReadOnlyExSpan<T> The span to search. value T A value to avoid. comparer IEqualityComparer<T> The IEqualityComparer<T> implementation to use when comparing elements, or null to use the default IEqualityComparer<T> for the type of an element. Returns nint The index in the span of the last occurrence of any value other than value. If all of the values are value, returns -1. Type Parameters T The type of the span and values. LastIndexOfAnyExcept<T>(ReadOnlyExSpan<T>, T, T) Searches for the last index of any value other than the specified value0 or value1. public static nint LastIndexOfAnyExcept<T>(this ReadOnlyExSpan<T> span, T value0, T value1) where T : IEquatable<T>? Parameters span ReadOnlyExSpan<T> The span to search. value0 T A value to avoid. value1 T A value to avoid Returns nint The index in the span of the last occurrence of any value other than value0 and value1. If all of the values are value0 or value1, returns -1. Type Parameters T The type of the span and values. LastIndexOfAnyExcept<T>(ReadOnlyExSpan<T>, T, T, IEqualityComparer<T>?) Searches for the last index of any value other than the specified value0 or value1. public static nint LastIndexOfAnyExcept<T>(this ReadOnlyExSpan<T> span, T value0, T value1, IEqualityComparer<T>? comparer = null) Parameters span ReadOnlyExSpan<T> The span to search. value0 T A value to avoid. value1 T A value to avoid comparer IEqualityComparer<T> The IEqualityComparer<T> implementation to use when comparing elements, or null to use the default IEqualityComparer<T> for the type of an element. Returns nint The index in the span of the last occurrence of any value other than value0 and value1. If all of the values are value0 or value1, returns -1. Type Parameters T The type of the span and values. LastIndexOfAnyExcept<T>(ReadOnlyExSpan<T>, T, T, T) Searches for the last index of any value other than the specified value0, value1, or value2. public static nint LastIndexOfAnyExcept<T>(this ReadOnlyExSpan<T> span, T value0, T value1, T value2) where T : IEquatable<T>? Parameters span ReadOnlyExSpan<T> The span to search. value0 T A value to avoid. value1 T A value to avoid value2 T A value to avoid Returns nint The index in the span of the last occurrence of any value other than value0, value1, and value2. If all of the values are value0, value1, and value2, returns -1. Type Parameters T The type of the span and values. LastIndexOfAnyExcept<T>(ReadOnlyExSpan<T>, T, T, T, IEqualityComparer<T>?) Searches for the last index of any value other than the specified value0, value1, or value2. public static nint LastIndexOfAnyExcept<T>(this ReadOnlyExSpan<T> span, T value0, T value1, T value2, IEqualityComparer<T>? comparer = null) Parameters span ReadOnlyExSpan<T> The span to search. value0 T A value to avoid. value1 T A value to avoid value2 T A value to avoid comparer IEqualityComparer<T> The IEqualityComparer<T> implementation to use when comparing elements, or null to use the default IEqualityComparer<T> for the type of an element. Returns nint The index in the span of the last occurrence of any value other than value0, value1, and value2. If all of the values are value0, value1, and value2, returns -1. Type Parameters T The type of the span and values. LastIndexOfAnyExcept<T>(ReadOnlyExSpan<T>, ReadOnlyExSpan<T>) Searches for the last index of any value other than the specified values. public static nint LastIndexOfAnyExcept<T>(this ReadOnlyExSpan<T> span, ReadOnlyExSpan<T> values) where T : IEquatable<T>? Parameters span ReadOnlyExSpan<T> The span to search. values ReadOnlyExSpan<T> The values to avoid. Returns nint The index in the span of the first occurrence of any value other than those in values. If all of the values are in values, returns -1. Type Parameters T The type of the span and values. LastIndexOfAnyExcept<T>(ReadOnlyExSpan<T>, ReadOnlyExSpan<T>, IEqualityComparer<T>?) Searches for the last index of any value other than the specified values. public static nint LastIndexOfAnyExcept<T>(this ReadOnlyExSpan<T> span, ReadOnlyExSpan<T> values, IEqualityComparer<T>? comparer = null) Parameters span ReadOnlyExSpan<T> The span to search. values ReadOnlyExSpan<T> The values to avoid. comparer IEqualityComparer<T> The IEqualityComparer<T> implementation to use when comparing elements, or null to use the default IEqualityComparer<T> for the type of an element. Returns nint The index in the span of the first occurrence of any value other than those in values. If all of the values are in values, returns -1. Type Parameters T The type of the span and values."
  },
  "api/Zyl.ExSpans.ExMemoryExtensions.LastIndexOfAnyExceptInRange.html": {
    "href": "api/Zyl.ExSpans.ExMemoryExtensions.LastIndexOfAnyExceptInRange.html",
    "title": "Method LastIndexOfAnyExceptInRange | ExSpans",
    "summary": "Method LastIndexOfAnyExceptInRange Namespace Zyl.ExSpans Assembly ExSpans.dll LastIndexOfAnyExceptInRange<T>(ExSpan<T>, T, T) Searches for the last index of any value outside of the range between lowInclusive and highInclusive, inclusive. public static nint LastIndexOfAnyExceptInRange<T>(this ExSpan<T> span, T lowInclusive, T highInclusive) where T : IComparable<T> Parameters span ExSpan<T> The span to search. lowInclusive T A lower bound, inclusive, of the excluded range. highInclusive T A upper bound, inclusive, of the excluded range. Returns nint The index in the span of the last occurrence of any value outside of the specified range. If all of the values are inside of the specified range, returns -1. Type Parameters T The type of the span and values. LastIndexOfAnyExceptInRange<T>(ReadOnlyExSpan<T>, T, T) Searches for the last index of any value outside of the range between lowInclusive and highInclusive, inclusive. public static nint LastIndexOfAnyExceptInRange<T>(this ReadOnlyExSpan<T> span, T lowInclusive, T highInclusive) where T : IComparable<T> Parameters span ReadOnlyExSpan<T> The span to search. lowInclusive T A lower bound, inclusive, of the excluded range. highInclusive T A upper bound, inclusive, of the excluded range. Returns nint The index in the span of the last occurrence of any value outside of the specified range. If all of the values are inside of the specified range, returns -1. Type Parameters T The type of the span and values."
  },
  "api/Zyl.ExSpans.ExMemoryExtensions.LastIndexOfAnyInRange.html": {
    "href": "api/Zyl.ExSpans.ExMemoryExtensions.LastIndexOfAnyInRange.html",
    "title": "Method LastIndexOfAnyInRange | ExSpans",
    "summary": "Method LastIndexOfAnyInRange Namespace Zyl.ExSpans Assembly ExSpans.dll LastIndexOfAnyInRange<T>(ExSpan<T>, T, T) Searches for the last index of any value in the range between lowInclusive and highInclusive, inclusive. public static nint LastIndexOfAnyInRange<T>(this ExSpan<T> span, T lowInclusive, T highInclusive) where T : IComparable<T> Parameters span ExSpan<T> The span to search. lowInclusive T A lower bound, inclusive, of the range for which to search. highInclusive T A upper bound, inclusive, of the range for which to search. Returns nint The index in the span of the last occurrence of any value in the specified range. If all of the values are outside of the specified range, returns -1. Type Parameters T The type of the span and values. LastIndexOfAnyInRange<T>(ReadOnlyExSpan<T>, T, T) Searches for the last index of any value in the range between lowInclusive and highInclusive, inclusive. public static nint LastIndexOfAnyInRange<T>(this ReadOnlyExSpan<T> span, T lowInclusive, T highInclusive) where T : IComparable<T> Parameters span ReadOnlyExSpan<T> The span to search. lowInclusive T A lower bound, inclusive, of the range for which to search. highInclusive T A upper bound, inclusive, of the range for which to search. Returns nint The index in the span of the last occurrence of any value in the specified range. If all of the values are outside of the specified range, returns -1. Type Parameters T The type of the span and values."
  },
  "api/Zyl.ExSpans.ExMemoryExtensions.Overlaps.html": {
    "href": "api/Zyl.ExSpans.ExMemoryExtensions.Overlaps.html",
    "title": "Method Overlaps | ExSpans",
    "summary": "Method Overlaps Namespace Zyl.ExSpans Assembly ExSpans.dll Overlaps<T>(ExSpan<T>, ReadOnlyExSpan<T>) Determines whether two sequences overlap in memory. public static bool Overlaps<T>(this ExSpan<T> span, ReadOnlyExSpan<T> other) Parameters span ExSpan<T> other ReadOnlyExSpan<T> Returns bool Type Parameters T Overlaps<T>(ExSpan<T>, ReadOnlyExSpan<T>, out int) Determines whether two sequences overlap in memory and outputs the element offset. public static bool Overlaps<T>(this ExSpan<T> span, ReadOnlyExSpan<T> other, out int elementOffset) Parameters span ExSpan<T> other ReadOnlyExSpan<T> elementOffset int Returns bool Type Parameters T Overlaps<T>(ReadOnlyExSpan<T>, ReadOnlyExSpan<T>) Determines whether two sequences overlap in memory. public static bool Overlaps<T>(this ReadOnlyExSpan<T> span, ReadOnlyExSpan<T> other) Parameters span ReadOnlyExSpan<T> other ReadOnlyExSpan<T> Returns bool Type Parameters T Overlaps<T>(ReadOnlyExSpan<T>, ReadOnlyExSpan<T>, out int) Determines whether two sequences overlap in memory and outputs the element offset. public static bool Overlaps<T>(this ReadOnlyExSpan<T> span, ReadOnlyExSpan<T> other, out int elementOffset) Parameters span ReadOnlyExSpan<T> other ReadOnlyExSpan<T> elementOffset int Returns bool Type Parameters T"
  },
  "api/Zyl.ExSpans.ExMemoryExtensions.Replace.html": {
    "href": "api/Zyl.ExSpans.ExMemoryExtensions.Replace.html",
    "title": "Method Replace | ExSpans",
    "summary": "Method Replace Namespace Zyl.ExSpans Assembly ExSpans.dll Replace<T>(ExSpan<T>, T, T) Replaces all occurrences of oldValue with newValue. public static void Replace<T>(this ExSpan<T> span, T oldValue, T newValue) where T : IEquatable<T>? Parameters span ExSpan<T> The span in which the elements should be replaced. oldValue T The value to be replaced with newValue. newValue T The value to replace all occurrences of oldValue. Type Parameters T The type of the elements in the span. Replace<T>(ExSpan<T>, T, T, IEqualityComparer<T>?) Replaces all occurrences of oldValue with newValue. public static void Replace<T>(this ExSpan<T> span, T oldValue, T newValue, IEqualityComparer<T>? comparer = null) Parameters span ExSpan<T> The span in which the elements should be replaced. oldValue T The value to be replaced with newValue. newValue T The value to replace all occurrences of oldValue. comparer IEqualityComparer<T> The IEqualityComparer<T> implementation to use when comparing elements, or null to use the default IEqualityComparer<T> for the type of an element. Type Parameters T The type of the elements in the span. Replace<T>(ReadOnlyExSpan<T>, ExSpan<T>, T, T) Copies source to destination, replacing all occurrences of oldValue with newValue. public static void Replace<T>(this ReadOnlyExSpan<T> source, ExSpan<T> destination, T oldValue, T newValue) where T : IEquatable<T>? Parameters source ReadOnlyExSpan<T> The span to copy. destination ExSpan<T> The span into which the copied and replaced values should be written. oldValue T The value to be replaced with newValue. newValue T The value to replace all occurrences of oldValue. Type Parameters T The type of the elements in the spans. Exceptions ArgumentException The destination ExSpan was shorter than the source span. ArgumentException The source and destination were overlapping but not referring to the same starting location. Replace<T>(ReadOnlyExSpan<T>, ExSpan<T>, T, T, IEqualityComparer<T>?) Copies source to destination, replacing all occurrences of oldValue with newValue. public static void Replace<T>(this ReadOnlyExSpan<T> source, ExSpan<T> destination, T oldValue, T newValue, IEqualityComparer<T>? comparer = null) Parameters source ReadOnlyExSpan<T> The span to copy. destination ExSpan<T> The span into which the copied and replaced values should be written. oldValue T The value to be replaced with newValue. newValue T The value to replace all occurrences of oldValue. comparer IEqualityComparer<T> The IEqualityComparer<T> implementation to use when comparing elements, or null to use the default IEqualityComparer<T> for the type of an element. Type Parameters T The type of the elements in the spans. Exceptions ArgumentException The destination ExSpan was shorter than the source span. ArgumentException The source and destination were overlapping but not referring to the same starting location."
  },
  "api/Zyl.ExSpans.ExMemoryExtensions.Reverse.html": {
    "href": "api/Zyl.ExSpans.ExMemoryExtensions.Reverse.html",
    "title": "Method Reverse | ExSpans",
    "summary": "Method Reverse Namespace Zyl.ExSpans Assembly ExSpans.dll Reverse<T>(ExSpan<T>) Reverses the sequence of the elements in the entire span. public static void Reverse<T>(this ExSpan<T> span) Parameters span ExSpan<T> Type Parameters T"
  },
  "api/Zyl.ExSpans.ExMemoryExtensions.SequenceCompareTo.html": {
    "href": "api/Zyl.ExSpans.ExMemoryExtensions.SequenceCompareTo.html",
    "title": "Method SequenceCompareTo | ExSpans",
    "summary": "Method SequenceCompareTo Namespace Zyl.ExSpans Assembly ExSpans.dll SequenceCompareTo<T>(ExSpan<T>, ReadOnlyExSpan<T>) Determines the relative order of the sequences being compared by comparing the elements using IComparable{T}.CompareTo(T). public static int SequenceCompareTo<T>(this ExSpan<T> span, ReadOnlyExSpan<T> other) where T : IComparable<T>? Parameters span ExSpan<T> other ReadOnlyExSpan<T> Returns int Type Parameters T SequenceCompareTo<T>(ReadOnlyExSpan<T>, ReadOnlyExSpan<T>) Determines the relative order of the sequences being compared by comparing the elements using IComparable{T}.CompareTo(T). public static int SequenceCompareTo<T>(this ReadOnlyExSpan<T> span, ReadOnlyExSpan<T> other) where T : IComparable<T>? Parameters span ReadOnlyExSpan<T> other ReadOnlyExSpan<T> Returns int Type Parameters T SequenceCompareTo<T>(ReadOnlyExSpan<T>, ReadOnlyExSpan<T>, IComparer<T>?) Determines the relative order of the sequences being compared by comparing the elements using IComparable{T}.CompareTo(T). public static int SequenceCompareTo<T>(this ReadOnlyExSpan<T> span, ReadOnlyExSpan<T> other, IComparer<T>? comparer = null) Parameters span ReadOnlyExSpan<T> other ReadOnlyExSpan<T> comparer IComparer<T> Returns int Type Parameters T SequenceCompareTo<T>(ExSpan<T>, ReadOnlyExSpan<T>, IComparer<T>?) Determines the relative order of the sequences being compared by comparing the elements using IComparable{T}.CompareTo(T). public static int SequenceCompareTo<T>(this ExSpan<T> span, ReadOnlyExSpan<T> other, IComparer<T>? comparer = null) Parameters span ExSpan<T> other ReadOnlyExSpan<T> comparer IComparer<T> Returns int Type Parameters T"
  },
  "api/Zyl.ExSpans.ExMemoryExtensions.SequenceEqual.html": {
    "href": "api/Zyl.ExSpans.ExMemoryExtensions.SequenceEqual.html",
    "title": "Method SequenceEqual | ExSpans",
    "summary": "Method SequenceEqual Namespace Zyl.ExSpans Assembly ExSpans.dll SequenceEqual<T>(ExSpan<T>, ReadOnlyExSpan<T>) Determines whether a span and a read-only span are equal by comparing the elements using Equals(T) (通过使用 Equals(T) 比较元素, 确定跨度和只读跨度是否相等). public static bool SequenceEqual<T>(this ExSpan<T> span, ReadOnlyExSpan<T> other) where T : IEquatable<T>? Parameters span ExSpan<T> The first sequence to compare (要比较的第一个序列). other ReadOnlyExSpan<T> The second sequence to compare (要比较的第二个序列). Returns bool true if the two sequences are equal; otherwise, false (如果两个序列相等, 则 true; 否则 false). Type Parameters T The element type (元素的类型). SequenceEqual<T>(ReadOnlyExSpan<T>, ReadOnlyExSpan<T>) Determines whether two read-only sequences are equal by comparing the elements using Equals(T) (通过使用 Equals(T) 比较元素, 确定两个只读序列是否相等). public static bool SequenceEqual<T>(this ReadOnlyExSpan<T> span, ReadOnlyExSpan<T> other) where T : IEquatable<T>? Parameters span ReadOnlyExSpan<T> The first sequence to compare (要比较的第一个序列). other ReadOnlyExSpan<T> The second sequence to compare (要比较的第二个序列). Returns bool true if the two sequences are equal; otherwise, false (如果两个序列相等, 则 true; 否则 false). Type Parameters T The element type (元素的类型). SequenceEqual<T>(ExSpan<T>, ReadOnlyExSpan<T>, IEqualityComparer<T>?) Determines whether a span and a read-only span are equal by comparing the elements using Equals(T) (通过使用 Equals(T) 比较元素, 确定跨度和只读跨度是否相等). public static bool SequenceEqual<T>(this ExSpan<T> span, ReadOnlyExSpan<T> other, IEqualityComparer<T>? comparer = null) Parameters span ExSpan<T> The first sequence to compare (要比较的第一个序列). other ReadOnlyExSpan<T> The second sequence to compare (要比较的第二个序列). comparer IEqualityComparer<T> The IEqualityComparer<T> implementation to use when comparing elements, or null to use the default IEqualityComparer<T> for the type of an element (比较元素时要使用的 IEqualityComparer<T> 实现. 或 null, 将使用元素的类型的默认 IEqualityComparer<T>). Returns bool true if the two sequences are equal; otherwise, false (如果两个序列相等, 则 true; 否则 false). Type Parameters T SequenceEqual<T>(ReadOnlyExSpan<T>, ReadOnlyExSpan<T>, IEqualityComparer<T>?) Determines whether two read-only sequences are equal by comparing the elements using Equals(T) (通过使用 Equals(T) 比较元素, 确定两个只读序列是否相等). public static bool SequenceEqual<T>(this ReadOnlyExSpan<T> span, ReadOnlyExSpan<T> other, IEqualityComparer<T>? comparer = null) Parameters span ReadOnlyExSpan<T> The first sequence to compare (要比较的第一个序列). other ReadOnlyExSpan<T> The second sequence to compare (要比较的第二个序列). comparer IEqualityComparer<T> The IEqualityComparer<T> implementation to use when comparing elements, or null to use the default IEqualityComparer<T> for the type of an element. Returns bool true if the two sequences are equal; otherwise, false (如果两个序列相等, 则 true; 否则 false). Type Parameters T"
  },
  "api/Zyl.ExSpans.ExMemoryExtensions.Sort.html": {
    "href": "api/Zyl.ExSpans.ExMemoryExtensions.Sort.html",
    "title": "Method Sort | ExSpans",
    "summary": "Method Sort Namespace Zyl.ExSpans Assembly ExSpans.dll Sort<T>(ExSpan<T>) Sorts the elements in the entire ExSpan<T> using the IComparable<T> implementation of each element of the ExSpan<T> public static void Sort<T>(this ExSpan<T> span) Parameters span ExSpan<T> The ExSpan<T> to sort. Type Parameters T The type of the elements of the span. Exceptions InvalidOperationException One or more elements in span do not implement the IComparable<T> interface. Sort<T, TComparer>(ExSpan<T>, TComparer) Sorts the elements in the entire ExSpan<T> using the TComparer. public static void Sort<T, TComparer>(this ExSpan<T> span, TComparer comparer) where TComparer : IComparer<T>? Parameters span ExSpan<T> The ExSpan<T> to sort. comparer TComparer The IComparer<T> implementation to use when comparing elements, or null to use the IComparable<T> interface implementation of each element. Type Parameters T The type of the elements of the span. TComparer The type of the comparer to use to compare elements. Exceptions InvalidOperationException comparer is null, and one or more elements in span do not implement the IComparable<T> interface. ArgumentException The implementation of comparer caused an error during the sort. Sort<T>(ExSpan<T>, Comparison<T>) Sorts the elements in the entire ExSpan<T> using the specified Comparison<T>. public static void Sort<T>(this ExSpan<T> span, Comparison<T> comparison) Parameters span ExSpan<T> The ExSpan<T> to sort. comparison Comparison<T> The Comparison<T> to use when comparing elements. Type Parameters T The type of the elements of the span. Exceptions ArgumentNullException comparison is null. Sort<TKey, TValue>(ExSpan<TKey>, ExSpan<TValue>) Sorts a pair of ExSpans (one containing the keys and the other containing the corresponding items) based on the keys in the first ExSpan<T> using the IComparable<T> implementation of each key. public static void Sort<TKey, TValue>(this ExSpan<TKey> keys, ExSpan<TValue> items) Parameters keys ExSpan<TKey> The span that contains the keys to sort. items ExSpan<TValue> The span that contains the items that correspond to the keys in keys. Type Parameters TKey The type of the elements of the key span. TValue The type of the elements of the items span. Exceptions ArgumentException The length of keys isn't equal to the length of items. InvalidOperationException One or more elements in keys do not implement the IComparable<T> interface. Sort<TKey, TValue, TComparer>(ExSpan<TKey>, ExSpan<TValue>, TComparer) Sorts a pair of ExSpans (one containing the keys and the other containing the corresponding items) based on the keys in the first ExSpan<T> using the specified comparer. public static void Sort<TKey, TValue, TComparer>(this ExSpan<TKey> keys, ExSpan<TValue> items, TComparer comparer) where TComparer : IComparer<TKey>? Parameters keys ExSpan<TKey> The span that contains the keys to sort. items ExSpan<TValue> The span that contains the items that correspond to the keys in keys. comparer TComparer The IComparer<T> implementation to use when comparing elements, or null to use the IComparable<T> interface implementation of each element. Type Parameters TKey The type of the elements of the key span. TValue The type of the elements of the items span. TComparer The type of the comparer to use to compare elements. Exceptions ArgumentException The length of keys isn't equal to the length of items. InvalidOperationException comparer is null, and one or more elements in keys do not implement the IComparable<T> interface. Sort<TKey, TValue>(ExSpan<TKey>, ExSpan<TValue>, Comparison<TKey>) Sorts a pair of ExSpans (one containing the keys and the other containing the corresponding items) based on the keys in the first ExSpan<T> using the specified comparison. public static void Sort<TKey, TValue>(this ExSpan<TKey> keys, ExSpan<TValue> items, Comparison<TKey> comparison) Parameters keys ExSpan<TKey> The span that contains the keys to sort. items ExSpan<TValue> The span that contains the items that correspond to the keys in keys. comparison Comparison<TKey> The Comparison<T> to use when comparing elements. Type Parameters TKey The type of the elements of the key span. TValue The type of the elements of the items span. Exceptions ArgumentNullException comparison is null. ArgumentException The length of keys isn't equal to the length of items."
  },
  "api/Zyl.ExSpans.ExMemoryExtensions.StartsWith.html": {
    "href": "api/Zyl.ExSpans.ExMemoryExtensions.StartsWith.html",
    "title": "Method StartsWith | ExSpans",
    "summary": "Method StartsWith Namespace Zyl.ExSpans Assembly ExSpans.dll StartsWith<T>(ExSpan<T>, ReadOnlyExSpan<T>) Determines whether the specified sequence appears at the start of the span. public static bool StartsWith<T>(this ExSpan<T> span, ReadOnlyExSpan<T> value) where T : IEquatable<T>? Parameters span ExSpan<T> value ReadOnlyExSpan<T> Returns bool Type Parameters T StartsWith<T>(ReadOnlyExSpan<T>, ReadOnlyExSpan<T>) Determines whether the specified sequence appears at the start of the span. public static bool StartsWith<T>(this ReadOnlyExSpan<T> span, ReadOnlyExSpan<T> value) where T : IEquatable<T>? Parameters span ReadOnlyExSpan<T> value ReadOnlyExSpan<T> Returns bool Type Parameters T StartsWith<T>(ReadOnlyExSpan<T>, ReadOnlyExSpan<T>, IEqualityComparer<T>?) Determines whether a specified sequence appears at the start of a read-only span. public static bool StartsWith<T>(this ReadOnlyExSpan<T> span, ReadOnlyExSpan<T> value, IEqualityComparer<T>? comparer = null) Parameters span ReadOnlyExSpan<T> The source span. value ReadOnlyExSpan<T> The sequence to compare to the start of span. comparer IEqualityComparer<T> The IEqualityComparer<T> implementation to use when comparing elements, or null to use the default IEqualityComparer<T> for the type of an element. Returns bool Type Parameters T StartsWith<T>(ReadOnlyExSpan<T>, T) Determines whether the specified value appears at the start of the span. public static bool StartsWith<T>(this ReadOnlyExSpan<T> span, T value) where T : IEquatable<T>? Parameters span ReadOnlyExSpan<T> The span to search. value T The value to compare. Returns bool true if value matches the beginning of span; otherwise, false. Type Parameters T The type of elements in the span. StartsWith<T>(ReadOnlyExSpan<T>, T, IEqualityComparer<T>?) Determines whether the specified value appears at the start of the span. public static bool StartsWith<T>(this ReadOnlyExSpan<T> span, T value, IEqualityComparer<T>? comparer = null) Parameters span ReadOnlyExSpan<T> The span to search. value T The value to compare. comparer IEqualityComparer<T> The IEqualityComparer<T> implementation to use when comparing elements, or null to use the default IEqualityComparer<T> for the type of an element. Returns bool true if value matches the beginning of span; otherwise, false. Type Parameters T The type of elements in the span. StartsWith(ReadOnlyExSpan<char>, ReadOnlyExSpan<char>, StringComparison) Determines whether the beginning of the span matches the specified value when compared using the specified comparisonType option. public static bool StartsWith(this ReadOnlyExSpan<char> span, ReadOnlyExSpan<char> value, StringComparison comparisonType) Parameters span ReadOnlyExSpan<char> The source span. value ReadOnlyExSpan<char> The sequence to compare to the beginning of the source span. comparisonType StringComparison One of the enumeration values that determines how the span and value are compared. Returns bool Exceptions ExSpanTooLongException Throws an exception if the length is out of the range of Int32."
  },
  "api/Zyl.ExSpans.ExMemoryExtensions.ToLower.html": {
    "href": "api/Zyl.ExSpans.ExMemoryExtensions.ToLower.html",
    "title": "Method ToLower | ExSpans",
    "summary": "Method ToLower Namespace Zyl.ExSpans Assembly ExSpans.dll ToLower(ReadOnlyExSpan<char>, ExSpan<char>, CultureInfo?) Copies the characters from the source span into the destination, converting each character to lowercase, using the casing rules of the specified culture. public static nint ToLower(this ReadOnlyExSpan<char> source, ExSpan<char> destination, CultureInfo? culture) Parameters source ReadOnlyExSpan<char> The source span. destination ExSpan<char> The destination span which contains the transformed characters. culture CultureInfo An object that supplies culture-specific casing rules. Returns nint The number of characters written into the destination span. If the destination is too small, returns -1. Remarks If culture is null, CurrentCulture will be used. Exceptions InvalidOperationException The source and destination buffers overlap. ExSpanTooLongException Throws an exception if the length is out of the range of Int32."
  },
  "api/Zyl.ExSpans.ExMemoryExtensions.ToLowerInvariant.html": {
    "href": "api/Zyl.ExSpans.ExMemoryExtensions.ToLowerInvariant.html",
    "title": "Method ToLowerInvariant | ExSpans",
    "summary": "Method ToLowerInvariant Namespace Zyl.ExSpans Assembly ExSpans.dll ToLowerInvariant(ReadOnlyExSpan<char>, ExSpan<char>) Copies the characters from the source span into the destination, converting each character to lowercase, using the casing rules of the invariant culture. public static nint ToLowerInvariant(this ReadOnlyExSpan<char> source, ExSpan<char> destination) Parameters source ReadOnlyExSpan<char> The source span. destination ExSpan<char> The destination span which contains the transformed characters. Returns nint The number of characters written into the destination span. If the destination is too small, returns -1. Exceptions InvalidOperationException The source and destination buffers overlap. ExSpanTooLongException Throws an exception if the length is out of the range of Int32."
  },
  "api/Zyl.ExSpans.ExMemoryExtensions.ToUpper.html": {
    "href": "api/Zyl.ExSpans.ExMemoryExtensions.ToUpper.html",
    "title": "Method ToUpper | ExSpans",
    "summary": "Method ToUpper Namespace Zyl.ExSpans Assembly ExSpans.dll ToUpper(ReadOnlyExSpan<char>, ExSpan<char>, CultureInfo?) Copies the characters from the source span into the destination, converting each character to uppercase, using the casing rules of the specified culture. public static nint ToUpper(this ReadOnlyExSpan<char> source, ExSpan<char> destination, CultureInfo? culture) Parameters source ReadOnlyExSpan<char> The source span. destination ExSpan<char> The destination span which contains the transformed characters. culture CultureInfo An object that supplies culture-specific casing rules. Returns nint The number of characters written into the destination span. If the destination is too small, returns -1. Remarks If culture is null, CurrentCulture will be used. Exceptions InvalidOperationException The source and destination buffers overlap. ExSpanTooLongException Throws an exception if the length is out of the range of Int32."
  },
  "api/Zyl.ExSpans.ExMemoryExtensions.ToUpperInvariant.html": {
    "href": "api/Zyl.ExSpans.ExMemoryExtensions.ToUpperInvariant.html",
    "title": "Method ToUpperInvariant | ExSpans",
    "summary": "Method ToUpperInvariant Namespace Zyl.ExSpans Assembly ExSpans.dll ToUpperInvariant(ReadOnlyExSpan<char>, ExSpan<char>) Copies the characters from the source span into the destination, converting each character to uppercase using the casing rules of the invariant culture. public static nint ToUpperInvariant(this ReadOnlyExSpan<char> source, ExSpan<char> destination) Parameters source ReadOnlyExSpan<char> The source span. destination ExSpan<char> The destination span which contains the transformed characters. Returns nint The number of characters written into the destination span. If the destination is too small, returns -1. Exceptions InvalidOperationException The source and destination buffers overlap. ExSpanTooLongException Throws an exception if the length is out of the range of Int32."
  },
  "api/Zyl.ExSpans.ExMemoryExtensions.Trim.html": {
    "href": "api/Zyl.ExSpans.ExMemoryExtensions.Trim.html",
    "title": "Method Trim | ExSpans",
    "summary": "Method Trim Namespace Zyl.ExSpans Assembly ExSpans.dll Trim<T>(ExSpan<T>, T) Removes all leading and trailing occurrences of a specified element from the span. public static ExSpan<T> Trim<T>(this ExSpan<T> span, T trimElement) where T : IEquatable<T>? Parameters span ExSpan<T> The source span from which the element is removed. trimElement T The specified element to look for and remove. Returns ExSpan<T> Type Parameters T Trim<T>(ReadOnlyExSpan<T>, T) Removes all leading and trailing occurrences of a specified element from the span. public static ReadOnlyExSpan<T> Trim<T>(this ReadOnlyExSpan<T> span, T trimElement) where T : IEquatable<T>? Parameters span ReadOnlyExSpan<T> The source span from which the element is removed. trimElement T The specified element to look for and remove. Returns ReadOnlyExSpan<T> Type Parameters T Trim<T>(ExSpan<T>, ReadOnlyExSpan<T>) Removes all leading and trailing occurrences of a set of elements specified in a readonly span from the span. public static ExSpan<T> Trim<T>(this ExSpan<T> span, ReadOnlyExSpan<T> trimElements) where T : IEquatable<T>? Parameters span ExSpan<T> The source span from which the elements are removed. trimElements ReadOnlyExSpan<T> The span which contains the set of elements to remove. Returns ExSpan<T> Type Parameters T Remarks If trimElements is empty, the span is returned unaltered. Trim<T>(ReadOnlyExSpan<T>, ReadOnlyExSpan<T>) Removes all leading and trailing occurrences of a set of elements specified in a readonly span from the span. public static ReadOnlyExSpan<T> Trim<T>(this ReadOnlyExSpan<T> span, ReadOnlyExSpan<T> trimElements) where T : IEquatable<T>? Parameters span ReadOnlyExSpan<T> The source span from which the elements are removed. trimElements ReadOnlyExSpan<T> The span which contains the set of elements to remove. Returns ReadOnlyExSpan<T> Type Parameters T Remarks If trimElements is empty, the span is returned unaltered. Trim(ReadOnlyExSpan<char>) Removes all leading and trailing white-space characters from the span. public static ReadOnlyExSpan<char> Trim(this ReadOnlyExSpan<char> span) Parameters span ReadOnlyExSpan<char> The source span from which the characters are removed. Returns ReadOnlyExSpan<char> Trim(ReadOnlyExSpan<char>, char) Removes all leading and trailing occurrences of a specified character from the span. public static ReadOnlyExSpan<char> Trim(this ReadOnlyExSpan<char> span, char trimChar) Parameters span ReadOnlyExSpan<char> The source span from which the character is removed. trimChar char The specified character to look for and remove. Returns ReadOnlyExSpan<char> Trim(ReadOnlyExSpan<char>, ReadOnlyExSpan<char>) Removes all leading and trailing occurrences of a set of characters specified in a readonly span from the span. public static ReadOnlyExSpan<char> Trim(this ReadOnlyExSpan<char> span, ReadOnlyExSpan<char> trimChars) Parameters span ReadOnlyExSpan<char> The source span from which the characters are removed. trimChars ReadOnlyExSpan<char> The span which contains the set of characters to remove. Returns ReadOnlyExSpan<char> Remarks If trimChars is empty, white-space characters are removed instead. Trim(ExSpan<char>) Removes all leading and trailing white-space characters from the span. public static ExSpan<char> Trim(this ExSpan<char> span) Parameters span ExSpan<char> The source span from which the characters are removed. Returns ExSpan<char>"
  },
  "api/Zyl.ExSpans.ExMemoryExtensions.TrimEnd.html": {
    "href": "api/Zyl.ExSpans.ExMemoryExtensions.TrimEnd.html",
    "title": "Method TrimEnd | ExSpans",
    "summary": "Method TrimEnd Namespace Zyl.ExSpans Assembly ExSpans.dll TrimEnd<T>(ExSpan<T>, T) Removes all trailing occurrences of a specified element from the span. public static ExSpan<T> TrimEnd<T>(this ExSpan<T> span, T trimElement) where T : IEquatable<T>? Parameters span ExSpan<T> The source span from which the element is removed. trimElement T The specified element to look for and remove. Returns ExSpan<T> Type Parameters T TrimEnd<T>(ReadOnlyExSpan<T>, T) Removes all trailing occurrences of a specified element from the span. public static ReadOnlyExSpan<T> TrimEnd<T>(this ReadOnlyExSpan<T> span, T trimElement) where T : IEquatable<T>? Parameters span ReadOnlyExSpan<T> The source span from which the element is removed. trimElement T The specified element to look for and remove. Returns ReadOnlyExSpan<T> Type Parameters T TrimEnd<T>(ExSpan<T>, ReadOnlyExSpan<T>) Removes all trailing occurrences of a set of elements specified in a readonly span from the span. public static ExSpan<T> TrimEnd<T>(this ExSpan<T> span, ReadOnlyExSpan<T> trimElements) where T : IEquatable<T>? Parameters span ExSpan<T> The source span from which the elements are removed. trimElements ReadOnlyExSpan<T> The span which contains the set of elements to remove. Returns ExSpan<T> Type Parameters T Remarks If trimElements is empty, the span is returned unaltered. TrimEnd<T>(ReadOnlyExSpan<T>, ReadOnlyExSpan<T>) Removes all trailing occurrences of a set of elements specified in a readonly span from the span. public static ReadOnlyExSpan<T> TrimEnd<T>(this ReadOnlyExSpan<T> span, ReadOnlyExSpan<T> trimElements) where T : IEquatable<T>? Parameters span ReadOnlyExSpan<T> The source span from which the elements are removed. trimElements ReadOnlyExSpan<T> The span which contains the set of elements to remove. Returns ReadOnlyExSpan<T> Type Parameters T Remarks If trimElements is empty, the span is returned unaltered. TrimEnd(ReadOnlyExSpan<char>) Removes all trailing white-space characters from the span. public static ReadOnlyExSpan<char> TrimEnd(this ReadOnlyExSpan<char> span) Parameters span ReadOnlyExSpan<char> The source span from which the characters are removed. Returns ReadOnlyExSpan<char> TrimEnd(ReadOnlyExSpan<char>, char) Removes all trailing occurrences of a specified character from the span. public static ReadOnlyExSpan<char> TrimEnd(this ReadOnlyExSpan<char> span, char trimChar) Parameters span ReadOnlyExSpan<char> The source span from which the character is removed. trimChar char The specified character to look for and remove. Returns ReadOnlyExSpan<char> TrimEnd(ReadOnlyExSpan<char>, ReadOnlyExSpan<char>) Removes all trailing occurrences of a set of characters specified in a readonly span from the span. public static ReadOnlyExSpan<char> TrimEnd(this ReadOnlyExSpan<char> span, ReadOnlyExSpan<char> trimChars) Parameters span ReadOnlyExSpan<char> The source span from which the characters are removed. trimChars ReadOnlyExSpan<char> The span which contains the set of characters to remove. Returns ReadOnlyExSpan<char> Remarks If trimChars is empty, white-space characters are removed instead. TrimEnd(ExSpan<char>) Removes all trailing white-space characters from the span. public static ExSpan<char> TrimEnd(this ExSpan<char> span) Parameters span ExSpan<char> The source span from which the characters are removed. Returns ExSpan<char>"
  },
  "api/Zyl.ExSpans.ExMemoryExtensions.TrimStart.html": {
    "href": "api/Zyl.ExSpans.ExMemoryExtensions.TrimStart.html",
    "title": "Method TrimStart | ExSpans",
    "summary": "Method TrimStart Namespace Zyl.ExSpans Assembly ExSpans.dll TrimStart<T>(ExSpan<T>, T) Removes all leading occurrences of a specified element from the span. public static ExSpan<T> TrimStart<T>(this ExSpan<T> span, T trimElement) where T : IEquatable<T>? Parameters span ExSpan<T> The source span from which the element is removed. trimElement T The specified element to look for and remove. Returns ExSpan<T> Type Parameters T TrimStart<T>(ReadOnlyExSpan<T>, T) Removes all leading occurrences of a specified element from the span. public static ReadOnlyExSpan<T> TrimStart<T>(this ReadOnlyExSpan<T> span, T trimElement) where T : IEquatable<T>? Parameters span ReadOnlyExSpan<T> The source span from which the element is removed. trimElement T The specified element to look for and remove. Returns ReadOnlyExSpan<T> Type Parameters T TrimStart<T>(ExSpan<T>, ReadOnlyExSpan<T>) Removes all leading occurrences of a set of elements specified in a readonly span from the span. public static ExSpan<T> TrimStart<T>(this ExSpan<T> span, ReadOnlyExSpan<T> trimElements) where T : IEquatable<T>? Parameters span ExSpan<T> The source span from which the elements are removed. trimElements ReadOnlyExSpan<T> The span which contains the set of elements to remove. Returns ExSpan<T> Type Parameters T Remarks If trimElements is empty, the span is returned unaltered. TrimStart<T>(ReadOnlyExSpan<T>, ReadOnlyExSpan<T>) Removes all leading occurrences of a set of elements specified in a readonly span from the span. public static ReadOnlyExSpan<T> TrimStart<T>(this ReadOnlyExSpan<T> span, ReadOnlyExSpan<T> trimElements) where T : IEquatable<T>? Parameters span ReadOnlyExSpan<T> The source span from which the elements are removed. trimElements ReadOnlyExSpan<T> The span which contains the set of elements to remove. Returns ReadOnlyExSpan<T> Type Parameters T Remarks If trimElements is empty, the span is returned unaltered. TrimStart(ReadOnlyExSpan<char>) Removes all leading white-space characters from the span. public static ReadOnlyExSpan<char> TrimStart(this ReadOnlyExSpan<char> span) Parameters span ReadOnlyExSpan<char> The source span from which the characters are removed. Returns ReadOnlyExSpan<char> TrimStart(ReadOnlyExSpan<char>, char) Removes all leading occurrences of a specified character from the span. public static ReadOnlyExSpan<char> TrimStart(this ReadOnlyExSpan<char> span, char trimChar) Parameters span ReadOnlyExSpan<char> The source span from which the character is removed. trimChar char The specified character to look for and remove. Returns ReadOnlyExSpan<char> TrimStart(ReadOnlyExSpan<char>, ReadOnlyExSpan<char>) Removes all leading occurrences of a set of characters specified in a readonly span from the span. public static ReadOnlyExSpan<char> TrimStart(this ReadOnlyExSpan<char> span, ReadOnlyExSpan<char> trimChars) Parameters span ReadOnlyExSpan<char> The source span from which the characters are removed. trimChars ReadOnlyExSpan<char> The span which contains the set of characters to remove. Returns ReadOnlyExSpan<char> Remarks If trimChars is empty, white-space characters are removed instead. TrimStart(ExSpan<char>) Removes all leading white-space characters from the span. public static ExSpan<char> TrimStart(this ExSpan<char> span) Parameters span ExSpan<char> The source span from which the characters are removed. Returns ExSpan<char>"
  },
  "api/Zyl.ExSpans.ExMemoryExtensions.TryCopyTo.html": {
    "href": "api/Zyl.ExSpans.ExMemoryExtensions.TryCopyTo.html",
    "title": "Method TryCopyTo | ExSpans",
    "summary": "Method TryCopyTo Namespace Zyl.ExSpans Assembly ExSpans.dll TryCopyTo(string, ExSpan<char>) Copies the contents of this string into the destination span. public static bool TryCopyTo(this string source, ExSpan<char> destination) Parameters source string The source string. destination ExSpan<char> The span into which to copy this string's contents. Returns bool true if the data was copied; false if the destination was too short to fit the contents of the string."
  },
  "api/Zyl.ExSpans.ExMemoryExtensions.TryWrite.html": {
    "href": "api/Zyl.ExSpans.ExMemoryExtensions.TryWrite.html",
    "title": "Method TryWrite | ExSpans",
    "summary": "Method TryWrite Namespace Zyl.ExSpans Assembly ExSpans.dll TryWrite(ExSpan<char>, ref ExTryWriteInterpolatedStringHandler, out nint) Writes the specified interpolated string to the character span. public static bool TryWrite(this ExSpan<char> destination, ref ExTryWriteInterpolatedStringHandler handler, out nint charsWritten) Parameters destination ExSpan<char> The span to which the interpolated string should be formatted. handler ExTryWriteInterpolatedStringHandler The interpolated string. charsWritten nint The number of characters written to the span. Returns bool true if the entire interpolated string could be formatted successfully; otherwise, false. TryWrite(ExSpan<char>, IFormatProvider?, ref ExTryWriteInterpolatedStringHandler, out nint) Writes the specified interpolated string to the character span. public static bool TryWrite(this ExSpan<char> destination, IFormatProvider? provider, ref ExTryWriteInterpolatedStringHandler handler, out nint charsWritten) Parameters destination ExSpan<char> The span to which the interpolated string should be formatted. provider IFormatProvider An object that supplies culture-specific formatting information. handler ExTryWriteInterpolatedStringHandler The interpolated string. charsWritten nint The number of characters written to the span. Returns bool true if the entire interpolated string could be formatted successfully; otherwise, false. TryWrite<TArg0>(ExSpan<char>, IFormatProvider?, CompositeFormat, out nint, TArg0) Writes the CompositeFormat string to the character span, substituting the format item or items with the string representation of the corresponding arguments. public static bool TryWrite<TArg0>(this ExSpan<char> destination, IFormatProvider? provider, CompositeFormat format, out nint charsWritten, TArg0 arg0) Parameters destination ExSpan<char> The span to which the string should be formatted. provider IFormatProvider An object that supplies culture-specific formatting information. format CompositeFormat A CompositeFormat. charsWritten nint The number of characters written to the span. arg0 TArg0 The first object to format. Returns bool true if the entire interpolated string could be formatted successfully; otherwise, false. Type Parameters TArg0 The type of the first object to format. Exceptions ArgumentNullException format is null. FormatException The index of a format item is greater than or equal to the number of supplied arguments. TryWrite<TArg0, TArg1>(ExSpan<char>, IFormatProvider?, CompositeFormat, out nint, TArg0, TArg1) Writes the CompositeFormat string to the character span, substituting the format item or items with the string representation of the corresponding arguments. public static bool TryWrite<TArg0, TArg1>(this ExSpan<char> destination, IFormatProvider? provider, CompositeFormat format, out nint charsWritten, TArg0 arg0, TArg1 arg1) Parameters destination ExSpan<char> The span to which the string should be formatted. provider IFormatProvider An object that supplies culture-specific formatting information. format CompositeFormat A CompositeFormat. charsWritten nint The number of characters written to the span. arg0 TArg0 The first object to format. arg1 TArg1 The second object to format. Returns bool true if the entire interpolated string could be formatted successfully; otherwise, false. Type Parameters TArg0 The type of the first object to format. TArg1 The type of the second object to format. Exceptions ArgumentNullException format is null. FormatException The index of a format item is greater than or equal to the number of supplied arguments. TryWrite<TArg0, TArg1, TArg2>(ExSpan<char>, IFormatProvider?, CompositeFormat, out nint, TArg0, TArg1, TArg2) Writes the CompositeFormat string to the character span, substituting the format item or items with the string representation of the corresponding arguments. public static bool TryWrite<TArg0, TArg1, TArg2>(this ExSpan<char> destination, IFormatProvider? provider, CompositeFormat format, out nint charsWritten, TArg0 arg0, TArg1 arg1, TArg2 arg2) Parameters destination ExSpan<char> The span to which the string should be formatted. provider IFormatProvider An object that supplies culture-specific formatting information. format CompositeFormat A CompositeFormat. charsWritten nint The number of characters written to the span. arg0 TArg0 The first object to format. arg1 TArg1 The second object to format. arg2 TArg2 The third object to format. Returns bool true if the entire interpolated string could be formatted successfully; otherwise, false. Type Parameters TArg0 The type of the first object to format. TArg1 The type of the second object to format. TArg2 The type of the third object to format. Exceptions ArgumentNullException format is null. FormatException The index of a format item is greater than or equal to the number of supplied arguments. TryWrite(ExSpan<char>, IFormatProvider?, CompositeFormat, out nint, params object?[]) Writes the CompositeFormat string to the character span, substituting the format item or items with the string representation of the corresponding arguments. public static bool TryWrite(this ExSpan<char> destination, IFormatProvider? provider, CompositeFormat format, out nint charsWritten, params object?[] args) Parameters destination ExSpan<char> The span to which the string should be formatted. provider IFormatProvider An object that supplies culture-specific formatting information. format CompositeFormat A CompositeFormat. charsWritten nint The number of characters written to the span. args object[] An array of objects to format. Returns bool true if the entire interpolated string could be formatted successfully; otherwise, false. Exceptions ArgumentNullException format is null. ArgumentNullException args is null. FormatException The index of a format item is greater than or equal to the number of supplied arguments. TryWrite(ExSpan<char>, IFormatProvider?, CompositeFormat, out nint, params ReadOnlySpan<object?>) Writes the CompositeFormat string to the character span, substituting the format item or items with the string representation of the corresponding arguments. public static bool TryWrite(this ExSpan<char> destination, IFormatProvider? provider, CompositeFormat format, out nint charsWritten, params ReadOnlySpan<object?> args) Parameters destination ExSpan<char> The span to which the string should be formatted. provider IFormatProvider An object that supplies culture-specific formatting information. format CompositeFormat A CompositeFormat. charsWritten nint The number of characters written to the span. args ReadOnlySpan<object> A ExSpan of objects to format. Returns bool true if the entire interpolated string could be formatted successfully; otherwise, false. Exceptions ArgumentNullException format is null. FormatException The index of a format item is greater than or equal to the number of supplied arguments."
  },
  "api/Zyl.ExSpans.ExMemoryExtensions.html": {
    "href": "api/Zyl.ExSpans.ExMemoryExtensions.html",
    "title": "Class ExMemoryExtensions | ExSpans",
    "summary": "Class ExMemoryExtensions Namespace Zyl.ExSpans Assembly ExSpans.dll Provides extension methods for the span-related types, such as ExSpan<T> and ReadOnlyExSpan<T>. It can be regarded as the MemoryExtensions of nint index range (提供跨度相关类型的扩展方法，例如 ExSpan<T> 和 ReadOnlyExSpan<T>. 它可以被视为 nint 索引范围的 MemoryExtensions). public static class ExMemoryExtensions Inheritance object ExMemoryExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks Commonly extension methods such as AsExSpan are located in ExSpanExtensions (AsExSpan 等常用扩展方法位于 ExSpanExtensions). Methods BinarySearch<T>(ExSpan<T>, IComparable<T>) Searches an entire sorted ExSpan<T> for a value using the specified IComparable<T> generic interface. BinarySearch<T>(ReadOnlyExSpan<T>, IComparable<T>) Searches an entire sorted ReadOnlyExSpan<T> for a value using the specified IComparable<T> generic interface. BinarySearch<T, TComparer>(ExSpan<T>, T, TComparer) Searches an entire sorted ExSpan<T> for the specified value using the specified TComparer generic type. BinarySearch<T, TComparable>(ExSpan<T>, TComparable) Searches an entire sorted ExSpan<T> for a value using the specified TComparable generic type. BinarySearch<T, TComparer>(ReadOnlyExSpan<T>, T, TComparer) Searches an entire sorted ReadOnlyExSpan<T> for the specified value using the specified TComparer generic type. BinarySearch<T, TComparable>(ReadOnlyExSpan<T>, TComparable) Searches an entire sorted ReadOnlyExSpan<T> for a value using the specified TComparable generic type. CommonPrefixLength<T>(ExSpan<T>, ReadOnlyExSpan<T>) Finds the length of any common prefix shared between span and other. CommonPrefixLength<T>(ExSpan<T>, ReadOnlyExSpan<T>, IEqualityComparer<T>?) Finds the length of any common prefix shared between span and other. CommonPrefixLength<T>(ReadOnlyExSpan<T>, ReadOnlyExSpan<T>) Finds the length of any common prefix shared between span and other. CommonPrefixLength<T>(ReadOnlyExSpan<T>, ReadOnlyExSpan<T>, IEqualityComparer<T>?) Determines the length of any common prefix shared between span and other. CompareTo(ReadOnlyExSpan<char>, ReadOnlyExSpan<char>, StringComparison) Compares the specified span and other using the specified comparisonType, and returns an integer that indicates their relative position in the sort order. Contains(ReadOnlyExSpan<char>, ReadOnlyExSpan<char>, StringComparison) Returns a value indicating whether the specified value occurs within the span. ContainsAnyExceptInRange<T>(ExSpan<T>, T, T) Searches for any value outside of the range between lowInclusive and highInclusive, inclusive. ContainsAnyExceptInRange<T>(ReadOnlyExSpan<T>, T, T) Searches for any value outside of the range between lowInclusive and highInclusive, inclusive. ContainsAnyExcept<T>(ExSpan<T>, ReadOnlyExSpan<T>) Searches for any value other than the specified values. ContainsAnyExcept<T>(ExSpan<T>, T) Searches for any value other than the specified value. ContainsAnyExcept<T>(ExSpan<T>, T, T) Searches for any value other than the specified value0 or value1. ContainsAnyExcept<T>(ExSpan<T>, T, T, T) Searches for any value other than the specified value0, value1, or value2. ContainsAnyExcept<T>(ReadOnlyExSpan<T>, ReadOnlyExSpan<T>) Searches for any value other than the specified values. ContainsAnyExcept<T>(ReadOnlyExSpan<T>, ReadOnlyExSpan<T>, IEqualityComparer<T>?) Searches for any value other than the specified values. ContainsAnyExcept<T>(ReadOnlyExSpan<T>, T) Searches for any value other than the specified value. ContainsAnyExcept<T>(ReadOnlyExSpan<T>, T, IEqualityComparer<T>?) Searches for any value other than the specified value. ContainsAnyExcept<T>(ReadOnlyExSpan<T>, T, T) Searches for any value other than the specified value0 or value1. ContainsAnyExcept<T>(ReadOnlyExSpan<T>, T, T, IEqualityComparer<T>?) Searches for any value other than the specified value0 or value1. ContainsAnyExcept<T>(ReadOnlyExSpan<T>, T, T, T) Searches for any value other than the specified value0, value1, or value2. ContainsAnyExcept<T>(ReadOnlyExSpan<T>, T, T, T, IEqualityComparer<T>?) Searches for any value other than the specified value0, value1, or value2. ContainsAnyInRange<T>(ExSpan<T>, T, T) Searches for any value in the range between lowInclusive and highInclusive, inclusive, and returns true if found. If not found, returns false. ContainsAnyInRange<T>(ReadOnlyExSpan<T>, T, T) Searches for any value in the range between lowInclusive and highInclusive, inclusive, and returns true if found. If not found, returns false. ContainsAny<T>(ExSpan<T>, ReadOnlyExSpan<T>) Searches for any occurrence of any of the specified values and returns true if found. If not found, returns false. ContainsAny<T>(ExSpan<T>, T, T) Searches for any occurrence of the specified value0 or value1, and returns true if found. If not found, returns false. ContainsAny<T>(ExSpan<T>, T, T, T) Searches for any occurrence of the specified value0, value1, or value2, and returns true if found. If not found, returns false. ContainsAny<T>(ReadOnlyExSpan<T>, ReadOnlyExSpan<T>) Searches for any occurrence of any of the specified values and returns true if found. If not found, returns false. ContainsAny<T>(ReadOnlyExSpan<T>, ReadOnlyExSpan<T>, IEqualityComparer<T>?) Searches for any occurrence of any of the specified values and returns true if found. If not found, returns false. ContainsAny<T>(ReadOnlyExSpan<T>, T, T) Searches for any occurrence of the specified value0 or value1, and returns true if found. If not found, returns false. ContainsAny<T>(ReadOnlyExSpan<T>, T, T, IEqualityComparer<T>?) Searches for any occurrence of the specified value0 or value1, and returns true if found. If not found, returns false. ContainsAny<T>(ReadOnlyExSpan<T>, T, T, T) Searches for any occurrence of the specified value0, value1, or value2, and returns true if found. If not found, returns false. ContainsAny<T>(ReadOnlyExSpan<T>, T, T, T, IEqualityComparer<T>?) Searches for any occurrence of the specified value0, value1, or value2, and returns true if found. If not found, returns false. Contains<T>(ExSpan<T>, T) Searches for the specified value and returns true if found. If not found, returns false. Values are compared using IEquatable{T}.Equals(T). Contains<T>(ReadOnlyExSpan<T>, T) Searches for the specified value and returns true if found. If not found, returns false. Values are compared using IEquatable{T}.Equals(T). Contains<T>(ReadOnlyExSpan<T>, T, IEqualityComparer<T>?) Searches for the specified value and returns true if found. If not found, returns false. CountAny<T>(ReadOnlyExSpan<T>, ReadOnlyExSpan<T>) Counts the number of times any of the specified values occurs in the span. CountAny<T>(ReadOnlyExSpan<T>, ReadOnlyExSpan<T>, IEqualityComparer<T>?) Counts the number of times any of the specified values occurs in the span. Count<T>(ExSpan<T>, ReadOnlyExSpan<T>) Counts the number of times the specified value occurs in the span. Count<T>(ExSpan<T>, T) Counts the number of times the specified value occurs in the span. Count<T>(ReadOnlyExSpan<T>, ReadOnlyExSpan<T>) Counts the number of times the specified value occurs in the span. Count<T>(ReadOnlyExSpan<T>, ReadOnlyExSpan<T>, IEqualityComparer<T>?) Counts the number of times the specified value occurs in the span. Count<T>(ReadOnlyExSpan<T>, T) Counts the number of times the specified value occurs in the span. Count<T>(ReadOnlyExSpan<T>, T, IEqualityComparer<T>?) Counts the number of times the specified value occurs in the span. EndsWith(ReadOnlyExSpan<char>, ReadOnlyExSpan<char>, StringComparison) Determines whether the end of the span matches the specified value when compared using the specified comparisonType option. EndsWith<T>(ExSpan<T>, ReadOnlyExSpan<T>) Determines whether the specified sequence appears at the end of the span. EndsWith<T>(ReadOnlyExSpan<T>, ReadOnlyExSpan<T>) Determines whether the specified sequence appears at the end of the span. EndsWith<T>(ReadOnlyExSpan<T>, ReadOnlyExSpan<T>, IEqualityComparer<T>?) Determines whether the specified sequence appears at the end of the read-only span. EndsWith<T>(ReadOnlyExSpan<T>, T) Determines whether the specified value appears at the end of the span. EndsWith<T>(ReadOnlyExSpan<T>, T, IEqualityComparer<T>?) Determines whether the specified value appears at the end of the span. EnumerateLines(ExSpan<char>) Returns an enumeration of lines over the provided span. EnumerateLines(ReadOnlyExSpan<char>) Returns an enumeration of lines over the provided span. EnumerateRunes(ExSpan<char>) Returns an enumeration of Rune from the provided span. EnumerateRunes(ReadOnlyExSpan<char>) Returns an enumeration of Rune from the provided span. Equals(ReadOnlyExSpan<char>, ReadOnlyExSpan<char>, StringComparison) Determines whether this span and the specified other span have the same characters when compared using the specified comparisonType option. Fill<T>(ExSpan<T>, T) Fills the contents of this span with the given value (用指定的值填充此跨度的内容). IndexOf(ReadOnlyExSpan<char>, ReadOnlyExSpan<char>, StringComparison) Reports the zero-based index of the first occurrence of the specified value in the current span. IndexOfAnyExceptInRange<T>(ExSpan<T>, T, T) Searches for the first index of any value outside of the range between lowInclusive and highInclusive, inclusive. IndexOfAnyExceptInRange<T>(ReadOnlyExSpan<T>, T, T) Searches for the first index of any value outside of the range between lowInclusive and highInclusive, inclusive. IndexOfAnyExcept<T>(ExSpan<T>, ReadOnlyExSpan<T>) Searches for the first index of any value other than the specified values. IndexOfAnyExcept<T>(ExSpan<T>, T) Searches for the first index of any value other than the specified value. IndexOfAnyExcept<T>(ExSpan<T>, T, T) Searches for the first index of any value other than the specified value0 or value1. IndexOfAnyExcept<T>(ExSpan<T>, T, T, T) Searches for the first index of any value other than the specified value0, value1, or value2. IndexOfAnyExcept<T>(ReadOnlyExSpan<T>, ReadOnlyExSpan<T>) Searches for the first index of any value other than the specified values. IndexOfAnyExcept<T>(ReadOnlyExSpan<T>, ReadOnlyExSpan<T>, IEqualityComparer<T>?) Searches for the first index of any value other than the specified values. IndexOfAnyExcept<T>(ReadOnlyExSpan<T>, T) Searches for the first index of any value other than the specified value. IndexOfAnyExcept<T>(ReadOnlyExSpan<T>, T, IEqualityComparer<T>?) Searches for the first index of any value other than the specified value. IndexOfAnyExcept<T>(ReadOnlyExSpan<T>, T, T) Searches for the first index of any value other than the specified value0 or value1. IndexOfAnyExcept<T>(ReadOnlyExSpan<T>, T, T, IEqualityComparer<T>?) Searches for the first index of any value other than the specified value0 or value1. IndexOfAnyExcept<T>(ReadOnlyExSpan<T>, T, T, T) Searches for the first index of any value other than the specified value0, value1, or value2. IndexOfAnyExcept<T>(ReadOnlyExSpan<T>, T, T, T, IEqualityComparer<T>?) Searches for the first index of any value other than the specified value0, value1, or value2. IndexOfAnyInRange<T>(ExSpan<T>, T, T) Searches for the first index of any value in the range between lowInclusive and highInclusive, inclusive. IndexOfAnyInRange<T>(ReadOnlyExSpan<T>, T, T) Searches for the first index of any value in the range between lowInclusive and highInclusive, inclusive. IndexOfAny<T>(ExSpan<T>, ReadOnlyExSpan<T>) Searches for the first index of any of the specified values similar to calling IndexOf several times with the logical OR operator. If not found, returns -1. IndexOfAny<T>(ExSpan<T>, T, T) Searches for the first index of any of the specified values similar to calling IndexOf several times with the logical OR operator. If not found, returns -1. IndexOfAny<T>(ExSpan<T>, T, T, T) Searches for the first index of any of the specified values similar to calling IndexOf several times with the logical OR operator. If not found, returns -1. IndexOfAny<T>(ReadOnlyExSpan<T>, ReadOnlyExSpan<T>) Searches for the first index of any of the specified values similar to calling IndexOf several times with the logical OR operator. If not found, returns -1. IndexOfAny<T>(ReadOnlyExSpan<T>, ReadOnlyExSpan<T>, IEqualityComparer<T>?) Searches for the first index of any of the specified values similar to calling IndexOf several times with the logical OR operator. If not found, returns -1. IndexOfAny<T>(ReadOnlyExSpan<T>, T, T) Searches for the first index of any of the specified values similar to calling IndexOf several times with the logical OR operator. If not found, returns -1. IndexOfAny<T>(ReadOnlyExSpan<T>, T, T, IEqualityComparer<T>?) Searches for the first index of any of the specified values similar to calling IndexOf several times with the logical OR operator. If not found, returns -1. IndexOfAny<T>(ReadOnlyExSpan<T>, T, T, T) Searches for the first index of any of the specified values similar to calling IndexOf several times with the logical OR operator. If not found, returns -1. IndexOfAny<T>(ReadOnlyExSpan<T>, T, T, T, IEqualityComparer<T>?) Searches for the first index of any of the specified values similar to calling IndexOf several times with the logical OR operator. If not found, returns -1. IndexOf<T>(ExSpan<T>, ReadOnlyExSpan<T>) Searches for the specified sequence and returns the index of its first occurrence. If not found, returns -1. Values are compared using IEquatable{T}.Equals(T). IndexOf<T>(ExSpan<T>, T) Searches for the specified value and returns the index of its first occurrence. If not found, returns -1. Values are compared using IEquatable{T}.Equals(T). IndexOf<T>(ReadOnlyExSpan<T>, ReadOnlyExSpan<T>) Searches for the specified sequence and returns the index of its first occurrence. If not found, returns -1. Values are compared using IEquatable{T}.Equals(T). IndexOf<T>(ReadOnlyExSpan<T>, ReadOnlyExSpan<T>, IEqualityComparer<T>?) Searches for the specified sequence and returns the index of its first occurrence. If not found, returns -1. Values are compared using IEquatable{T}.Equals(T). IndexOf<T>(ReadOnlyExSpan<T>, T) Searches for the specified value and returns the index of its first occurrence. If not found, returns -1. Values are compared using IEquatable{T}.Equals(T). IndexOf<T>(ReadOnlyExSpan<T>, T, IEqualityComparer<T>?) Searches for the specified value and returns the index of its first occurrence. If not found, returns -1. Values are compared using IEquatable{T}.Equals(T). IsWhiteSpace(ReadOnlyExSpan<char>) Indicates whether the specified span contains only white-space characters. LastIndexOf(ReadOnlyExSpan<char>, ReadOnlyExSpan<char>, StringComparison) Reports the zero-based index of the last occurrence of the specified value in the current span. LastIndexOfAnyExceptInRange<T>(ExSpan<T>, T, T) Searches for the last index of any value outside of the range between lowInclusive and highInclusive, inclusive. LastIndexOfAnyExceptInRange<T>(ReadOnlyExSpan<T>, T, T) Searches for the last index of any value outside of the range between lowInclusive and highInclusive, inclusive. LastIndexOfAnyExcept<T>(ExSpan<T>, ReadOnlyExSpan<T>) Searches for the last index of any value other than the specified values. LastIndexOfAnyExcept<T>(ExSpan<T>, T) Searches for the last index of any value other than the specified value. LastIndexOfAnyExcept<T>(ExSpan<T>, T, T) Searches for the last index of any value other than the specified value0 or value1. LastIndexOfAnyExcept<T>(ExSpan<T>, T, T, T) Searches for the last index of any value other than the specified value0, value1, or value2. LastIndexOfAnyExcept<T>(ReadOnlyExSpan<T>, ReadOnlyExSpan<T>) Searches for the last index of any value other than the specified values. LastIndexOfAnyExcept<T>(ReadOnlyExSpan<T>, ReadOnlyExSpan<T>, IEqualityComparer<T>?) Searches for the last index of any value other than the specified values. LastIndexOfAnyExcept<T>(ReadOnlyExSpan<T>, T) Searches for the last index of any value other than the specified value. LastIndexOfAnyExcept<T>(ReadOnlyExSpan<T>, T, IEqualityComparer<T>?) Searches for the last index of any value other than the specified value. LastIndexOfAnyExcept<T>(ReadOnlyExSpan<T>, T, T) Searches for the last index of any value other than the specified value0 or value1. LastIndexOfAnyExcept<T>(ReadOnlyExSpan<T>, T, T, IEqualityComparer<T>?) Searches for the last index of any value other than the specified value0 or value1. LastIndexOfAnyExcept<T>(ReadOnlyExSpan<T>, T, T, T) Searches for the last index of any value other than the specified value0, value1, or value2. LastIndexOfAnyExcept<T>(ReadOnlyExSpan<T>, T, T, T, IEqualityComparer<T>?) Searches for the last index of any value other than the specified value0, value1, or value2. LastIndexOfAnyInRange<T>(ExSpan<T>, T, T) Searches for the last index of any value in the range between lowInclusive and highInclusive, inclusive. LastIndexOfAnyInRange<T>(ReadOnlyExSpan<T>, T, T) Searches for the last index of any value in the range between lowInclusive and highInclusive, inclusive. LastIndexOfAny<T>(ExSpan<T>, ReadOnlyExSpan<T>) Searches for the last index of any of the specified values similar to calling LastIndexOf several times with the logical OR operator. If not found, returns -1. LastIndexOfAny<T>(ExSpan<T>, T, T) Searches for the last index of any of the specified values similar to calling LastIndexOf several times with the logical OR operator. If not found, returns -1. LastIndexOfAny<T>(ExSpan<T>, T, T, T) Searches for the last index of any of the specified values similar to calling LastIndexOf several times with the logical OR operator. If not found, returns -1. LastIndexOfAny<T>(ReadOnlyExSpan<T>, ReadOnlyExSpan<T>) Searches for the last index of any of the specified values similar to calling LastIndexOf several times with the logical OR operator. If not found, returns -1. LastIndexOfAny<T>(ReadOnlyExSpan<T>, ReadOnlyExSpan<T>, IEqualityComparer<T>?) Searches for the last index of any of the specified values similar to calling LastIndexOf several times with the logical OR operator. If not found, returns -1. LastIndexOfAny<T>(ReadOnlyExSpan<T>, T, T) Searches for the last index of any of the specified values similar to calling LastIndexOf several times with the logical OR operator. If not found, returns -1. LastIndexOfAny<T>(ReadOnlyExSpan<T>, T, T, IEqualityComparer<T>?) Searches for the last index of any of the specified values similar to calling LastIndexOf several times with the logical OR operator. If not found, returns -1. LastIndexOfAny<T>(ReadOnlyExSpan<T>, T, T, T) Searches for the last index of any of the specified values similar to calling LastIndexOf several times with the logical OR operator. If not found, returns -1. LastIndexOfAny<T>(ReadOnlyExSpan<T>, T, T, T, IEqualityComparer<T>?) Searches for the last index of any of the specified values similar to calling LastIndexOf several times with the logical OR operator. If not found, returns -1. LastIndexOf<T>(ExSpan<T>, ReadOnlyExSpan<T>) Searches for the specified sequence and returns the index of its last occurrence. If not found, returns -1. Values are compared using IEquatable{T}.Equals(T). LastIndexOf<T>(ExSpan<T>, T) Searches for the specified value and returns the index of its last occurrence. If not found, returns -1. Values are compared using IEquatable{T}.Equals(T). LastIndexOf<T>(ReadOnlyExSpan<T>, ReadOnlyExSpan<T>) Searches for the specified sequence and returns the index of its last occurrence. If not found, returns -1. Values are compared using IEquatable{T}.Equals(T). LastIndexOf<T>(ReadOnlyExSpan<T>, ReadOnlyExSpan<T>, IEqualityComparer<T>?) Searches for the specified sequence and returns the index of its last occurrence. If not found, returns -1. Values are compared using IEquatable{T}.Equals(T). LastIndexOf<T>(ReadOnlyExSpan<T>, T) Searches for the specified value and returns the index of its last occurrence. If not found, returns -1. Values are compared using IEquatable{T}.Equals(T). LastIndexOf<T>(ReadOnlyExSpan<T>, T, IEqualityComparer<T>?) Searches for the specified value and returns the index of its last occurrence. If not found, returns -1. Values are compared using IEquatable{T}.Equals(T). Overlaps<T>(ExSpan<T>, ReadOnlyExSpan<T>) Determines whether two sequences overlap in memory. Overlaps<T>(ExSpan<T>, ReadOnlyExSpan<T>, out int) Determines whether two sequences overlap in memory and outputs the element offset. Overlaps<T>(ReadOnlyExSpan<T>, ReadOnlyExSpan<T>) Determines whether two sequences overlap in memory. Overlaps<T>(ReadOnlyExSpan<T>, ReadOnlyExSpan<T>, out int) Determines whether two sequences overlap in memory and outputs the element offset. Replace<T>(ExSpan<T>, T, T) Replaces all occurrences of oldValue with newValue. Replace<T>(ExSpan<T>, T, T, IEqualityComparer<T>?) Replaces all occurrences of oldValue with newValue. Replace<T>(ReadOnlyExSpan<T>, ExSpan<T>, T, T) Copies source to destination, replacing all occurrences of oldValue with newValue. Replace<T>(ReadOnlyExSpan<T>, ExSpan<T>, T, T, IEqualityComparer<T>?) Copies source to destination, replacing all occurrences of oldValue with newValue. Reverse<T>(ExSpan<T>) Reverses the sequence of the elements in the entire span. SequenceCompareTo<T>(ExSpan<T>, ReadOnlyExSpan<T>) Determines the relative order of the sequences being compared by comparing the elements using IComparable{T}.CompareTo(T). SequenceCompareTo<T>(ExSpan<T>, ReadOnlyExSpan<T>, IComparer<T>?) Determines the relative order of the sequences being compared by comparing the elements using IComparable{T}.CompareTo(T). SequenceCompareTo<T>(ReadOnlyExSpan<T>, ReadOnlyExSpan<T>) Determines the relative order of the sequences being compared by comparing the elements using IComparable{T}.CompareTo(T). SequenceCompareTo<T>(ReadOnlyExSpan<T>, ReadOnlyExSpan<T>, IComparer<T>?) Determines the relative order of the sequences being compared by comparing the elements using IComparable{T}.CompareTo(T). SequenceEqual<T>(ExSpan<T>, ReadOnlyExSpan<T>) Determines whether a span and a read-only span are equal by comparing the elements using Equals(T) (通过使用 Equals(T) 比较元素, 确定跨度和只读跨度是否相等). SequenceEqual<T>(ExSpan<T>, ReadOnlyExSpan<T>, IEqualityComparer<T>?) Determines whether a span and a read-only span are equal by comparing the elements using Equals(T) (通过使用 Equals(T) 比较元素, 确定跨度和只读跨度是否相等). SequenceEqual<T>(ReadOnlyExSpan<T>, ReadOnlyExSpan<T>) Determines whether two read-only sequences are equal by comparing the elements using Equals(T) (通过使用 Equals(T) 比较元素, 确定两个只读序列是否相等). SequenceEqual<T>(ReadOnlyExSpan<T>, ReadOnlyExSpan<T>, IEqualityComparer<T>?) Determines whether two read-only sequences are equal by comparing the elements using Equals(T) (通过使用 Equals(T) 比较元素, 确定两个只读序列是否相等). Sort<T>(ExSpan<T>) Sorts the elements in the entire ExSpan<T> using the IComparable<T> implementation of each element of the ExSpan<T> Sort<T>(ExSpan<T>, Comparison<T>) Sorts the elements in the entire ExSpan<T> using the specified Comparison<T>. Sort<TKey, TValue>(ExSpan<TKey>, ExSpan<TValue>) Sorts a pair of ExSpans (one containing the keys and the other containing the corresponding items) based on the keys in the first ExSpan<T> using the IComparable<T> implementation of each key. Sort<TKey, TValue>(ExSpan<TKey>, ExSpan<TValue>, Comparison<TKey>) Sorts a pair of ExSpans (one containing the keys and the other containing the corresponding items) based on the keys in the first ExSpan<T> using the specified comparison. Sort<T, TComparer>(ExSpan<T>, TComparer) Sorts the elements in the entire ExSpan<T> using the TComparer. Sort<TKey, TValue, TComparer>(ExSpan<TKey>, ExSpan<TValue>, TComparer) Sorts a pair of ExSpans (one containing the keys and the other containing the corresponding items) based on the keys in the first ExSpan<T> using the specified comparer. StartsWith(ReadOnlyExSpan<char>, ReadOnlyExSpan<char>, StringComparison) Determines whether the beginning of the span matches the specified value when compared using the specified comparisonType option. StartsWith<T>(ExSpan<T>, ReadOnlyExSpan<T>) Determines whether the specified sequence appears at the start of the span. StartsWith<T>(ReadOnlyExSpan<T>, ReadOnlyExSpan<T>) Determines whether the specified sequence appears at the start of the span. StartsWith<T>(ReadOnlyExSpan<T>, ReadOnlyExSpan<T>, IEqualityComparer<T>?) Determines whether a specified sequence appears at the start of a read-only span. StartsWith<T>(ReadOnlyExSpan<T>, T) Determines whether the specified value appears at the start of the span. StartsWith<T>(ReadOnlyExSpan<T>, T, IEqualityComparer<T>?) Determines whether the specified value appears at the start of the span. ToLower(ReadOnlyExSpan<char>, ExSpan<char>, CultureInfo?) Copies the characters from the source span into the destination, converting each character to lowercase, using the casing rules of the specified culture. ToLowerInvariant(ReadOnlyExSpan<char>, ExSpan<char>) Copies the characters from the source span into the destination, converting each character to lowercase, using the casing rules of the invariant culture. ToUpper(ReadOnlyExSpan<char>, ExSpan<char>, CultureInfo?) Copies the characters from the source span into the destination, converting each character to uppercase, using the casing rules of the specified culture. ToUpperInvariant(ReadOnlyExSpan<char>, ExSpan<char>) Copies the characters from the source span into the destination, converting each character to uppercase using the casing rules of the invariant culture. Trim(ExSpan<char>) Removes all leading and trailing white-space characters from the span. Trim(ReadOnlyExSpan<char>) Removes all leading and trailing white-space characters from the span. Trim(ReadOnlyExSpan<char>, char) Removes all leading and trailing occurrences of a specified character from the span. Trim(ReadOnlyExSpan<char>, ReadOnlyExSpan<char>) Removes all leading and trailing occurrences of a set of characters specified in a readonly span from the span. TrimEnd(ExSpan<char>) Removes all trailing white-space characters from the span. TrimEnd(ReadOnlyExSpan<char>) Removes all trailing white-space characters from the span. TrimEnd(ReadOnlyExSpan<char>, char) Removes all trailing occurrences of a specified character from the span. TrimEnd(ReadOnlyExSpan<char>, ReadOnlyExSpan<char>) Removes all trailing occurrences of a set of characters specified in a readonly span from the span. TrimEnd<T>(ExSpan<T>, ReadOnlyExSpan<T>) Removes all trailing occurrences of a set of elements specified in a readonly span from the span. TrimEnd<T>(ExSpan<T>, T) Removes all trailing occurrences of a specified element from the span. TrimEnd<T>(ReadOnlyExSpan<T>, ReadOnlyExSpan<T>) Removes all trailing occurrences of a set of elements specified in a readonly span from the span. TrimEnd<T>(ReadOnlyExSpan<T>, T) Removes all trailing occurrences of a specified element from the span. TrimStart(ExSpan<char>) Removes all leading white-space characters from the span. TrimStart(ReadOnlyExSpan<char>) Removes all leading white-space characters from the span. TrimStart(ReadOnlyExSpan<char>, char) Removes all leading occurrences of a specified character from the span. TrimStart(ReadOnlyExSpan<char>, ReadOnlyExSpan<char>) Removes all leading occurrences of a set of characters specified in a readonly span from the span. TrimStart<T>(ExSpan<T>, ReadOnlyExSpan<T>) Removes all leading occurrences of a set of elements specified in a readonly span from the span. TrimStart<T>(ExSpan<T>, T) Removes all leading occurrences of a specified element from the span. TrimStart<T>(ReadOnlyExSpan<T>, ReadOnlyExSpan<T>) Removes all leading occurrences of a set of elements specified in a readonly span from the span. TrimStart<T>(ReadOnlyExSpan<T>, T) Removes all leading occurrences of a specified element from the span. Trim<T>(ExSpan<T>, ReadOnlyExSpan<T>) Removes all leading and trailing occurrences of a set of elements specified in a readonly span from the span. Trim<T>(ExSpan<T>, T) Removes all leading and trailing occurrences of a specified element from the span. Trim<T>(ReadOnlyExSpan<T>, ReadOnlyExSpan<T>) Removes all leading and trailing occurrences of a set of elements specified in a readonly span from the span. Trim<T>(ReadOnlyExSpan<T>, T) Removes all leading and trailing occurrences of a specified element from the span. TryCopyTo(string, ExSpan<char>) Copies the contents of this string into the destination span. TryWrite(ExSpan<char>, IFormatProvider?, CompositeFormat, out nint, params object?[]) Writes the CompositeFormat string to the character span, substituting the format item or items with the string representation of the corresponding arguments. TryWrite(ExSpan<char>, IFormatProvider?, CompositeFormat, out nint, params ReadOnlySpan<object?>) Writes the CompositeFormat string to the character span, substituting the format item or items with the string representation of the corresponding arguments. TryWrite(ExSpan<char>, IFormatProvider?, ref ExTryWriteInterpolatedStringHandler, out nint) Writes the specified interpolated string to the character span. TryWrite(ExSpan<char>, ref ExTryWriteInterpolatedStringHandler, out nint) Writes the specified interpolated string to the character span. TryWrite<TArg0>(ExSpan<char>, IFormatProvider?, CompositeFormat, out nint, TArg0) Writes the CompositeFormat string to the character span, substituting the format item or items with the string representation of the corresponding arguments. TryWrite<TArg0, TArg1>(ExSpan<char>, IFormatProvider?, CompositeFormat, out nint, TArg0, TArg1) Writes the CompositeFormat string to the character span, substituting the format item or items with the string representation of the corresponding arguments. TryWrite<TArg0, TArg1, TArg2>(ExSpan<char>, IFormatProvider?, CompositeFormat, out nint, TArg0, TArg1, TArg2) Writes the CompositeFormat string to the character span, substituting the format item or items with the string representation of the corresponding arguments."
  },
  "api/Zyl.ExSpans.ExMemoryMarshal.ArrayMaxLengthSafe.html": {
    "href": "api/Zyl.ExSpans.ExMemoryMarshal.ArrayMaxLengthSafe.html",
    "title": "Field ArrayMaxLengthSafe | ExSpans",
    "summary": "Field ArrayMaxLengthSafe Namespace Zyl.ExSpans Assembly ExSpans.Core.dll The safe maximum length of array (安全的数组最大长度). public static readonly int ArrayMaxLengthSafe Returns int The safe maximum length of array (安全的数组最大长度)."
  },
  "api/Zyl.ExSpans.ExMemoryMarshal.AsBytes.html": {
    "href": "api/Zyl.ExSpans.ExMemoryMarshal.AsBytes.html",
    "title": "Method AsBytes | ExSpans",
    "summary": "Method AsBytes Namespace Zyl.ExSpans Assembly ExSpans.Core.dll AsBytes<T>(ExSpan<T>) Casts a ExSpan of one primitive type T to ExSpan of bytes. That type may not contain pointers or references. This is checked at runtime in order to preserve type safety (将一个基元类型T的ExSpan 转换为字节的ExSpan. 该类型不能包含指针或引用. 它会在运行时检查这一点, 以保护类型安全). public static ExSpan<byte> AsBytes<T>(ExSpan<T> span) where T : struct Parameters span ExSpan<T> The source slice, of type T (T 类型的源切片). Returns ExSpan<byte> A ExSpan of type byte (byte 类型的 ExSpan). Type Parameters T The element type (元素的类型). Exceptions ArgumentException Thrown when T contains pointers. OverflowException Thrown if the Length property of the new ExSpan would exceed MaxValue. AsBytes<T>(ReadOnlyExSpan<T>) Casts a ReadOnlyExSpan of one primitive type T to ReadOnlyExSpan of bytes. That type may not contain pointers or references. This is checked at runtime in order to preserve type safety. (将一个基元类型T的ExSpan 转换为字节的ReadOnlyExSpan. 该类型不能包含指针或引用. 它会在运行时检查这一点, 以保护类型安全). public static ReadOnlyExSpan<byte> AsBytes<T>(ReadOnlyExSpan<T> span) where T : struct Parameters span ReadOnlyExSpan<T> The source slice, of type T (T 类型的源切片). Returns ReadOnlyExSpan<byte> A ReadOnlyExSpan of type byte (byte 类型的 ReadOnlyExSpan). Type Parameters T The element type (元素的类型). Exceptions ArgumentException Thrown when T contains pointers. OverflowException Thrown if the Length property of the new ExSpan would exceed MaxValue."
  },
  "api/Zyl.ExSpans.ExMemoryMarshal.AsRef.html": {
    "href": "api/Zyl.ExSpans.ExMemoryMarshal.AsRef.html",
    "title": "Method AsRef | ExSpans",
    "summary": "Method AsRef Namespace Zyl.ExSpans Assembly ExSpans.Core.dll AsRef<T>(ExSpan<byte>) Re-interprets a span of bytes as a reference to structure of type T. The type may not contain pointers or references. This is checked at runtime in order to preserve type safety. (将字节跨度重新解释为对 T 类型结构体的引用. 该类型不能包含指针或引用. 它会在运行时检查这一点, 以保护类型安全). public static ref T AsRef<T>(ExSpan<byte> span) where T : struct Parameters span ExSpan<byte> The source span (源跨度). Returns T The reference to the structure of type T (对 T 类型结构的引用). Type Parameters T The element type (元素的类型). Remarks Supported only for platforms that support misaligned memory access or when the memory block is aligned by other means (仅当支持未对齐内存访问的平台或内存块通过其他方式对齐时, 才支持此方法). Exceptions ArgumentException T contains managed object references. AsRef<T>(ReadOnlyExSpan<byte>) Re-interprets a read-only span of bytes as a reference to structure of type T. The type may not contain pointers or references. This is checked at runtime in order to preserve type safety. (将字节只读跨度重新解释为对 T 类型结构体的引用. 该类型不能包含指针或引用. 它会在运行时检查这一点, 以保护类型安全). public static ref readonly T AsRef<T>(ReadOnlyExSpan<byte> span) where T : struct Parameters span ReadOnlyExSpan<byte> The source span (源跨度). Returns T The reference to the structure of type T (对 T 类型结构的引用). Type Parameters T The element type (元素的类型). Remarks Supported only for platforms that support misaligned memory access or when the memory block is aligned by other means (仅当支持未对齐内存访问的平台或内存块通过其他方式对齐时, 才支持此方法). Exceptions ArgumentException T contains managed object references."
  },
  "api/Zyl.ExSpans.ExMemoryMarshal.Cast.html": {
    "href": "api/Zyl.ExSpans.ExMemoryMarshal.Cast.html",
    "title": "Method Cast | ExSpans",
    "summary": "Method Cast Namespace Zyl.ExSpans Assembly ExSpans.Core.dll Cast<TFrom, TTo>(ExSpan<TFrom>) Casts a ExSpan of one primitive type TFrom to another primitive type TTo. These types may not contain pointers or references. This is checked at runtime in order to preserve type safety. (将一种基元类型 TFrom的ExSpan 转换为另一种基元类型 TTo. 该类型不能包含指针或引用。它会在运行时检查这一点，以保护类型安全). public static ExSpan<TTo> Cast<TFrom, TTo>(ExSpan<TFrom> span) where TFrom : struct where TTo : struct Parameters span ExSpan<TFrom> The source slice, of type TFrom (TFrom 类型的源切片). Returns ExSpan<TTo> The converted span (转换后的跨度). Type Parameters TFrom The element type of the source span (源跨度的元素类型). TTo The element type of the target span (目标跨度的元素类型). Remarks Supported only for platforms that support misaligned memory access or when the memory block is aligned by other means (仅当支持未对齐内存访问的平台或内存块通过其他方式对齐时, 才支持此方法). Exceptions ArgumentException Thrown when TFrom or TTo contains pointers. Cast<TFrom, TTo>(ReadOnlyExSpan<TFrom>) Casts a ReadOnlyExSpan of one primitive type TFrom to another primitive type TTo. These types may not contain pointers or references. This is checked at runtime in order to preserve type safety. (将一种基元类型TFrom的 ReadOnlyExSpan 转换为另一种基元类型 TTo. 该类型不能包含指针或引用。它会在运行时检查这一点，以保护类型安全). public static ReadOnlyExSpan<TTo> Cast<TFrom, TTo>(ReadOnlyExSpan<TFrom> span) where TFrom : struct where TTo : struct Parameters span ReadOnlyExSpan<TFrom> The source slice, of type TFrom (TFrom 类型的源切片). Returns ReadOnlyExSpan<TTo> The converted read-only span (转换后的只读跨度). Type Parameters TFrom The element type of the source span (源跨度的元素类型). TTo The element type of the target span (目标跨度的元素类型). Remarks Supported only for platforms that support misaligned memory access or when the memory block is aligned by other means (仅当支持未对齐内存访问的平台或内存块通过其他方式对齐时, 才支持此方法). Exceptions ArgumentException Thrown when TFrom or TTo contains pointers."
  },
  "api/Zyl.ExSpans.ExMemoryMarshal.CreateExSpan.html": {
    "href": "api/Zyl.ExSpans.ExMemoryMarshal.CreateExSpan.html",
    "title": "Method CreateExSpan | ExSpans",
    "summary": "Method CreateExSpan Namespace Zyl.ExSpans Assembly ExSpans.Core.dll CreateExSpan<T>(scoped ref T, nint) Creates a new span over a portion of a regular managed object. This can be useful if part of a managed object represents a \"fixed array.\" This is dangerous because the length is not checked (根据常规托管对象的一部分来创建新的跨度. 如果托管对象的一部分表示了 “固定数组”, 这可能会很有用. 这很危险, 因为不会检查 length). public static ExSpan<T> CreateExSpan<T>(scoped ref T reference, nint length) Parameters reference T A reference to data (数据的引用). length nint The number of T elements the memory contains (存储里包含的 T 元素的数量). Returns ExSpan<T> A span representing the specified reference and length (表示了指定引用和长度的跨度). Type Parameters T The element type (元素的类型). Remarks This method should be used with caution. It is dangerous because the length argument is not checked. Even though the ref is annotated as scoped, it will be stored into the returned span, and the lifetime of the returned span will not be validated for safety, even by span-aware languages (该方法应谨慎使用. 这种方法很危险, 因为它不会检查长度参数. 即使 ref 被申明为 scoped, 它也会存储在返回的跨度中, 而且返回的跨度的生命周期将不会进行安全验证, 即使是具有跨度意识的语言也是如此)."
  },
  "api/Zyl.ExSpans.ExMemoryMarshal.CreateReadOnlyExSpan.html": {
    "href": "api/Zyl.ExSpans.ExMemoryMarshal.CreateReadOnlyExSpan.html",
    "title": "Method CreateReadOnlyExSpan | ExSpans",
    "summary": "Method CreateReadOnlyExSpan Namespace Zyl.ExSpans Assembly ExSpans.Core.dll CreateReadOnlyExSpan<T>(scoped ref readonly T, nint) Creates a new read-only span over a portion of a regular managed object. This can be useful if part of a managed object represents a \"fixed array.\" This is dangerous because the length is not checked (根据常规托管对象的一部分来创建新的只读跨度. 如果托管对象的一部分表示了 “固定数组”, 这可能会很有用. 这很危险, 因为不会检查 length). public static ReadOnlyExSpan<T> CreateReadOnlyExSpan<T>(scoped ref readonly T reference, nint length) Parameters reference T A reference to data (数据的引用). length nint The number of T elements the memory contains (存储里包含的 T 元素的数量). Returns ReadOnlyExSpan<T> A read-only span representing the specified reference and length (表示了指定引用和长度的只读跨度). Type Parameters T The element type (元素的类型). Remarks This method should be used with caution. It is dangerous because the length argument is not checked. Even though the ref is annotated as scoped, it will be stored into the returned span, and the lifetime of the returned span will not be validated for safety, even by span-aware languages (该方法应谨慎使用. 这种方法很危险, 因为它不会检查长度参数. 即使 ref 被申明为 scoped, 它也会存储在返回的跨度中, 而且返回的跨度的生命周期将不会进行安全验证, 即使是具有跨度意识的语言也是如此)."
  },
  "api/Zyl.ExSpans.ExMemoryMarshal.CreateReadOnlyExSpanFromNullTerminated.html": {
    "href": "api/Zyl.ExSpans.ExMemoryMarshal.CreateReadOnlyExSpanFromNullTerminated.html",
    "title": "Method CreateReadOnlyExSpanFromNullTerminated | ExSpans",
    "summary": "Method CreateReadOnlyExSpanFromNullTerminated Namespace Zyl.ExSpans Assembly ExSpans.Core.dll CreateReadOnlyExSpanFromNullTerminated(char*) Creates a new read-only span for a null-terminated string (为 空终止字符串 创建新的只读跨度). [CLSCompliant(false)] public static ReadOnlyExSpan<char> CreateReadOnlyExSpanFromNullTerminated(char* value) Parameters value char* The pointer to the null-terminated string of characters (指向空终止字符串的字符指针). Returns ReadOnlyExSpan<char> A read-only span representing the specified null-terminated string, or an empty span if the pointer is null (表示指定空终结字符串的只读跨度, 如果指针为null, 则为空跨度). Remarks The returned span does not include the null terminator (返回的跨度不包括空终止符). Exceptions ArgumentException The string is longer than MaxValue. CreateReadOnlyExSpanFromNullTerminated(byte*) Creates a new read-only span for a null-terminated UTF-8 string (为 空终止UTF-8字符串 创建新的只读跨度). [CLSCompliant(false)] public static ReadOnlyExSpan<byte> CreateReadOnlyExSpanFromNullTerminated(byte* value) Parameters value byte* The pointer to the null-terminated string of bytes (指向空终止字符串的字节指针). Returns ReadOnlyExSpan<byte> A read-only span representing the specified null-terminated string, or an empty span if the pointer is null (表示指定空终结字符串的只读跨度, 如果指针为null, 则为空跨度). Remarks The returned span does not include the null terminator, nor does it validate the well-formedness of the UTF-8 data (返回的跨度不包括空终止符, 也不验证UTF-8数据的格式正确性). Exceptions ArgumentException The string is longer than MaxValue."
  },
  "api/Zyl.ExSpans.ExMemoryMarshal.GetArrayDataReference.html": {
    "href": "api/Zyl.ExSpans.ExMemoryMarshal.GetArrayDataReference.html",
    "title": "Method GetArrayDataReference | ExSpans",
    "summary": "Method GetArrayDataReference Namespace Zyl.ExSpans Assembly ExSpans.Core.dll GetArrayDataReference<T>(T[]) Returns a reference to the 0th element of array. If the array is empty, returns a null reference. Such a reference may be used for pinning but must never be dereferenced (返回对 array 中第 0 个元素的引用。 如果数组为空，则返回对 null 引用。 此类引用可用于固定，但绝不能取消引用). public static ref T GetArrayDataReference<T>(T[] array) Parameters array T[] Returns T Type Parameters T Remarks This method does not perform array variance checks. The caller must manually perform any array variance checks if the caller wishes to write to the returned reference (此方法不执行数组差异检查。 如果调用方希望写入返回的引用，则调用方必须手动执行任何数组差异检查)."
  },
  "api/Zyl.ExSpans.ExMemoryMarshal.GetReference.html": {
    "href": "api/Zyl.ExSpans.ExMemoryMarshal.GetReference.html",
    "title": "Method GetReference | ExSpans",
    "summary": "Method GetReference Namespace Zyl.ExSpans Assembly ExSpans.Core.dll GetReference<T>(ExSpan<T>) Returns a reference to the 0th element of the ExSpan. Such a reference may or may not be null. It can be used for pinning but must never be dereferenced (返回 ExSpan 中索引为 0 处元素的引用. 这样的引用可能为空, 也可能不为空. 它可以用于固定, 但绝不能解引用). public static ref T GetReference<T>(ExSpan<T> span) Parameters span ExSpan<T> The source span (源跨度). Returns T a reference to the 0th element of the ExSpan (ExSpan 中索引为 0 处元素的引用). Type Parameters T The element type (元素的类型). GetReference<T>(ReadOnlyExSpan<T>) Returns a reference to the 0th element of the ReadOnlyExSpan. Such a reference may or may not be null. It can be used for pinning but must never be dereferenced (返回 ReadOnlyExSpan 中索引为 0 处元素的引用. 这样的引用可能为空, 也可能不为空. 它可以用于固定, 但绝不能解引用). public static ref T GetReference<T>(ReadOnlyExSpan<T> span) Parameters span ReadOnlyExSpan<T> The source span (源跨度). Returns T a reference to the 0th element of the ReadOnlyExSpan (ReadOnlyExSpan 中索引为 0 处元素的引用). Type Parameters T The element type (元素的类型)."
  },
  "api/Zyl.ExSpans.ExMemoryMarshal.Is64BitProcess.html": {
    "href": "api/Zyl.ExSpans.ExMemoryMarshal.Is64BitProcess.html",
    "title": "Property Is64BitProcess | ExSpans",
    "summary": "Property Is64BitProcess Namespace Zyl.ExSpans Assembly ExSpans.Core.dll Is64BitProcess Gets a value that indicates whether the current process is a 64-bit process (获取一个值，该值指示当前进程是否为 64 位进程). public static bool Is64BitProcess { get; } Property Value bool true if the process is 64-bit; otherwise, false (如果进程为 64 位进程，则为 true；否则为 false)."
  },
  "api/Zyl.ExSpans.ExMemoryMarshal.Read.html": {
    "href": "api/Zyl.ExSpans.ExMemoryMarshal.Read.html",
    "title": "Method Read | ExSpans",
    "summary": "Method Read Namespace Zyl.ExSpans Assembly ExSpans.Core.dll Read<T>(ReadOnlyExSpan<byte>) Reads a structure of type T out of a read-only span of bytes (从字节的只读跨度中读取的 T 类型结构体). public static T Read<T>(ReadOnlyExSpan<byte> source) where T : struct Parameters source ReadOnlyExSpan<byte> The source span (源跨度). Returns T The structure retrieved from the read-only span (从只读跨度中读取的结构体). Type Parameters T The element type (元素的类型). Exceptions ArgumentException T contains managed object references. ArgumentOutOfRangeException source is smaller than T's length in bytes."
  },
  "api/Zyl.ExSpans.ExMemoryMarshal.SpanViewLength.html": {
    "href": "api/Zyl.ExSpans.ExMemoryMarshal.SpanViewLength.html",
    "title": "Field SpanViewLength | ExSpans",
    "summary": "Field SpanViewLength Namespace Zyl.ExSpans Assembly ExSpans.Core.dll The length of the view span (查看跨度的长度). public static readonly int SpanViewLength Returns int The length of the view span (查看跨度的长度)."
  },
  "api/Zyl.ExSpans.ExMemoryMarshal.TryRead.html": {
    "href": "api/Zyl.ExSpans.ExMemoryMarshal.TryRead.html",
    "title": "Method TryRead | ExSpans",
    "summary": "Method TryRead Namespace Zyl.ExSpans Assembly ExSpans.Core.dll TryRead<T>(ReadOnlyExSpan<byte>, out T) Tries to read a structure of type T from a read-only span of bytes (尝试从字节的只读跨度中读取 T 类型结构体). public static bool TryRead<T>(ReadOnlyExSpan<byte> source, out T value) where T : struct Parameters source ReadOnlyExSpan<byte> The source span (源跨度). value T When the method returns, an instance of T (此方法返回时，为 T 的实例). Returns bool true if the method succeeds in retrieving an instance of the structure; otherwise, false (如果此方法成功检索到结构体的实例, 则为 true; 否则为 false). Type Parameters T The element type (元素的类型). Exceptions ArgumentException T contains managed object references."
  },
  "api/Zyl.ExSpans.ExMemoryMarshal.TryWrite.html": {
    "href": "api/Zyl.ExSpans.ExMemoryMarshal.TryWrite.html",
    "title": "Method TryWrite | ExSpans",
    "summary": "Method TryWrite Namespace Zyl.ExSpans Assembly ExSpans.Core.dll TryWrite<T>(ExSpan<byte>, in T) Tries to write a structure of type T into a span of bytes (尝试将类型为 T 的结构体写入到字节的跨度中). public static bool TryWrite<T>(ExSpan<byte> destination, in T value) where T : struct Parameters destination ExSpan<byte> The destination span (目标跨度). value T The structure to be written to the span (要写入到范围的结构体). Returns bool true if the write operation succeeded; otherwise, false. The method returns false if the span is too small to contain T (如果写入操作成功，则为 true；否则为 false。 如果跨度太小无法包含 T，则此方法返回 false). Type Parameters T The element type (元素的类型). Exceptions ArgumentException T contains managed object references."
  },
  "api/Zyl.ExSpans.ExMemoryMarshal.Write.html": {
    "href": "api/Zyl.ExSpans.ExMemoryMarshal.Write.html",
    "title": "Method Write | ExSpans",
    "summary": "Method Write Namespace Zyl.ExSpans Assembly ExSpans.Core.dll Write<T>(ExSpan<byte>, in T) Writes a structure of type T into a span of bytes (将 T 类型的结构体写入字节跨度内). public static void Write<T>(ExSpan<byte> destination, in T value) where T : struct Parameters destination ExSpan<byte> The destination span (目标跨度). value T The structure to be written to the span (要写入到范围的结构体). Type Parameters T The element type (元素的类型). Exceptions ArgumentException T contains managed object references. ArgumentOutOfRangeException destination is too small to contain value."
  },
  "api/Zyl.ExSpans.ExMemoryMarshal.html": {
    "href": "api/Zyl.ExSpans.ExMemoryMarshal.html",
    "title": "Class ExMemoryMarshal | ExSpans",
    "summary": "Class ExMemoryMarshal Namespace Zyl.ExSpans Assembly ExSpans.Core.dll Provides a collection of methods for interoperating with ExSpan<T>, and ReadOnlyExSpan<T>. It can be regarded as the MemoryMarshal of nint index range (提供与 ExSpan 和 ExReadOnlySpan 互操作的方法. 它可以被视为 nint 索引范围的 MemoryMarshal). public static class ExMemoryMarshal Inheritance object ExMemoryMarshal Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields ArrayMaxLengthSafe The safe maximum length of array (安全的数组最大长度). SpanViewLength The length of the view span (查看跨度的长度). Properties Is64BitProcess Gets a value that indicates whether the current process is a 64-bit process (获取一个值，该值指示当前进程是否为 64 位进程). Methods AsBytes<T>(ExSpan<T>) Casts a ExSpan of one primitive type T to ExSpan of bytes. That type may not contain pointers or references. This is checked at runtime in order to preserve type safety (将一个基元类型T的ExSpan 转换为字节的ExSpan. 该类型不能包含指针或引用. 它会在运行时检查这一点, 以保护类型安全). AsBytes<T>(ReadOnlyExSpan<T>) Casts a ReadOnlyExSpan of one primitive type T to ReadOnlyExSpan of bytes. That type may not contain pointers or references. This is checked at runtime in order to preserve type safety. (将一个基元类型T的ExSpan 转换为字节的ReadOnlyExSpan. 该类型不能包含指针或引用. 它会在运行时检查这一点, 以保护类型安全). AsRef<T>(ExSpan<byte>) Re-interprets a span of bytes as a reference to structure of type T. The type may not contain pointers or references. This is checked at runtime in order to preserve type safety. (将字节跨度重新解释为对 T 类型结构体的引用. 该类型不能包含指针或引用. 它会在运行时检查这一点, 以保护类型安全). AsRef<T>(ReadOnlyExSpan<byte>) Re-interprets a read-only span of bytes as a reference to structure of type T. The type may not contain pointers or references. This is checked at runtime in order to preserve type safety. (将字节只读跨度重新解释为对 T 类型结构体的引用. 该类型不能包含指针或引用. 它会在运行时检查这一点, 以保护类型安全). Cast<TFrom, TTo>(ExSpan<TFrom>) Casts a ExSpan of one primitive type TFrom to another primitive type TTo. These types may not contain pointers or references. This is checked at runtime in order to preserve type safety. (将一种基元类型 TFrom的ExSpan 转换为另一种基元类型 TTo. 该类型不能包含指针或引用。它会在运行时检查这一点，以保护类型安全). Cast<TFrom, TTo>(ReadOnlyExSpan<TFrom>) Casts a ReadOnlyExSpan of one primitive type TFrom to another primitive type TTo. These types may not contain pointers or references. This is checked at runtime in order to preserve type safety. (将一种基元类型TFrom的 ReadOnlyExSpan 转换为另一种基元类型 TTo. 该类型不能包含指针或引用。它会在运行时检查这一点，以保护类型安全). CreateExSpan<T>(scoped ref T, nint) Creates a new span over a portion of a regular managed object. This can be useful if part of a managed object represents a \"fixed array.\" This is dangerous because the length is not checked (根据常规托管对象的一部分来创建新的跨度. 如果托管对象的一部分表示了 “固定数组”, 这可能会很有用. 这很危险, 因为不会检查 length). CreateReadOnlyExSpanFromNullTerminated(byte*) Creates a new read-only span for a null-terminated UTF-8 string (为 空终止UTF-8字符串 创建新的只读跨度). CreateReadOnlyExSpanFromNullTerminated(char*) Creates a new read-only span for a null-terminated string (为 空终止字符串 创建新的只读跨度). CreateReadOnlyExSpan<T>(scoped ref readonly T, nint) Creates a new read-only span over a portion of a regular managed object. This can be useful if part of a managed object represents a \"fixed array.\" This is dangerous because the length is not checked (根据常规托管对象的一部分来创建新的只读跨度. 如果托管对象的一部分表示了 “固定数组”, 这可能会很有用. 这很危险, 因为不会检查 length). GetArrayDataReference<T>(T[]) Returns a reference to the 0th element of array. If the array is empty, returns a null reference. Such a reference may be used for pinning but must never be dereferenced (返回对 array 中第 0 个元素的引用。 如果数组为空，则返回对 null 引用。 此类引用可用于固定，但绝不能取消引用). GetReference<T>(ExSpan<T>) Returns a reference to the 0th element of the ExSpan. Such a reference may or may not be null. It can be used for pinning but must never be dereferenced (返回 ExSpan 中索引为 0 处元素的引用. 这样的引用可能为空, 也可能不为空. 它可以用于固定, 但绝不能解引用). GetReference<T>(ReadOnlyExSpan<T>) Returns a reference to the 0th element of the ReadOnlyExSpan. Such a reference may or may not be null. It can be used for pinning but must never be dereferenced (返回 ReadOnlyExSpan 中索引为 0 处元素的引用. 这样的引用可能为空, 也可能不为空. 它可以用于固定, 但绝不能解引用). Read<T>(ReadOnlyExSpan<byte>) Reads a structure of type T out of a read-only span of bytes (从字节的只读跨度中读取的 T 类型结构体). TryRead<T>(ReadOnlyExSpan<byte>, out T) Tries to read a structure of type T from a read-only span of bytes (尝试从字节的只读跨度中读取 T 类型结构体). TryWrite<T>(ExSpan<byte>, in T) Tries to write a structure of type T into a span of bytes (尝试将类型为 T 的结构体写入到字节的跨度中). Write<T>(ExSpan<byte>, in T) Writes a structure of type T into a span of bytes (将 T 类型的结构体写入字节跨度内)."
  },
  "api/Zyl.ExSpans.ExNativeMemory.Alloc.html": {
    "href": "api/Zyl.ExSpans.ExNativeMemory.Alloc.html",
    "title": "Method Alloc | ExSpans",
    "summary": "Method Alloc Namespace Zyl.ExSpans Assembly ExSpans.dll Alloc(nuint) Allocates a block of memory of the specified size, in bytes (分配指定大小的内存块（以字节为单位）). [CLSCompliant(false)] public static void* Alloc(nuint byteCount) Parameters byteCount nuint The size, in bytes, of the block to allocate (要分配的块的大小（以字节为单位）). Returns void* A pointer to the allocated block of memory (指向分配的内存块的指针). Remarks This method allows byteCount to be 0 and will return a valid pointer that should not be dereferenced and that should be passed to free to avoid memory leaks (此方法允许 byteCount 为 0 ，将返回一个有效的指针, 该指针不应被取消引用, 应传递给 free 以避免内存泄漏). This method is a thin wrapper over the C malloc API (此方法是 C malloc API 上的精简包装器). Exceptions OutOfMemoryException Allocating byteCount of memory failed. Alloc(nuint, nuint) Allocates a block of memory of the specified size, in elements (按元素分配指定大小的内存块). [CLSCompliant(false)] public static void* Alloc(nuint elementCount, nuint elementSize) Parameters elementCount nuint The count, in elements, of the block to allocate (要分配的块的数量（以元素为单位）). elementSize nuint The size, in bytes, of each element in the allocation (分配中每个元素的大小（以字节为单位）). Returns void* A pointer to the allocated block of memory (指向分配的内存块的指针). Remarks This method allows elementCount and/or elementSize to be 0 and will return a valid pointer that should not be dereferenced and that should be passed to free to avoid memory leaks (此方法允许 elementCount/ elementSize 为 0 ，将返回一个有效的指针, 该指针不应被取消引用, 应传递给 free 以避免内存泄漏). This method is a thin wrapper over the C malloc API (此方法是 C malloc API 上的精简包装器). Exceptions OutOfMemoryException Allocating elementCount * elementSize bytes of memory failed."
  },
  "api/Zyl.ExSpans.ExNativeMemory.AllocZeroed.html": {
    "href": "api/Zyl.ExSpans.ExNativeMemory.AllocZeroed.html",
    "title": "Method AllocZeroed | ExSpans",
    "summary": "Method AllocZeroed Namespace Zyl.ExSpans Assembly ExSpans.dll AllocZeroed(nuint) Allocates and zeroes a block of memory of the specified size, in bytes (分配并清零指定大小的内存块（以字节为单位）). [CLSCompliant(false)] public static void* AllocZeroed(nuint byteCount) Parameters byteCount nuint The size, in bytes, of the block to allocate (要分配的块的大小（以字节为单位）). Returns void* A pointer to the allocated and zeroed block of memory (指向已分配且清零的内存块的指针). Remarks This method allows byteCount to be 0 and will return a valid pointer that should not be dereferenced and that should be passed to free to avoid memory leaks (此方法允许 byteCount 为 0 ，将返回一个有效的指针, 该指针不应被取消引用, 应传递给 free 以避免内存泄漏). This method is a thin wrapper over the C calloc API (此方法是 C calloc API 上的精简包装器). Exceptions OutOfMemoryException Allocating byteCount of memory failed. AllocZeroed(nuint, nuint) Allocates and zeroes a block of memory of the specified size, in elements (按元素分配并清零指定大小的内存块). [CLSCompliant(false)] public static void* AllocZeroed(nuint elementCount, nuint elementSize) Parameters elementCount nuint The count, in elements, of the block to allocate (要分配的块的数量（以元素为单位）). elementSize nuint The size, in bytes, of each element in the allocation (分配中每个元素的大小（以字节为单位）). Returns void* A pointer to the allocated and zeroed block of memory (指向已分配且清零的内存块的指针). Remarks This method allows elementCount and/or elementSize to be 0 and will return a valid pointer that should not be dereferenced and that should be passed to free to avoid memory leaks (此方法允许 elementCount/ elementSize 为 0 ，将返回一个有效的指针, 该指针不应被取消引用, 应传递给 free 以避免内存泄漏). This method is a thin wrapper over the C calloc API (此方法是 C calloc API 上的精简包装器). Exceptions OutOfMemoryException Allocating elementCount * elementSize bytes of memory failed."
  },
  "api/Zyl.ExSpans.ExNativeMemory.Clear.html": {
    "href": "api/Zyl.ExSpans.ExNativeMemory.Clear.html",
    "title": "Method Clear | ExSpans",
    "summary": "Method Clear Namespace Zyl.ExSpans Assembly ExSpans.dll Clear(void*, nuint) Clears a block of memory (清零内存块). [CLSCompliant(false)] public static void Clear(void* ptr, nuint byteCount) Parameters ptr void* A pointer to the block of memory that should be cleared (指向应清零的内存块的指针). byteCount nuint The size, in bytes, of the block to clear (要清零的块的大小（以字节为单位）). Remarks If this method is called with ptr being null and byteCount being 0, it will be equivalent to a no-op (如果以 ptr 为 null 且 byteCount 为 0调用此方法，则该方法等效于 no-op). The behavior when ptr is null and byteCount is greater than 0 is undefined (当 ptr 为 null 且 byteCount 大于 0 时的行为未定义)."
  },
  "api/Zyl.ExSpans.ExNativeMemory.Copy.html": {
    "href": "api/Zyl.ExSpans.ExNativeMemory.Copy.html",
    "title": "Method Copy | ExSpans",
    "summary": "Method Copy Namespace Zyl.ExSpans Assembly ExSpans.dll Copy(void*, void*, nuint) Copies a block of memory from memory location source to memory location destination (将内存块从内存位置 source 复制到内存位置 destination). [CLSCompliant(false)] public static void Copy(void* source, void* destination, nuint byteCount) Parameters source void* A pointer to the source of data to be copied (指向要复制的数据源的指针). destination void* A pointer to the destination memory block where the data is to be copied (指向要在其中复制数据的目标内存块的指针). byteCount nuint The size, in bytes, to be copied from the source location to the destination (要从源位置复制到目标的大小（以字节为单位）)."
  },
  "api/Zyl.ExSpans.ExNativeMemory.Fill.html": {
    "href": "api/Zyl.ExSpans.ExNativeMemory.Fill.html",
    "title": "Method Fill | ExSpans",
    "summary": "Method Fill Namespace Zyl.ExSpans Assembly ExSpans.dll Fill(void*, nuint, byte) Copies the byte value to the first byteCount bytes of the memory located at ptr (将字节value复制到 ptr处起始、byteCount字节的内存块). [CLSCompliant(false)] public static void Fill(void* ptr, nuint byteCount, byte value) Parameters ptr void* A pointer to the block of memory to fill (指向要填充的内存块的指针). byteCount nuint The number of bytes to be set to value (要设置为 value的字节数). value byte The value to be set (要设置的值)."
  },
  "api/Zyl.ExSpans.ExNativeMemory.Free.html": {
    "href": "api/Zyl.ExSpans.ExNativeMemory.Free.html",
    "title": "Method Free | ExSpans",
    "summary": "Method Free Namespace Zyl.ExSpans Assembly ExSpans.dll Free(void*) Frees a block of memory (释放内存块). [CLSCompliant(false)] public static void Free(void* ptr) Parameters ptr void* A pointer to the block of memory that should be freed (指向应释放的内存块的指针). Remarks This method does nothing if ptr is null (如果 ptr 为 null ，则此方法不执行任何作用). This method is a thin wrapper over the C free API (此方法是 C free API 上的精简包装器)."
  },
  "api/Zyl.ExSpans.ExNativeMemory.Realloc.html": {
    "href": "api/Zyl.ExSpans.ExNativeMemory.Realloc.html",
    "title": "Method Realloc | ExSpans",
    "summary": "Method Realloc Namespace Zyl.ExSpans Assembly ExSpans.dll Realloc(void*, nuint) Reallocates a block of memory to be the specified size, in bytes (将内存块重新分配为指定大小（以字节为单位). [CLSCompliant(false)] public static void* Realloc(void* ptr, nuint byteCount) Parameters ptr void* The previously allocated block of memory (以前分配的内存块). byteCount nuint The size, in bytes, of the reallocated block (重新分配的块的大小（以字节为单位）). Returns void* A pointer to the reallocated block of memory (指向重新分配的内存块的指针). Remarks This method acts as Alloc(nuint) if ptr is null (如果ptr 是 null, 此方法的作用就像 Alloc(nuint)). This method allows byteCount to be 0 and will return a valid pointer that should not be dereferenced and that should be passed to free to avoid memory leaks (此方法允许 byteCount 和 0 将返回不应取消引用的有效指针，并且应将其传递给 free 以避免内存泄漏). This method is a thin wrapper over the C realloc API (此方法是 C realloc API 上的精简包装器). Exceptions OutOfMemoryException Reallocating byteCount of memory failed."
  },
  "api/Zyl.ExSpans.ExNativeMemory.html": {
    "href": "api/Zyl.ExSpans.ExNativeMemory.html",
    "title": "Class ExNativeMemory | ExSpans",
    "summary": "Class ExNativeMemory Namespace Zyl.ExSpans Assembly ExSpans.dll This class contains methods that are mainly used to manage native memory. It can enable early versions NET can also use the method of NativeMemory, which will revert back to the implementation of AllocHGlobal(nint) (此类包含了主要用于管理本机内存的方法. 它能使早期版本的 .NET 也能使用 NativeMemory 的方法, 此时会回退为 AllocHGlobal(nint) 的实现). public static class ExNativeMemory Inheritance object ExNativeMemory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Alloc(nuint) Allocates a block of memory of the specified size, in bytes (分配指定大小的内存块（以字节为单位）). Alloc(nuint, nuint) Allocates a block of memory of the specified size, in elements (按元素分配指定大小的内存块). AllocZeroed(nuint) Allocates and zeroes a block of memory of the specified size, in bytes (分配并清零指定大小的内存块（以字节为单位）). AllocZeroed(nuint, nuint) Allocates and zeroes a block of memory of the specified size, in elements (按元素分配并清零指定大小的内存块). Clear(void*, nuint) Clears a block of memory (清零内存块). Copy(void*, void*, nuint) Copies a block of memory from memory location source to memory location destination (将内存块从内存位置 source 复制到内存位置 destination). Fill(void*, nuint, byte) Copies the byte value to the first byteCount bytes of the memory located at ptr (将字节value复制到 ptr处起始、byteCount字节的内存块). Free(void*) Frees a block of memory (释放内存块). Realloc(void*, nuint) Reallocates a block of memory to be the specified size, in bytes (将内存块重新分配为指定大小（以字节为单位)."
  },
  "api/Zyl.ExSpans.ExSpan-1.-ctor.html": {
    "href": "api/Zyl.ExSpans.ExSpan-1.-ctor.html",
    "title": "Constructor ExSpan | ExSpans",
    "summary": "Constructor ExSpan Namespace Zyl.ExSpans Assembly ExSpans.Core.dll ExSpan(T[]?) Creates a new ExSpan<T> over the entirety of the target array (在整个指定数组中创建新的 ExSpan<T>). public ExSpan(T[]? array) Parameters array T[] The target array (指定数组). Remarks Returns default when array is null (当 array 为 null 时返回默认值). Exceptions ArrayTypeMismatchException Thrown when array is covariant and array's type is not exactly T[]. ExSpan(T[]?, nint, nint) Creates a new ExSpan<T> over the portion of the target array beginning at 'start' index and ending at 'end' index (exclusive) (创建一个新的 ExSpan<T>，其中包含从指定索引开始的数组的指定数量的元素). [FakeCLSCompliant(false)] public ExSpan(T[]? array, nint start, nint length) Parameters array T[] The target array (指定数组). start nint The zero-based index at which to begin the span (从零开始的跨度索引). length nint The number of items in the span (跨度的项数). Remarks Returns default when array is null (当 array 为 null 时返回默认值). Exceptions ArrayTypeMismatchException Thrown when array is covariant and array's type is not exactly T[]. ArgumentOutOfRangeException Thrown when the specified start or end index is not in the range (<0 or >Length). ExSpan(void*, nint) Creates a new ExSpan<T> over the target unmanaged buffer (在目标非托管缓冲区上创建新 ExSpan<T>). [CLSCompliant(false)] public ExSpan(void* pointer, nint length) Parameters pointer void* An unmanaged pointer to memory (指向内存的非托管指针). length nint The number of T elements the memory contains (内存中包含的 T 元素数量). Exceptions ArgumentException Thrown when T is reference type or contains pointers and hence cannot be stored in unmanaged memory. ArgumentOutOfRangeException Thrown when the specified length is negative. ExSpan(ref T) Creates a new ExSpan<T> of length 1 around the specified reference (在指定的引用周围创建长度为 1 的新 ExSpan<T>). public ExSpan(ref T reference) Parameters reference T A reference to data (数据的引用)."
  },
  "api/Zyl.ExSpans.ExSpan-1.Clear.html": {
    "href": "api/Zyl.ExSpans.ExSpan-1.Clear.html",
    "title": "Method Clear | ExSpans",
    "summary": "Method Clear Namespace Zyl.ExSpans Assembly ExSpans.Core.dll Clear() Clears the contents of this ExSpan. public void Clear()"
  },
  "api/Zyl.ExSpans.ExSpan-1.CopyTo.html": {
    "href": "api/Zyl.ExSpans.ExSpan-1.CopyTo.html",
    "title": "Method CopyTo | ExSpans",
    "summary": "Method CopyTo Namespace Zyl.ExSpans Assembly ExSpans.Core.dll CopyTo(ExSpan<T>) Copies the contents of this span into destination span. If the source and destinations overlap, this method behaves as if the original values in a temporary location before the destination is overwritten (将此跨度的内容复制到目标跨度. 如果源和目标重叠, 则此方法的行为就像覆盖目标之前临时位置中的原始值一样). public void CopyTo(ExSpan<T> destination) Parameters destination ExSpan<T> The destination span (目标跨度). Exceptions ArgumentException Thrown when the destination span is shorter than the source span."
  },
  "api/Zyl.ExSpans.ExSpan-1.Empty.html": {
    "href": "api/Zyl.ExSpans.ExSpan-1.Empty.html",
    "title": "Property Empty | ExSpans",
    "summary": "Property Empty Namespace Zyl.ExSpans Assembly ExSpans.Core.dll Empty Returns an empty ExSpan<T> (返回空的 ExSpan<T>). public static ExSpan<T> Empty { get; } Property Value ExSpan<T>"
  },
  "api/Zyl.ExSpans.ExSpan-1.Enumerator.Current.html": {
    "href": "api/Zyl.ExSpans.ExSpan-1.Enumerator.Current.html",
    "title": "Property Current | ExSpans",
    "summary": "Property Current Namespace Zyl.ExSpans Assembly ExSpans.Core.dll Current Gets the element at the current position of the enumerator. public ref T Current { get; } Property Value T"
  },
  "api/Zyl.ExSpans.ExSpan-1.Enumerator.MoveNext.html": {
    "href": "api/Zyl.ExSpans.ExSpan-1.Enumerator.MoveNext.html",
    "title": "Method MoveNext | ExSpans",
    "summary": "Method MoveNext Namespace Zyl.ExSpans Assembly ExSpans.Core.dll MoveNext() Advances the enumerator to the next element of the span (将枚举器推进到跨度的下一元素). public bool MoveNext() Returns bool"
  },
  "api/Zyl.ExSpans.ExSpan-1.Enumerator.html": {
    "href": "api/Zyl.ExSpans.ExSpan-1.Enumerator.html",
    "title": "Struct ExSpan<T>.Enumerator | ExSpans",
    "summary": "Struct ExSpan<T>.Enumerator Namespace Zyl.ExSpans Assembly ExSpans.Core.dll Enumerates the elements of a ExSpan<T> (为 ExSpan<T> 的元素提供枚举器). public ref struct ExSpan<T>.Enumerator Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties Current Gets the element at the current position of the enumerator. Methods MoveNext() Advances the enumerator to the next element of the span (将枚举器推进到跨度的下一元素)."
  },
  "api/Zyl.ExSpans.ExSpan-1.GetEnumerator.html": {
    "href": "api/Zyl.ExSpans.ExSpan-1.GetEnumerator.html",
    "title": "Method GetEnumerator | ExSpans",
    "summary": "Method GetEnumerator Namespace Zyl.ExSpans Assembly ExSpans.Core.dll GetEnumerator() Gets an enumerator for this span (返回此跨度的枚举器). public ExSpan<T>.Enumerator GetEnumerator() Returns ExSpan<T>.Enumerator"
  },
  "api/Zyl.ExSpans.ExSpan-1.IsEmpty.html": {
    "href": "api/Zyl.ExSpans.ExSpan-1.IsEmpty.html",
    "title": "Property IsEmpty | ExSpans",
    "summary": "Property IsEmpty Namespace Zyl.ExSpans Assembly ExSpans.Core.dll IsEmpty Gets a value indicating whether this ExSpan<T> is empty (返回一个值，该值指示当前扩展跨度为空). public bool IsEmpty { get; } Property Value bool true if this ExSpan is empty; otherwise, false."
  },
  "api/Zyl.ExSpans.ExSpan-1.Item.html": {
    "href": "api/Zyl.ExSpans.ExSpan-1.Item.html",
    "title": "Property this | ExSpans",
    "summary": "Property this Namespace Zyl.ExSpans Assembly ExSpans.Core.dll this[nint] Returns the specified element of the Ex span (从扩展跨度中返回指定项). [FakeCLSCompliant(false)] public ref T this[nint index] { get; } Parameters index nint The zero-based index (从零开始的索引). Property Value T Returns the specified element (返回指定项). Exceptions IndexOutOfRangeException Thrown when index less than 0 or index greater than or equal to Length"
  },
  "api/Zyl.ExSpans.ExSpan-1.LastSlice.html": {
    "href": "api/Zyl.ExSpans.ExSpan-1.LastSlice.html",
    "title": "Method LastSlice | ExSpans",
    "summary": "Method LastSlice Namespace Zyl.ExSpans Assembly ExSpans.Core.dll LastSlice(nint) Forms a slice out of the given Ex span, last beginning at 'TSize' (从尾部指定索引处的扩展跨度形成切片). [FakeCLSCompliant(false)] public ExSpan<T> LastSlice(nint end) Parameters end nint The zero-based index at which to begin this slice (从零开始的切片尾部索引). Returns ExSpan<T> Returns the new Ex span (返回新的扩展跨度). Exceptions ArgumentOutOfRangeException Thrown when the specified end index is not in range (<0 or >Length). LastSlice(nint, nint) Forms a slice out of the given Ex span, last beginning at 'end', of given length (从尾部指定长度的指定索引处开始的当前扩展跨度形成切片) [FakeCLSCompliant(false)] public ExSpan<T> LastSlice(nint end, nint length) Parameters end nint The zero-based index at which to begin this slice (从零开始的切片尾部索引). length nint The desired length for the slice (exclusive) (切片所需的长度). Returns ExSpan<T> Returns the new Ex span (返回新的扩展跨度). Exceptions ArgumentOutOfRangeException Thrown when the specified end or end index is not in range (<0 or >Length)."
  },
  "api/Zyl.ExSpans.ExSpan-1.Length.html": {
    "href": "api/Zyl.ExSpans.ExSpan-1.Length.html",
    "title": "Property Length | ExSpans",
    "summary": "Property Length Namespace Zyl.ExSpans Assembly ExSpans.Core.dll Length The number of items in the Ex span (扩展跨度中的项数). [FakeCLSCompliant(false)] public nint Length { get; } Property Value nint"
  },
  "api/Zyl.ExSpans.ExSpan-1.Slice.html": {
    "href": "api/Zyl.ExSpans.ExSpan-1.Slice.html",
    "title": "Method Slice | ExSpans",
    "summary": "Method Slice Namespace Zyl.ExSpans Assembly ExSpans.Core.dll Slice(nint) Forms a slice out of the given Ex span, beginning at 'start' (从指定索引处开始的扩展跨度形成切片). [FakeCLSCompliant(false)] public ExSpan<T> Slice(nint start) Parameters start nint The zero-based index at which to begin this slice (从零开始的切片索引). Returns ExSpan<T> Returns the new Ex span (返回新的扩展跨度). Exceptions ArgumentOutOfRangeException Thrown when the specified start index is not in range (<0 or >Length). Slice(nint, nint) Forms a slice out of the given Ex span, beginning at 'start', of given length (从指定长度的指定索引处开始的当前扩展跨度形成切片). [FakeCLSCompliant(false)] public ExSpan<T> Slice(nint start, nint length) Parameters start nint The zero-based index at which to begin this slice (从零开始的切片索引). length nint The desired length for the slice (exclusive) (切片所需的长度). Returns ExSpan<T> Returns the new Ex span (返回新的扩展跨度). Exceptions ArgumentOutOfRangeException Thrown when the specified start or end index is not in range (<0 or >Length)."
  },
  "api/Zyl.ExSpans.ExSpan-1.ToArray.html": {
    "href": "api/Zyl.ExSpans.ExSpan-1.ToArray.html",
    "title": "Method ToArray | ExSpans",
    "summary": "Method ToArray Namespace Zyl.ExSpans Assembly ExSpans.Core.dll ToArray() Copies the contents of this span into a new array. The maxLength parameter uses the value of ArrayMaxLengthSafe (将此范围的内容复制到新建数组中. maxLength 参数使用 ArrayMaxLengthSafe 的值). public T[] ToArray() Returns T[] An array containing the data in the current span (包含当前跨度中数据的数组). ToArray(int) Copies the contents of this span into a new array. It has a maxLength parameters (将此跨度的内容复制到新建数组中. 它具有 maxLength 参数). public T[] ToArray(int maxLength) Parameters maxLength int The max length of array (数组的最大长度). Returns T[] An array containing the data in the current span (包含当前跨度中数据的数组). Exceptions ArgumentOutOfRangeException The maxLength parameter must be greater than 0"
  },
  "api/Zyl.ExSpans.ExSpan-1.ToString.html": {
    "href": "api/Zyl.ExSpans.ExSpan-1.ToString.html",
    "title": "Method ToString | ExSpans",
    "summary": "Method ToString Namespace Zyl.ExSpans Assembly ExSpans.Core.dll ToString() Returns the string representation of this ExSpan<T> (返回此 ExSpan<T> 的字符串表示形式). public override string ToString() Returns string See Also ItemsToString<T>(ExSpan<T>, Func<nint, T, string>, ItemsToStringFlags, TypeNameFlags)"
  },
  "api/Zyl.ExSpans.ExSpan-1.TryCopyTo.html": {
    "href": "api/Zyl.ExSpans.ExSpan-1.TryCopyTo.html",
    "title": "Method TryCopyTo | ExSpans",
    "summary": "Method TryCopyTo Namespace Zyl.ExSpans Assembly ExSpans.Core.dll TryCopyTo(ExSpan<T>) Try copies the contents of this span into destination span. If the source and destinations overlap, this method behaves as if the original values in a temporary location before the destination is overwritten (尝试将此只读跨度的内容复制到目标跨度. 如果源和目标重叠, 则此方法的行为就像覆盖目标之前临时位置中的原始值一样). public bool TryCopyTo(ExSpan<T> destination) Parameters destination ExSpan<T> The destination span (目标跨度). Returns bool true if the copy operation succeeded; otherwise, false (如果复制操作已成功，则为 true；否则，为 false)."
  },
  "api/Zyl.ExSpans.ExSpan-1.html": {
    "href": "api/Zyl.ExSpans.ExSpan-1.html",
    "title": "Struct ExSpan<T> | ExSpans",
    "summary": "Struct ExSpan<T> Namespace Zyl.ExSpans Assembly ExSpans.Core.dll Provides a type-safe and memory-safe representation of a contiguous region of arbitrary memory. It can be regarded as the Span<T> of nint index range (提供任意内存的连续区域的类型安全和内存安全表示形式. 它可以被视为 nint 索引范围的 Span<T>). public readonly ref struct ExSpan<T> : IExSpanBase<T>, IReadOnlyExSpanBase<T>, IExLength Type Parameters T The element type (元素的类型). Implements IExSpanBase<T> IReadOnlyExSpanBase<T> IExLength Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Extension Methods ExMemoryExtensions.BinarySearch<T>(ExSpan<T>, IComparable<T>) ExMemoryExtensions.BinarySearch<T, TComparable>(ExSpan<T>, TComparable) ExMemoryExtensions.BinarySearch<T, TComparer>(ExSpan<T>, T, TComparer) ExMemoryExtensions.CommonPrefixLength<T>(ExSpan<T>, ReadOnlyExSpan<T>) ExMemoryExtensions.CommonPrefixLength<T>(ExSpan<T>, ReadOnlyExSpan<T>, IEqualityComparer<T>?) ExMemoryExtensions.Fill<T>(ExSpan<T>, T) ExMemoryExtensions.Overlaps<T>(ExSpan<T>, ReadOnlyExSpan<T>) ExMemoryExtensions.Overlaps<T>(ExSpan<T>, ReadOnlyExSpan<T>, out int) ExMemoryExtensions.Replace<T>(ExSpan<T>, T, T, IEqualityComparer<T>?) ExMemoryExtensions.Reverse<T>(ExSpan<T>) ExMemoryExtensions.SequenceCompareTo<T>(ExSpan<T>, ReadOnlyExSpan<T>, IComparer<T>?) ExMemoryExtensions.SequenceEqual<T>(ExSpan<T>, ReadOnlyExSpan<T>, IEqualityComparer<T>?) ExMemoryExtensions.Sort<T>(ExSpan<T>) ExMemoryExtensions.Sort<T>(ExSpan<T>, Comparison<T>) ExMemoryExtensions.Sort<TKey, TValue>(ExSpan<TKey>, ExSpan<TValue>) ExMemoryExtensions.Sort<TKey, TValue>(ExSpan<TKey>, ExSpan<TValue>, Comparison<TKey>) ExMemoryExtensions.Sort<T, TComparer>(ExSpan<T>, TComparer) ExMemoryExtensions.Sort<TKey, TValue, TComparer>(ExSpan<TKey>, ExSpan<TValue>, TComparer) ExSpanExtensions.AsReadOnlyExSpan<T>(ExSpan<T>) ExSpanExtensions.AsSpan<T>(ExSpan<T>) ExSpanExtensions.AsSpan<T>(ExSpan<T>, nint) ExSpanExtensions.AsSpan<T>(ExSpan<T>, nint, int) ExSpanExtensions.ItemsAppendStringTo<T>(ExSpan<T>, Action<string>, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) ExSpanExtensions.ItemsAppendStringTo<T>(ExSpan<T>, Action<string>, nint, nint, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) ExSpanExtensions.ItemsAppendString<T>(ExSpan<T>, StringBuilder, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) ExSpanExtensions.ItemsAppendString<T>(ExSpan<T>, StringBuilder, nint, nint, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) ExSpanExtensions.ItemsToString<T>(ExSpan<T>, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) ExSpanExtensions.ItemsToString<T>(ExSpan<T>, nint, nint, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) ExSpanExtensions.LastAsSpan<T>(ExSpan<T>) ExSpanExtensions.LastAsSpan<T>(ExSpan<T>, nint, int) Constructors ExSpan(void*, nint) Creates a new ExSpan<T> over the target unmanaged buffer (在目标非托管缓冲区上创建新 ExSpan<T>). ExSpan(ref T) Creates a new ExSpan<T> of length 1 around the specified reference (在指定的引用周围创建长度为 1 的新 ExSpan<T>). ExSpan(T[]?) Creates a new ExSpan<T> over the entirety of the target array (在整个指定数组中创建新的 ExSpan<T>). ExSpan(T[]?, nint, nint) Creates a new ExSpan<T> over the portion of the target array beginning at 'start' index and ending at 'end' index (exclusive) (创建一个新的 ExSpan<T>，其中包含从指定索引开始的数组的指定数量的元素). Properties Empty Returns an empty ExSpan<T> (返回空的 ExSpan<T>). IsEmpty Gets a value indicating whether this ExSpan<T> is empty (返回一个值，该值指示当前扩展跨度为空). this[nint] Returns the specified element of the Ex span (从扩展跨度中返回指定项). Length The number of items in the Ex span (扩展跨度中的项数). Methods Clear() Clears the contents of this ExSpan. CopyTo(ExSpan<T>) Copies the contents of this span into destination span. If the source and destinations overlap, this method behaves as if the original values in a temporary location before the destination is overwritten (将此跨度的内容复制到目标跨度. 如果源和目标重叠, 则此方法的行为就像覆盖目标之前临时位置中的原始值一样). GetEnumerator() Gets an enumerator for this span (返回此跨度的枚举器). LastSlice(nint) Forms a slice out of the given Ex span, last beginning at 'TSize' (从尾部指定索引处的扩展跨度形成切片). LastSlice(nint, nint) Forms a slice out of the given Ex span, last beginning at 'end', of given length (从尾部指定长度的指定索引处开始的当前扩展跨度形成切片) Slice(nint) Forms a slice out of the given Ex span, beginning at 'start' (从指定索引处开始的扩展跨度形成切片). Slice(nint, nint) Forms a slice out of the given Ex span, beginning at 'start', of given length (从指定长度的指定索引处开始的当前扩展跨度形成切片). ToArray() Copies the contents of this span into a new array. The maxLength parameter uses the value of ArrayMaxLengthSafe (将此范围的内容复制到新建数组中. maxLength 参数使用 ArrayMaxLengthSafe 的值). ToArray(int) Copies the contents of this span into a new array. It has a maxLength parameters (将此跨度的内容复制到新建数组中. 它具有 maxLength 参数). ToString() Returns the string representation of this ExSpan<T> (返回此 ExSpan<T> 的字符串表示形式). TryCopyTo(ExSpan<T>) Try copies the contents of this span into destination span. If the source and destinations overlap, this method behaves as if the original values in a temporary location before the destination is overwritten (尝试将此只读跨度的内容复制到目标跨度. 如果源和目标重叠, 则此方法的行为就像覆盖目标之前临时位置中的原始值一样). Operators operator ==(ExSpan<T>, ExSpan<T>) Returns a value that indicates whether two ExSpan<T> instances are equal (返回一个值，该值指示两个 ExSpan<T> 实例是否相等). explicit operator Span<T>(ExSpan<T>) Defines an explicit conversion of a ExSpan<T> to a Span<T>. The length will saturating limited to the maximum length it supports (定义 ExSpan<T> 到 Span<T> 的显式转换. 长度会饱和限制为它所支持的最大长度). implicit operator ExSpan<T>(ArraySegment<T>) Defines an implicit conversion of a ArraySegment<T> to a ExSpan<T> (定义 ArraySegment<T> 到 ExSpan<T> 的隐式转换) implicit operator ExSpan<T>(Span<T>) Defines an implicit conversion of a Span<T> to a ExSpan<T> (定义 Span<T> 到 ExSpan<T> 的隐式转换). implicit operator ReadOnlyExSpan<T>(ExSpan<T>) Defines an implicit conversion of a ExSpan<T> to a ReadOnlyExSpan<T> (定义 ExSpan<T> 到 ReadOnlyExSpan<T> 的隐式转换). implicit operator ExSpan<T>(T[]?) Defines an implicit conversion of an array to a ExSpan<T> (定义数组到 ExSpan<T> 的隐式转换) operator !=(ExSpan<T>, ExSpan<T>) Returns a value that indicates whether two ExSpan<T> instances are not equal (返回一个值，该值指示两个 ExSpan<T> 实例是否不相等)."
  },
  "api/Zyl.ExSpans.ExSpan-1.op_Equality.html": {
    "href": "api/Zyl.ExSpans.ExSpan-1.op_Equality.html",
    "title": "Operator operator == | ExSpans",
    "summary": "Operator operator == Namespace Zyl.ExSpans Assembly ExSpans.Core.dll operator ==(ExSpan<T>, ExSpan<T>) Returns a value that indicates whether two ExSpan<T> instances are equal (返回一个值，该值指示两个 ExSpan<T> 实例是否相等). public static bool operator ==(ExSpan<T> left, ExSpan<T> right) Parameters left ExSpan<T> right ExSpan<T> Returns bool"
  },
  "api/Zyl.ExSpans.ExSpan-1.op_Explicit.html": {
    "href": "api/Zyl.ExSpans.ExSpan-1.op_Explicit.html",
    "title": "Operator explicit operator | ExSpans",
    "summary": "Operator explicit operator Namespace Zyl.ExSpans Assembly ExSpans.Core.dll explicit operator Span<T>(ExSpan<T>) Defines an explicit conversion of a ExSpan<T> to a Span<T>. The length will saturating limited to the maximum length it supports (定义 ExSpan<T> 到 Span<T> 的显式转换. 长度会饱和限制为它所支持的最大长度). public static explicit operator Span<T>(ExSpan<T> span) Parameters span ExSpan<T> The object to convert (要转换的对象). Returns Span<T> See Also GetSpanSaturatingLength(nint)"
  },
  "api/Zyl.ExSpans.ExSpan-1.op_Implicit.html": {
    "href": "api/Zyl.ExSpans.ExSpan-1.op_Implicit.html",
    "title": "Operator implicit operator | ExSpans",
    "summary": "Operator implicit operator Namespace Zyl.ExSpans Assembly ExSpans.Core.dll implicit operator ExSpan<T>(T[]?) Defines an implicit conversion of an array to a ExSpan<T> (定义数组到 ExSpan<T> 的隐式转换) public static implicit operator ExSpan<T>(T[]? array) Parameters array T[] Returns ExSpan<T> implicit operator ExSpan<T>(ArraySegment<T>) Defines an implicit conversion of a ArraySegment<T> to a ExSpan<T> (定义 ArraySegment<T> 到 ExSpan<T> 的隐式转换) public static implicit operator ExSpan<T>(ArraySegment<T> segment) Parameters segment ArraySegment<T> Returns ExSpan<T> implicit operator ReadOnlyExSpan<T>(ExSpan<T>) Defines an implicit conversion of a ExSpan<T> to a ReadOnlyExSpan<T> (定义 ExSpan<T> 到 ReadOnlyExSpan<T> 的隐式转换). public static implicit operator ReadOnlyExSpan<T>(ExSpan<T> span) Parameters span ExSpan<T> The object to convert (要转换的对象). Returns ReadOnlyExSpan<T> implicit operator ExSpan<T>(Span<T>) Defines an implicit conversion of a Span<T> to a ExSpan<T> (定义 Span<T> 到 ExSpan<T> 的隐式转换). public static implicit operator ExSpan<T>(Span<T> span) Parameters span Span<T> The object to convert (要转换的对象). Returns ExSpan<T>"
  },
  "api/Zyl.ExSpans.ExSpan-1.op_Inequality.html": {
    "href": "api/Zyl.ExSpans.ExSpan-1.op_Inequality.html",
    "title": "Operator operator != | ExSpans",
    "summary": "Operator operator != Namespace Zyl.ExSpans Assembly ExSpans.Core.dll operator !=(ExSpan<T>, ExSpan<T>) Returns a value that indicates whether two ExSpan<T> instances are not equal (返回一个值，该值指示两个 ExSpan<T> 实例是否不相等). public static bool operator !=(ExSpan<T> left, ExSpan<T> right) Parameters left ExSpan<T> right ExSpan<T> Returns bool"
  },
  "api/Zyl.ExSpans.ExSpanExtensions.AsExSpan.html": {
    "href": "api/Zyl.ExSpans.ExSpanExtensions.AsExSpan.html",
    "title": "Method AsExSpan | ExSpans",
    "summary": "Method AsExSpan Namespace Zyl.ExSpans Assembly ExSpans.Core.dll AsExSpan(string?) Creates a new span over the target string (在目标字符串上创建新的跨度). public static ReadOnlyExSpan<char> AsExSpan(this string? text) Parameters text string The target string (目标字符串). Returns ReadOnlyExSpan<char> The span representation of the string (字符串的跨度表示形式). AsExSpan(string?, int, int) Creates a new span over the portion of the target string beginning at 'start' index and ending at 'end' index (exclusive) (在目标字符串中从“start”索引开始到“end”索引结束(不包括)的部分上创建一个新的跨度). [FakeCLSCompliant(false)] public static ReadOnlyExSpan<char> AsExSpan(this string? text, int start, int length) Parameters text string The target string (目标字符串). start int The index at which to begin the span (开始跨度处的索引). length int The number of items in the span (跨度中的项数). Returns ReadOnlyExSpan<char> The span representation of the string (字符串的跨度表示形式). Remarks Returns default when text is null. Exceptions ArrayTypeMismatchException Thrown when text is covariant and array's type is not exactly T[]. ArgumentOutOfRangeException Thrown when the specified start or end index is not in the range (<0 or >Length). AsExSpan(string?, int) Creates a new span over the target string (从指定位置开始到字符串的结尾，在目标字符串的一部分上创建一个新的跨度). [FakeCLSCompliant(false)] public static ReadOnlyExSpan<char> AsExSpan(this string? text, int start) Parameters text string The target string (目标字符串). start int The index at which to begin the span (开始跨度处的索引). Returns ReadOnlyExSpan<char> The span representation of the string (字符串的跨度表示形式). AsExSpan(string?, Index) Creates a new span over the portion of the target string defined by an Index value (在由 Index 值定义的目标字符串部分上创建新的跨度). public static ReadOnlyExSpan<char> AsExSpan(this string? text, Index startIndex) Parameters text string The target string (目标字符串). startIndex Index The starting index (起始索引). Returns ReadOnlyExSpan<char> The span representation of the string (字符串的跨度表示形式). Exceptions ArgumentNullException The array argument is null AsExSpan(string?, Range) Creates a new span over a portion of a target string defined by a Range value (在由 Range 值定义的目标字符串部分上创建新的跨度). public static ReadOnlyExSpan<char> AsExSpan(this string? text, Range range) Parameters text string The target string (目标字符串). range Range The range of the string to convert (要转换的字符串范围). Returns ReadOnlyExSpan<char> The span representation of the string (字符串的跨度表示形式). Exceptions ArgumentNullException The array argument is null AsExSpan<T>(ArraySegment<T>) Creates a new span over the target array segment (在目标数组段上创建新的跨度). public static ExSpan<T> AsExSpan<T>(this ArraySegment<T> segment) Parameters segment ArraySegment<T> The target array segment (目标数组段). Returns ExSpan<T> The span representation of the array segment (数组段的跨度表示形式). Type Parameters T The element type (元素的类型). AsExSpan<T>(ArraySegment<T>, int, int) Creates a new span over the portion of the target array segment beginning at 'start' index and ending at 'end' index (exclusive) (在目标数组段中从“start”索引开始到“end”索引结束(不包括)的部分上创建一个新的跨度). [FakeCLSCompliant(false)] public static ExSpan<T> AsExSpan<T>(this ArraySegment<T> segment, int start, int length) Parameters segment ArraySegment<T> The target array segment (目标数组段). start int The index at which to begin the span (开始跨度处的索引). length int The number of items in the span (跨度中的项数). Returns ExSpan<T> The span representation of the array segment (数组段的跨度表示形式). Type Parameters T The element type (元素的类型). Remarks Returns default when segment is null. Exceptions ArrayTypeMismatchException Thrown when segment is covariant and array's type is not exactly T[]. ArgumentOutOfRangeException Thrown when the specified start or end index is not in the range (<0 or >Length). AsExSpan<T>(ArraySegment<T>, int) Creates a new span over the target array segment (从指定位置开始到数组段的结尾，在目标数组段的一部分上创建一个新的跨度). [FakeCLSCompliant(false)] public static ExSpan<T> AsExSpan<T>(this ArraySegment<T> segment, int start) Parameters segment ArraySegment<T> The target array segment (目标数组段). start int The index at which to begin the span (开始跨度处的索引). Returns ExSpan<T> The span representation of the array segment (数组段的跨度表示形式). Type Parameters T The element type (元素的类型). AsExSpan<T>(ArraySegment<T>, Index) Creates a new span over the portion of the target array segment defined by an Index value (在由 Index 值定义的目标数组段部分上创建新的跨度). public static ExSpan<T> AsExSpan<T>(this ArraySegment<T> segment, Index startIndex) Parameters segment ArraySegment<T> The target array segment (目标数组段). startIndex Index The starting index (起始索引). Returns ExSpan<T> The span representation of the array segment (数组段的跨度表示形式). Type Parameters T The element type (元素的类型). Exceptions ArgumentNullException The array argument is null AsExSpan<T>(ArraySegment<T>, Range) Creates a new span over a portion of a target array segment defined by a Range value (在由 Range 值定义的目标数组段部分上创建新的跨度). public static ExSpan<T> AsExSpan<T>(this ArraySegment<T> segment, Range range) Parameters segment ArraySegment<T> The target array segment (目标数组段). range Range The range of the array segment to convert (要转换的数组段范围). Returns ExSpan<T> The span representation of the array segment (数组段的跨度表示形式). Type Parameters T The element type (元素的类型). Exceptions ArgumentNullException The array argument is null AsExSpan<T>(T[]?) Creates a new span over the target array (在目标数组上创建新的跨度). public static ExSpan<T> AsExSpan<T>(this T[]? array) Parameters array T[] The target array (目标数组). Returns ExSpan<T> The span representation of the array (数组的跨度表示形式). Type Parameters T The element type (元素的类型). AsExSpan<T>(T[]?, nint, nint) Creates a new span over the portion of the target array beginning at 'start' index and ending at 'end' index (exclusive) (在目标数组中从“start”索引开始到“end”索引结束(不包括)的部分上创建一个新的跨度). [FakeCLSCompliant(false)] public static ExSpan<T> AsExSpan<T>(this T[]? array, nint start, nint length) Parameters array T[] The target array (目标数组). start nint The index at which to begin the span (开始跨度处的索引). length nint The number of items in the span (跨度中的项数). Returns ExSpan<T> The span representation of the array (数组的跨度表示形式). Type Parameters T The element type (元素的类型). Remarks Returns default when array is null. Exceptions ArrayTypeMismatchException Thrown when array is covariant and array's type is not exactly T[]. ArgumentOutOfRangeException Thrown when the specified start or end index is not in the range (<0 or >Length). AsExSpan<T>(T[]?, nint) Creates a new span over the target array (从指定位置开始到数组的结尾，在目标数组的一部分上创建一个新的跨度). [FakeCLSCompliant(false)] public static ExSpan<T> AsExSpan<T>(this T[]? array, nint start) Parameters array T[] The target array (目标数组). start nint The index at which to begin the span (开始跨度处的索引). Returns ExSpan<T> The span representation of the array (数组的跨度表示形式). Type Parameters T The element type (元素的类型). AsExSpan<T>(T[]?, Index) Creates a new span over the portion of the target array defined by an Index value (在由 Index 值定义的目标数组部分上创建新的跨度). public static ExSpan<T> AsExSpan<T>(this T[]? array, Index startIndex) Parameters array T[] The target array (目标数组). startIndex Index The starting index (起始索引). Returns ExSpan<T> The span representation of the array (数组的跨度表示形式). Type Parameters T The element type (元素的类型). Exceptions ArgumentNullException The array argument is null AsExSpan<T>(T[]?, Range) Creates a new span over a portion of a target array defined by a Range value (在由 Range 值定义的目标数组部分上创建新的跨度). public static ExSpan<T> AsExSpan<T>(this T[]? array, Range range) Parameters array T[] The target array (目标数组). range Range The range of the array to convert (要转换的数组范围). Returns ExSpan<T> The span representation of the array (数组的跨度表示形式). Type Parameters T The element type (元素的类型). Exceptions ArgumentNullException The array argument is null AsExSpan<T>(Span<T>) An conversion of a Span<T> to a ExSpan<T> (Span<T> 到 ExSpan<T> 的转换). public static ExSpan<T> AsExSpan<T>(this Span<T> span) Parameters span Span<T> The object to convert (要转换的对象). Returns ExSpan<T> a ExSpan<T> Type Parameters T The element type (元素的类型)."
  },
  "api/Zyl.ExSpans.ExSpanExtensions.AsReadOnlyExSpan.html": {
    "href": "api/Zyl.ExSpans.ExSpanExtensions.AsReadOnlyExSpan.html",
    "title": "Method AsReadOnlyExSpan | ExSpans",
    "summary": "Method AsReadOnlyExSpan Namespace Zyl.ExSpans Assembly ExSpans.Core.dll AsReadOnlyExSpan<T>(ReadOnlySpan<T>) An conversion of a ReadOnlySpan<T> to a ReadOnlyExSpan<T> (ReadOnlySpan<T> 到 ReadOnlyExSpan<T> 的转换). public static ReadOnlyExSpan<T> AsReadOnlyExSpan<T>(this ReadOnlySpan<T> span) Parameters span ReadOnlySpan<T> The object to convert (要转换的对象). Returns ReadOnlyExSpan<T> a ReadOnlyExSpan<T> Type Parameters T The element type (元素的类型). AsReadOnlyExSpan<T>(ExSpan<T>) An conversion of a ExSpan<T> to a ReadOnlyExSpan<T> (ExSpan<T> 到 ReadOnlyExSpan<T> 的转换). public static ReadOnlyExSpan<T> AsReadOnlyExSpan<T>(this ExSpan<T> span) Parameters span ExSpan<T> The object to convert (要转换的对象). Returns ReadOnlyExSpan<T> a ReadOnlyExSpan<T> Type Parameters T The element type (元素的类型)."
  },
  "api/Zyl.ExSpans.ExSpanExtensions.AsReadOnlySpan.html": {
    "href": "api/Zyl.ExSpans.ExSpanExtensions.AsReadOnlySpan.html",
    "title": "Method AsReadOnlySpan | ExSpans",
    "summary": "Method AsReadOnlySpan Namespace Zyl.ExSpans Assembly ExSpans.Core.dll AsReadOnlySpan<T>(ReadOnlyExSpan<T>) An conversion of a ReadOnlyExSpan<T> to a ReadOnlySpan<T>. The length will saturating limited to the maximum length it supports (ReadOnlyExSpan<T> 到 ReadOnlySpan<T> 的转换. 长度会饱和限制为它所支持的最大长度). public static ReadOnlySpan<T> AsReadOnlySpan<T>(this ReadOnlyExSpan<T> span) Parameters span ReadOnlyExSpan<T> The object to convert (要转换的对象). Returns ReadOnlySpan<T> a ReadOnlySpan<T> Type Parameters T The element type (元素的类型). See Also GetSpanSaturatingLength(nint) LastAsReadOnlySpan<T>(ReadOnlyExSpan<T>) AsReadOnlySpan<T>(ReadOnlyExSpan<T>, nint) An conversion of a ReadOnlyExSpan<T> to a ReadOnlySpan<T>, beginning at 'start'. The length will saturating limited to the maximum length it supports (ReadOnlyExSpan<T> 到 ReadOnlySpan<T> 的转换, 从指定索引处开始. 长度会饱和限制为它所支持的最大长度). [FakeCLSCompliant(false)] public static ReadOnlySpan<T> AsReadOnlySpan<T>(this ReadOnlyExSpan<T> span, nint start) Parameters span ReadOnlyExSpan<T> The object to convert (要转换的对象). start nint The zero-based index at which to begin this slice (从零开始的切片索引). Returns ReadOnlySpan<T> a ReadOnlySpan<T> Type Parameters T The element type (元素的类型). See Also GetSpanSaturatingLength(nint) AsReadOnlySpan<T>(ReadOnlyExSpan<T>, nint, int) An conversion of a ReadOnlyExSpan<T> to a ReadOnlySpan<T>, beginning at 'start', of given length (ReadOnlyExSpan<T> 到 ReadOnlySpan<T> 的转换, 从指定索引处开始, 且使用指定长度). [FakeCLSCompliant(false)] public static ReadOnlySpan<T> AsReadOnlySpan<T>(this ReadOnlyExSpan<T> span, nint start, int length) Parameters span ReadOnlyExSpan<T> The object to convert (要转换的对象). start nint The zero-based index at which to begin this slice (从零开始的切片索引). length int Returns ReadOnlySpan<T> a ReadOnlySpan<T> Type Parameters T The element type (元素的类型). See Also LastAsReadOnlySpan<T>(ReadOnlyExSpan<T>, nint, int)"
  },
  "api/Zyl.ExSpans.ExSpanExtensions.AsSpan.html": {
    "href": "api/Zyl.ExSpans.ExSpanExtensions.AsSpan.html",
    "title": "Method AsSpan | ExSpans",
    "summary": "Method AsSpan Namespace Zyl.ExSpans Assembly ExSpans.Core.dll AsSpan<T>(ExSpan<T>) An conversion of a ExSpan<T> to a Span<T>. The length will saturating limited to the maximum length it supports (ExSpan<T> 到 Span<T> 的转换. 长度会饱和限制为它所支持的最大长度). public static Span<T> AsSpan<T>(this ExSpan<T> span) Parameters span ExSpan<T> The object to convert (要转换的对象). Returns Span<T> a Span<T> Type Parameters T The element type (元素的类型). See Also GetSpanSaturatingLength(nint) LastAsSpan<T>(ExSpan<T>) AsSpan<T>(ExSpan<T>, nint) An conversion of a ExSpan<T> to a Span<T>, beginning at 'start'. The length will saturating limited to the maximum length it supports (ExSpan<T> 到 Span<T> 的转换, 从指定索引处开始. 长度会饱和限制为它所支持的最大长度). [FakeCLSCompliant(false)] public static Span<T> AsSpan<T>(this ExSpan<T> span, nint start) Parameters span ExSpan<T> The object to convert (要转换的对象). start nint The zero-based index at which to begin this slice (从零开始的切片索引). Returns Span<T> a Span<T> Type Parameters T The element type (元素的类型). See Also GetSpanSaturatingLength(nint) AsSpan<T>(ExSpan<T>, nint, int) An conversion of a ExSpan<T> to a Span<T>, beginning at 'start', of given length (ExSpan<T> 到 Span<T> 的转换, 从指定索引处开始, 且使用指定长度). [FakeCLSCompliant(false)] public static Span<T> AsSpan<T>(this ExSpan<T> span, nint start, int length) Parameters span ExSpan<T> The object to convert (要转换的对象). start nint The zero-based index at which to begin this slice (从零开始的切片索引). length int Returns Span<T> a Span<T> Type Parameters T The element type (元素的类型). See Also LastAsSpan<T>(ExSpan<T>, nint, int)"
  },
  "api/Zyl.ExSpans.ExSpanExtensions.CopyTo.html": {
    "href": "api/Zyl.ExSpans.ExSpanExtensions.CopyTo.html",
    "title": "Method CopyTo | ExSpans",
    "summary": "Method CopyTo Namespace Zyl.ExSpans Assembly ExSpans.Core.dll CopyTo<T>(T[]?, ExSpan<T>) Copies the contents of the array into the span. If the source and destinations overlap, this method behaves as if the original values in a temporary location before the destination is overwritten. (将数组的内容复制到跨度中. 如果源和目标重叠, 则此方法的行为就像覆盖目标之前临时位置中的原始值一样). public static void CopyTo<T>(this T[]? source, ExSpan<T> destination) Parameters source T[] The array to copy items from (要从中复制项的数组). destination ExSpan<T> The span to copy items into (要将项复制到的跨度). Type Parameters T The element type (元素的类型). Exceptions ArgumentException Thrown when the destination Span is shorter than the source array."
  },
  "api/Zyl.ExSpans.ExSpanExtensions.IsEmpty.html": {
    "href": "api/Zyl.ExSpans.ExSpanExtensions.IsEmpty.html",
    "title": "Method IsEmpty | ExSpans",
    "summary": "Method IsEmpty Namespace Zyl.ExSpans Assembly ExSpans.Core.dll IsEmpty(IExLength) Gets a value indicating whether this object is empty (返回一个值，该值指示当前源对象为空). [FakeCLSCompliant(false)] public static bool IsEmpty(this IExLength source) Parameters source IExLength Source object (源对象). Returns bool true if this object is empty; otherwise, false (当前对象为空时为 true; 否则为 false)."
  },
  "api/Zyl.ExSpans.ExSpanExtensions.ItemsAppendString.html": {
    "href": "api/Zyl.ExSpans.ExSpanExtensions.ItemsAppendString.html",
    "title": "Method ItemsAppendString | ExSpans",
    "summary": "Method ItemsAppendString Namespace Zyl.ExSpans Assembly ExSpans.Core.dll ItemsAppendString<T>(ReadOnlyExSpan<T>, StringBuilder, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) Convert items data append string. The headerLength parameter uses the value of SpanViewLength (将各项数据转追加字符串. headerLength 参数使用 SpanViewLength 的值). [FakeCLSCompliant(false)] public static void ItemsAppendString<T>(this ReadOnlyExSpan<T> source, StringBuilder output, Func<nint, T, string>? itemFormater = null, ItemsToStringFlags stringFlags = ItemsToStringFlags.Default, TypeNameFlags nameFlags = TypeNameFlags.Default) Parameters source ReadOnlyExSpan<T> The source data (源数据). output StringBuilder The output StringBuilder (输出的 StringBuilder). itemFormater Func<nint, T, string> The formater of each item (各项的格式化器). Default value is ItemFormaters.Default. Prototype is string func(TSize index, T value). stringFlags ItemsToStringFlags Flags for convert items data into string (各项数据转字符串的标志). nameFlags TypeNameFlags Flags for type name (类型名的标志). Type Parameters T The element type (元素的类型). See Also ItemFormaters ItemsAppendString<T>(ReadOnlyExSpan<T>, StringBuilder, nint, nint, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) Convert items data append string. It has the headerLength, footerLength parameter (将各项数据追加字符串. 它具有 headerLength, footerLength 参数). [FakeCLSCompliant(false)] public static void ItemsAppendString<T>(this ReadOnlyExSpan<T> source, StringBuilder output, nint headerLength, nint footerLength = 0, Func<nint, T, string>? itemFormater = null, ItemsToStringFlags stringFlags = ItemsToStringFlags.Default, TypeNameFlags nameFlags = TypeNameFlags.Default) Parameters source ReadOnlyExSpan<T> The source data (源数据). output StringBuilder The output StringBuilder (输出的 StringBuilder). headerLength nint The max length of header data (头部的最大长度). footerLength nint The max length of footer data (尾部的最大长度). itemFormater Func<nint, T, string> The formater of each item (各项的格式化器). Default value is ItemFormaters.Default. Prototype is string func(TSize index, T value). stringFlags ItemsToStringFlags Flags for convert items data into string (各项数据转字符串的标志). nameFlags TypeNameFlags Flags for type name (类型名的标志). Type Parameters T The element type (元素的类型). See Also ItemFormaters ItemsAppendString<T>(ExSpan<T>, StringBuilder, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) Convert items data append string. The headerLength parameter uses the value of SpanViewLength (将各项数据转追加字符串. headerLength 参数使用 SpanViewLength 的值). [FakeCLSCompliant(false)] public static void ItemsAppendString<T>(this ExSpan<T> source, StringBuilder output, Func<nint, T, string>? itemFormater = null, ItemsToStringFlags stringFlags = ItemsToStringFlags.Default, TypeNameFlags nameFlags = TypeNameFlags.Default) Parameters source ExSpan<T> The source data (源数据). output StringBuilder The output StringBuilder (输出的 StringBuilder). itemFormater Func<nint, T, string> The formater of each item (各项的格式化器). Default value is ItemFormaters.Default. Prototype is string func(TSize index, T value). stringFlags ItemsToStringFlags Flags for convert items data into string (各项数据转字符串的标志). nameFlags TypeNameFlags Flags for type name (类型名的标志). Type Parameters T The element type (元素的类型). See Also ItemFormaters ItemsAppendString<T>(ExSpan<T>, StringBuilder, nint, nint, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) Convert items data append string. It has the headerLength, footerLength parameter (将各项数据追加字符串. 它具有 headerLength, footerLength 参数). [FakeCLSCompliant(false)] public static void ItemsAppendString<T>(this ExSpan<T> source, StringBuilder output, nint headerLength, nint footerLength = 0, Func<nint, T, string>? itemFormater = null, ItemsToStringFlags stringFlags = ItemsToStringFlags.Default, TypeNameFlags nameFlags = TypeNameFlags.Default) Parameters source ExSpan<T> The source data (源数据). output StringBuilder The output StringBuilder (输出的 StringBuilder). headerLength nint The max length of header data (头部的最大长度). footerLength nint The max length of footer data (尾部的最大长度). itemFormater Func<nint, T, string> The formater of each item (各项的格式化器). Default value is ItemFormaters.Default. Prototype is string func(TSize index, T value). stringFlags ItemsToStringFlags Flags for convert items data into string (各项数据转字符串的标志). nameFlags TypeNameFlags Flags for type name (类型名的标志). Type Parameters T The element type (元素的类型). See Also ItemFormaters ItemsAppendString<T, TSpan>(TSpan, in T, StringBuilder, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) Convert items data append string. The headerLength parameter uses the value of SpanViewLength (将各项数据转追加字符串. headerLength 参数使用 SpanViewLength 的值). [FakeCLSCompliant(false)] public static void ItemsAppendString<T, TSpan>(this TSpan source, in T typeSample, StringBuilder output, Func<nint, T, string>? itemFormater = null, ItemsToStringFlags stringFlags = ItemsToStringFlags.Default, TypeNameFlags nameFlags = TypeNameFlags.Default) where TSpan : IReadOnlyExSpanBase<T> Parameters source TSpan The source data (源数据). typeSample T Sample of type. Only its type is referenced, not its data. (类型的样例. 仅参考它的类型，不使用它的数据). output StringBuilder The output StringBuilder (输出的 StringBuilder). itemFormater Func<nint, T, string> The formater of each item (各项的格式化器). Default value is ItemFormaters.Default. Prototype is string func(TSize index, T value). stringFlags ItemsToStringFlags Flags for convert items data into string (各项数据转字符串的标志). nameFlags TypeNameFlags Flags for type name (类型名的标志). Type Parameters T The element type (元素的类型). TSpan The type of span (跨度的类型). ItemsAppendString<T, TSpan>(TSpan, in T, StringBuilder, nint, nint, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) Convert items data append string. It has the headerLength, footerLength parameter (将各项数据追加字符串. 它具有 headerLength, footerLength 参数). [FakeCLSCompliant(false)] public static void ItemsAppendString<T, TSpan>(this TSpan source, in T typeSample, StringBuilder output, nint headerLength, nint footerLength = 0, Func<nint, T, string>? itemFormater = null, ItemsToStringFlags stringFlags = ItemsToStringFlags.Default, TypeNameFlags nameFlags = TypeNameFlags.Default) where TSpan : IReadOnlyExSpanBase<T> Parameters source TSpan The source data (源数据). typeSample T Sample of type. Only its type is referenced, not its data. (类型的样例. 仅参考它的类型，不使用它的数据). output StringBuilder The output StringBuilder (输出的 StringBuilder). headerLength nint The max length of header data (头部的最大长度). footerLength nint The max length of footer data (尾部的最大长度). itemFormater Func<nint, T, string> The formater of each item (各项的格式化器). Default value is ItemFormaters.Default. Prototype is string func(TSize index, T value). stringFlags ItemsToStringFlags Flags for convert items data into string (各项数据转字符串的标志). nameFlags TypeNameFlags Flags for type name (类型名的标志). Type Parameters T The element type (元素的类型). TSpan The type of span (跨度的类型). See Also ItemFormaters"
  },
  "api/Zyl.ExSpans.ExSpanExtensions.ItemsAppendStringTo.html": {
    "href": "api/Zyl.ExSpans.ExSpanExtensions.ItemsAppendStringTo.html",
    "title": "Method ItemsAppendStringTo | ExSpans",
    "summary": "Method ItemsAppendStringTo Namespace Zyl.ExSpans Assembly ExSpans.Core.dll ItemsAppendStringTo<T>(ReadOnlyExSpan<T>, Action<string>, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) Convert items data append string to action. The headerLength parameter uses the value of SpanViewLength (将各项数据转追加字符串到动作. headerLength 参数使用 SpanViewLength 的值). [FakeCLSCompliant(false)] public static void ItemsAppendStringTo<T>(this ReadOnlyExSpan<T> source, Action<string> output, Func<nint, T, string>? itemFormater = null, ItemsToStringFlags stringFlags = ItemsToStringFlags.Default, TypeNameFlags nameFlags = TypeNameFlags.Default) Parameters source ReadOnlyExSpan<T> The source data (源数据). output Action<string> The output action (输出动作). itemFormater Func<nint, T, string> The formater of each item (各项的格式化器). Default value is ItemFormaters.Default. Prototype is string func(TSize index, T value). stringFlags ItemsToStringFlags Flags for convert items data into string (各项数据转字符串的标志). nameFlags TypeNameFlags Flags for type name (类型名的标志). Type Parameters T The element type (元素的类型). See Also ItemFormaters ItemsAppendStringTo<T>(ReadOnlyExSpan<T>, Action<string>, nint, nint, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) Convert items data append string to action. It has the headerLength, footerLength parameter (将各项数据转追加字符串到动作. 它具有 headerLength, footerLength 参数). [FakeCLSCompliant(false)] public static void ItemsAppendStringTo<T>(this ReadOnlyExSpan<T> source, Action<string> output, nint headerLength, nint footerLength = 0, Func<nint, T, string>? itemFormater = null, ItemsToStringFlags stringFlags = ItemsToStringFlags.Default, TypeNameFlags nameFlags = TypeNameFlags.Default) Parameters source ReadOnlyExSpan<T> The source data (源数据). output Action<string> The output action (输出动作). headerLength nint The max length of header data (头部的最大长度). footerLength nint The max length of footer data (尾部的最大长度). itemFormater Func<nint, T, string> The formater of each item (各项的格式化器). Default value is ItemFormaters.Default. Prototype is string func(TSize index, T value). stringFlags ItemsToStringFlags Flags for convert items data into string (各项数据转字符串的标志). nameFlags TypeNameFlags Flags for type name (类型名的标志). Type Parameters T The element type (元素的类型). See Also ItemFormaters ItemsAppendStringTo<T>(ExSpan<T>, Action<string>, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) Convert items data append string to action. The headerLength parameter uses the value of SpanViewLength (将各项数据转追加字符串到动作. headerLength 参数使用 SpanViewLength 的值). [FakeCLSCompliant(false)] public static void ItemsAppendStringTo<T>(this ExSpan<T> source, Action<string> output, Func<nint, T, string>? itemFormater = null, ItemsToStringFlags stringFlags = ItemsToStringFlags.Default, TypeNameFlags nameFlags = TypeNameFlags.Default) Parameters source ExSpan<T> The source data (源数据). output Action<string> The output action (输出动作). itemFormater Func<nint, T, string> The formater of each item (各项的格式化器). Default value is ItemFormaters.Default. Prototype is string func(TSize index, T value). stringFlags ItemsToStringFlags Flags for convert items data into string (各项数据转字符串的标志). nameFlags TypeNameFlags Flags for type name (类型名的标志). Type Parameters T The element type (元素的类型). See Also ItemFormaters ItemsAppendStringTo<T>(ExSpan<T>, Action<string>, nint, nint, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) Convert items data append string to action. It has the headerLength, footerLength parameter (将各项数据转追加字符串到动作. 它具有 headerLength, footerLength 参数). [FakeCLSCompliant(false)] public static void ItemsAppendStringTo<T>(this ExSpan<T> source, Action<string> output, nint headerLength, nint footerLength = 0, Func<nint, T, string>? itemFormater = null, ItemsToStringFlags stringFlags = ItemsToStringFlags.Default, TypeNameFlags nameFlags = TypeNameFlags.Default) Parameters source ExSpan<T> The source data (源数据). output Action<string> The output action (输出动作). headerLength nint The max length of header data (头部的最大长度). footerLength nint The max length of footer data (尾部的最大长度). itemFormater Func<nint, T, string> The formater of each item (各项的格式化器). Default value is ItemFormaters.Default. Prototype is string func(TSize index, T value). stringFlags ItemsToStringFlags Flags for convert items data into string (各项数据转字符串的标志). nameFlags TypeNameFlags Flags for type name (类型名的标志). Type Parameters T The element type (元素的类型). See Also ItemFormaters ItemsAppendStringTo<T, TSpan>(TSpan, in T, Action<string>, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) Convert items data append string to action. The headerLength parameter uses the value of SpanViewLength (将各项数据转追加字符串到动作. headerLength 参数使用 SpanViewLength 的值). [FakeCLSCompliant(false)] public static void ItemsAppendStringTo<T, TSpan>(this TSpan source, in T typeSample, Action<string> output, Func<nint, T, string>? itemFormater = null, ItemsToStringFlags stringFlags = ItemsToStringFlags.Default, TypeNameFlags nameFlags = TypeNameFlags.Default) where TSpan : IReadOnlyExSpanBase<T> Parameters source TSpan The source data (源数据). typeSample T Sample of type. Only its type is referenced, not its data. (类型的样例. 仅参考它的类型，不使用它的数据). output Action<string> The output action (输出动作). itemFormater Func<nint, T, string> The formater of each item (各项的格式化器). Default value is ItemFormaters.Default. Prototype is string func(TSize index, T value). stringFlags ItemsToStringFlags Flags for convert items data into string (各项数据转字符串的标志). nameFlags TypeNameFlags Flags for type name (类型名的标志). Type Parameters T The element type (元素的类型). TSpan The type of span (跨度的类型). ItemsAppendStringTo<T, TSpan>(TSpan, in T, Action<string>, nint, nint, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) Convert items data append string to action. It has the headerLength, footerLength parameter (将各项数据转追加字符串到动作. 它具有 headerLength, footerLength 参数). [FakeCLSCompliant(false)] public static void ItemsAppendStringTo<T, TSpan>(this TSpan source, in T typeSample, Action<string> output, nint headerLength, nint footerLength = 0, Func<nint, T, string>? itemFormater = null, ItemsToStringFlags stringFlags = ItemsToStringFlags.Default, TypeNameFlags nameFlags = TypeNameFlags.Default) where TSpan : IReadOnlyExSpanBase<T> Parameters source TSpan The source data (源数据). typeSample T Sample of type. Only its type is referenced, not its data. (类型的样例. 仅参考它的类型，不使用它的数据). output Action<string> The output action (输出动作). headerLength nint The max length of header data (头部的最大长度). footerLength nint The max length of footer data (尾部的最大长度). itemFormater Func<nint, T, string> The formater of each item (各项的格式化器). Default value is ItemFormaters.Default. Prototype is string func(TSize index, T value). stringFlags ItemsToStringFlags Flags for convert items data into string (各项数据转字符串的标志). nameFlags TypeNameFlags Flags for type name (类型名的标志). Type Parameters T The element type (元素的类型). TSpan The type of span (跨度的类型). See Also ItemFormaters"
  },
  "api/Zyl.ExSpans.ExSpanExtensions.ItemsToString.html": {
    "href": "api/Zyl.ExSpans.ExSpanExtensions.ItemsToString.html",
    "title": "Method ItemsToString | ExSpans",
    "summary": "Method ItemsToString Namespace Zyl.ExSpans Assembly ExSpans.Core.dll ItemsToString<T>(ReadOnlyExSpan<T>, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) Convert items data into string. The headerLength parameter uses the value of SpanViewLength (将各项数据转为字符串. headerLength 参数使用 SpanViewLength 的值). [FakeCLSCompliant(false)] public static string ItemsToString<T>(this ReadOnlyExSpan<T> source, Func<nint, T, string>? itemFormater = null, ItemsToStringFlags stringFlags = ItemsToStringFlags.Default, TypeNameFlags nameFlags = TypeNameFlags.Default) Parameters source ReadOnlyExSpan<T> The source data (源数据). itemFormater Func<nint, T, string> The formater of each item (各项的格式化器). Default value is ItemFormaters.Default. Prototype is string func(TSize index, T value). stringFlags ItemsToStringFlags Flags for convert items data into string (各项数据转字符串的标志). nameFlags TypeNameFlags Flags for type name (类型名的标志). Returns string A formatted string (格式化后的字符串). Type Parameters T The element type (元素的类型). See Also ItemFormaters ItemsToString<T>(ReadOnlyExSpan<T>, nint, nint, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) Convert items data into string. It has the headerLength, footerLength parameter (将各项数据转为字符串. 它具有 headerLength, footerLength 参数). [FakeCLSCompliant(false)] public static string ItemsToString<T>(this ReadOnlyExSpan<T> source, nint headerLength, nint footerLength = 0, Func<nint, T, string>? itemFormater = null, ItemsToStringFlags stringFlags = ItemsToStringFlags.Default, TypeNameFlags nameFlags = TypeNameFlags.Default) Parameters source ReadOnlyExSpan<T> The source data (源数据). headerLength nint The max length of header data (头部的最大长度). footerLength nint The max length of footer data (尾部的最大长度). itemFormater Func<nint, T, string> The formater of each item (各项的格式化器). Default value is ItemFormaters.Default. Prototype is string func(TSize index, T value). stringFlags ItemsToStringFlags Flags for convert items data into string (各项数据转字符串的标志). nameFlags TypeNameFlags Flags for type name (类型名的标志). Returns string A formatted string (格式化后的字符串). Type Parameters T The element type (元素的类型). See Also ItemFormaters ItemsToString<T>(ExSpan<T>, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) Convert items data into string. The headerLength parameter uses the value of SpanViewLength (将各项数据转为字符串. headerLength 参数使用 SpanViewLength 的值). [FakeCLSCompliant(false)] public static string ItemsToString<T>(this ExSpan<T> source, Func<nint, T, string>? itemFormater = null, ItemsToStringFlags stringFlags = ItemsToStringFlags.Default, TypeNameFlags nameFlags = TypeNameFlags.Default) Parameters source ExSpan<T> The source data (源数据). itemFormater Func<nint, T, string> The formater of each item (各项的格式化器). Default value is ItemFormaters.Default. Prototype is string func(TSize index, T value). stringFlags ItemsToStringFlags Flags for convert items data into string (各项数据转字符串的标志). nameFlags TypeNameFlags Flags for type name (类型名的标志). Returns string A formatted string (格式化后的字符串). Type Parameters T The element type (元素的类型). See Also ItemFormaters ItemsToString<T>(ExSpan<T>, nint, nint, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) Convert items data into string. It has the headerLength, footerLength parameter (将各项数据转为字符串. 它具有 headerLength, footerLength 参数). [FakeCLSCompliant(false)] public static string ItemsToString<T>(this ExSpan<T> source, nint headerLength, nint footerLength = 0, Func<nint, T, string>? itemFormater = null, ItemsToStringFlags stringFlags = ItemsToStringFlags.Default, TypeNameFlags nameFlags = TypeNameFlags.Default) Parameters source ExSpan<T> The source data (源数据). headerLength nint The max length of header data (头部的最大长度). footerLength nint The max length of footer data (尾部的最大长度). itemFormater Func<nint, T, string> The formater of each item (各项的格式化器). Default value is ItemFormaters.Default. Prototype is string func(TSize index, T value). stringFlags ItemsToStringFlags Flags for convert items data into string (各项数据转字符串的标志). nameFlags TypeNameFlags Flags for type name (类型名的标志). Returns string A formatted string (格式化后的字符串). Type Parameters T The element type (元素的类型). See Also ItemFormaters ItemsToString<T, TSpan>(TSpan, in T, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) Convert items data into string. It has the typeSample parameter. The headerLength parameter uses the value of SpanViewLength (将各项数据转为字符串. 它具有 typeSample 参数. headerLength 参数使用 SpanViewLength 的值). [FakeCLSCompliant(false)] public static string ItemsToString<T, TSpan>(this TSpan source, in T typeSample, Func<nint, T, string>? itemFormater = null, ItemsToStringFlags stringFlags = ItemsToStringFlags.Default, TypeNameFlags nameFlags = TypeNameFlags.Default) where TSpan : IReadOnlyExSpanBase<T> Parameters source TSpan The source data (源数据). typeSample T Sample of type. Only its type is referenced, not its data. (类型的样例. 仅参考它的类型，不使用它的数据). itemFormater Func<nint, T, string> The formater of each item (各项的格式化器). Default value is ItemFormaters.Default. Prototype is string func(TSize index, T value). stringFlags ItemsToStringFlags Flags for convert items data into string (各项数据转字符串的标志). nameFlags TypeNameFlags Flags for type name (类型名的标志). Returns string A formatted string (格式化后的字符串). Type Parameters T The element type (元素的类型). TSpan The type of span (跨度的类型). See Also ItemFormaters ItemsToString<T, TSpan>(TSpan, in T, nint, nint, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) Convert items data into string. It has the typeSample, headerLength, footerLength parameter (将各项数据转为字符串. 它具有 typeSample, headerLength, footerLength 参数). [FakeCLSCompliant(false)] public static string ItemsToString<T, TSpan>(this TSpan source, in T typeSample, nint headerLength, nint footerLength = 0, Func<nint, T, string>? itemFormater = null, ItemsToStringFlags stringFlags = ItemsToStringFlags.Default, TypeNameFlags nameFlags = TypeNameFlags.Default) where TSpan : IReadOnlyExSpanBase<T> Parameters source TSpan The source data (源数据). typeSample T Sample of type. Only its type is referenced, not its data. (类型的样例. 仅参考它的类型，不使用它的数据). headerLength nint The max length of header data (头部的最大长度). footerLength nint The max length of footer data (尾部的最大长度). itemFormater Func<nint, T, string> The formater of each item (各项的格式化器). Default value is ItemFormaters.Default. Prototype is string func(TSize index, T value). stringFlags ItemsToStringFlags Flags for convert items data into string (各项数据转字符串的标志). nameFlags TypeNameFlags Flags for type name (类型名的标志). Returns string A formatted string (格式化后的字符串). Type Parameters T The element type (元素的类型). TSpan The type of span (跨度的类型). See Also ItemFormaters"
  },
  "api/Zyl.ExSpans.ExSpanExtensions.LastAsReadOnlySpan.html": {
    "href": "api/Zyl.ExSpans.ExSpanExtensions.LastAsReadOnlySpan.html",
    "title": "Method LastAsReadOnlySpan | ExSpans",
    "summary": "Method LastAsReadOnlySpan Namespace Zyl.ExSpans Assembly ExSpans.Core.dll LastAsReadOnlySpan<T>(ReadOnlyExSpan<T>) An conversion of a ReadOnlyExSpan<T> to a ReadOnlySpan<T>, last beginning at end. The length will saturating limited to the maximum length it supports (ReadOnlyExSpan<T> 到 ReadOnlySpan<T> 的转换, 从尾部索引处开始. 长度会饱和限制为它所支持的最大长度). public static ReadOnlySpan<T> LastAsReadOnlySpan<T>(this ReadOnlyExSpan<T> span) Parameters span ReadOnlyExSpan<T> The object to convert (要转换的对象). Returns ReadOnlySpan<T> a ReadOnlySpan<T> Type Parameters T The element type (元素的类型). See Also GetSpanSaturatingLength(nint) AsReadOnlySpan<T>(ReadOnlyExSpan<T>) LastAsReadOnlySpan<T>(ReadOnlyExSpan<T>, nint, int) An conversion of a ReadOnlyExSpan<T> to a ReadOnlySpan<T>, last beginning at 'end', of given length (ReadOnlyExSpan<T> 到 ReadOnlySpan<T> 的转换, 从尾部指定索引处开始, 且使用指定长度). [FakeCLSCompliant(false)] public static ReadOnlySpan<T> LastAsReadOnlySpan<T>(this ReadOnlyExSpan<T> span, nint end, int length) Parameters span ReadOnlyExSpan<T> The object to convert (要转换的对象). end nint The zero-based index at which to begin this slice (从零开始的切片尾部索引). length int Returns ReadOnlySpan<T> a ReadOnlySpan<T> Type Parameters T The element type (元素的类型). See Also AsReadOnlySpan<T>(ReadOnlyExSpan<T>, nint, int)"
  },
  "api/Zyl.ExSpans.ExSpanExtensions.LastAsSpan.html": {
    "href": "api/Zyl.ExSpans.ExSpanExtensions.LastAsSpan.html",
    "title": "Method LastAsSpan | ExSpans",
    "summary": "Method LastAsSpan Namespace Zyl.ExSpans Assembly ExSpans.Core.dll LastAsSpan<T>(ExSpan<T>) An conversion of a ExSpan<T> to a Span<T>, last beginning at end. The length will saturating limited to the maximum length it supports (ExSpan<T> 到 Span<T> 的转换, 从尾部索引处开始. 长度会饱和限制为它所支持的最大长度). public static Span<T> LastAsSpan<T>(this ExSpan<T> span) Parameters span ExSpan<T> The object to convert (要转换的对象). Returns Span<T> a Span<T> Type Parameters T The element type (元素的类型). See Also GetSpanSaturatingLength(nint) AsSpan<T>(ExSpan<T>) LastAsSpan<T>(ExSpan<T>, nint, int) An conversion of a ExSpan<T> to a Span<T>, last beginning at 'end', of given length (ExSpan<T> 到 Span<T> 的转换, 从尾部指定索引处开始, 且使用指定长度). [FakeCLSCompliant(false)] public static Span<T> LastAsSpan<T>(this ExSpan<T> span, nint end, int length) Parameters span ExSpan<T> The object to convert (要转换的对象). end nint The zero-based index at which to begin this slice (从零开始的切片尾部索引). length int Returns Span<T> a Span<T> Type Parameters T The element type (元素的类型). See Also AsSpan<T>(ExSpan<T>, nint, int)"
  },
  "api/Zyl.ExSpans.ExSpanExtensions.html": {
    "href": "api/Zyl.ExSpans.ExSpanExtensions.html",
    "title": "Class ExSpanExtensions | ExSpans",
    "summary": "Class ExSpanExtensions Namespace Zyl.ExSpans Assembly ExSpans.Core.dll Provides commonly used extension methods for the span-related types, such as ExSpan<T> and ReadOnlyExSpan<T> (提供跨度相关的类型的常用的扩展方法，例如 ExSpan<T> 和 ReadOnlyExSpan<T>). public static class ExSpanExtensions Inheritance object ExSpanExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AsExSpan(string?) Creates a new span over the target string (在目标字符串上创建新的跨度). AsExSpan(string?, Index) Creates a new span over the portion of the target string defined by an Index value (在由 Index 值定义的目标字符串部分上创建新的跨度). AsExSpan(string?, int) Creates a new span over the target string (从指定位置开始到字符串的结尾，在目标字符串的一部分上创建一个新的跨度). AsExSpan(string?, int, int) Creates a new span over the portion of the target string beginning at 'start' index and ending at 'end' index (exclusive) (在目标字符串中从“start”索引开始到“end”索引结束(不包括)的部分上创建一个新的跨度). AsExSpan(string?, Range) Creates a new span over a portion of a target string defined by a Range value (在由 Range 值定义的目标字符串部分上创建新的跨度). AsExSpan<T>(ArraySegment<T>) Creates a new span over the target array segment (在目标数组段上创建新的跨度). AsExSpan<T>(ArraySegment<T>, Index) Creates a new span over the portion of the target array segment defined by an Index value (在由 Index 值定义的目标数组段部分上创建新的跨度). AsExSpan<T>(ArraySegment<T>, int) Creates a new span over the target array segment (从指定位置开始到数组段的结尾，在目标数组段的一部分上创建一个新的跨度). AsExSpan<T>(ArraySegment<T>, int, int) Creates a new span over the portion of the target array segment beginning at 'start' index and ending at 'end' index (exclusive) (在目标数组段中从“start”索引开始到“end”索引结束(不包括)的部分上创建一个新的跨度). AsExSpan<T>(ArraySegment<T>, Range) Creates a new span over a portion of a target array segment defined by a Range value (在由 Range 值定义的目标数组段部分上创建新的跨度). AsExSpan<T>(Span<T>) An conversion of a Span<T> to a ExSpan<T> (Span<T> 到 ExSpan<T> 的转换). AsExSpan<T>(T[]?) Creates a new span over the target array (在目标数组上创建新的跨度). AsExSpan<T>(T[]?, Index) Creates a new span over the portion of the target array defined by an Index value (在由 Index 值定义的目标数组部分上创建新的跨度). AsExSpan<T>(T[]?, nint) Creates a new span over the target array (从指定位置开始到数组的结尾，在目标数组的一部分上创建一个新的跨度). AsExSpan<T>(T[]?, nint, nint) Creates a new span over the portion of the target array beginning at 'start' index and ending at 'end' index (exclusive) (在目标数组中从“start”索引开始到“end”索引结束(不包括)的部分上创建一个新的跨度). AsExSpan<T>(T[]?, Range) Creates a new span over a portion of a target array defined by a Range value (在由 Range 值定义的目标数组部分上创建新的跨度). AsReadOnlyExSpan<T>(ReadOnlySpan<T>) An conversion of a ReadOnlySpan<T> to a ReadOnlyExSpan<T> (ReadOnlySpan<T> 到 ReadOnlyExSpan<T> 的转换). AsReadOnlyExSpan<T>(ExSpan<T>) An conversion of a ExSpan<T> to a ReadOnlyExSpan<T> (ExSpan<T> 到 ReadOnlyExSpan<T> 的转换). AsReadOnlySpan<T>(ReadOnlyExSpan<T>) An conversion of a ReadOnlyExSpan<T> to a ReadOnlySpan<T>. The length will saturating limited to the maximum length it supports (ReadOnlyExSpan<T> 到 ReadOnlySpan<T> 的转换. 长度会饱和限制为它所支持的最大长度). AsReadOnlySpan<T>(ReadOnlyExSpan<T>, nint) An conversion of a ReadOnlyExSpan<T> to a ReadOnlySpan<T>, beginning at 'start'. The length will saturating limited to the maximum length it supports (ReadOnlyExSpan<T> 到 ReadOnlySpan<T> 的转换, 从指定索引处开始. 长度会饱和限制为它所支持的最大长度). AsReadOnlySpan<T>(ReadOnlyExSpan<T>, nint, int) An conversion of a ReadOnlyExSpan<T> to a ReadOnlySpan<T>, beginning at 'start', of given length (ReadOnlyExSpan<T> 到 ReadOnlySpan<T> 的转换, 从指定索引处开始, 且使用指定长度). AsSpan<T>(ExSpan<T>) An conversion of a ExSpan<T> to a Span<T>. The length will saturating limited to the maximum length it supports (ExSpan<T> 到 Span<T> 的转换. 长度会饱和限制为它所支持的最大长度). AsSpan<T>(ExSpan<T>, nint) An conversion of a ExSpan<T> to a Span<T>, beginning at 'start'. The length will saturating limited to the maximum length it supports (ExSpan<T> 到 Span<T> 的转换, 从指定索引处开始. 长度会饱和限制为它所支持的最大长度). AsSpan<T>(ExSpan<T>, nint, int) An conversion of a ExSpan<T> to a Span<T>, beginning at 'start', of given length (ExSpan<T> 到 Span<T> 的转换, 从指定索引处开始, 且使用指定长度). CopyTo<T>(T[]?, ExSpan<T>) Copies the contents of the array into the span. If the source and destinations overlap, this method behaves as if the original values in a temporary location before the destination is overwritten. (将数组的内容复制到跨度中. 如果源和目标重叠, 则此方法的行为就像覆盖目标之前临时位置中的原始值一样). IsEmpty(IExLength) Gets a value indicating whether this object is empty (返回一个值，该值指示当前源对象为空). ItemsAppendStringTo<T>(ExSpan<T>, Action<string>, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) Convert items data append string to action. The headerLength parameter uses the value of SpanViewLength (将各项数据转追加字符串到动作. headerLength 参数使用 SpanViewLength 的值). ItemsAppendStringTo<T>(ExSpan<T>, Action<string>, nint, nint, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) Convert items data append string to action. It has the headerLength, footerLength parameter (将各项数据转追加字符串到动作. 它具有 headerLength, footerLength 参数). ItemsAppendStringTo<T>(ReadOnlyExSpan<T>, Action<string>, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) Convert items data append string to action. The headerLength parameter uses the value of SpanViewLength (将各项数据转追加字符串到动作. headerLength 参数使用 SpanViewLength 的值). ItemsAppendStringTo<T>(ReadOnlyExSpan<T>, Action<string>, nint, nint, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) Convert items data append string to action. It has the headerLength, footerLength parameter (将各项数据转追加字符串到动作. 它具有 headerLength, footerLength 参数). ItemsAppendStringTo<T, TSpan>(TSpan, in T, Action<string>, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) Convert items data append string to action. The headerLength parameter uses the value of SpanViewLength (将各项数据转追加字符串到动作. headerLength 参数使用 SpanViewLength 的值). ItemsAppendStringTo<T, TSpan>(TSpan, in T, Action<string>, nint, nint, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) Convert items data append string to action. It has the headerLength, footerLength parameter (将各项数据转追加字符串到动作. 它具有 headerLength, footerLength 参数). ItemsAppendString<T>(ExSpan<T>, StringBuilder, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) Convert items data append string. The headerLength parameter uses the value of SpanViewLength (将各项数据转追加字符串. headerLength 参数使用 SpanViewLength 的值). ItemsAppendString<T>(ExSpan<T>, StringBuilder, nint, nint, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) Convert items data append string. It has the headerLength, footerLength parameter (将各项数据追加字符串. 它具有 headerLength, footerLength 参数). ItemsAppendString<T>(ReadOnlyExSpan<T>, StringBuilder, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) Convert items data append string. The headerLength parameter uses the value of SpanViewLength (将各项数据转追加字符串. headerLength 参数使用 SpanViewLength 的值). ItemsAppendString<T>(ReadOnlyExSpan<T>, StringBuilder, nint, nint, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) Convert items data append string. It has the headerLength, footerLength parameter (将各项数据追加字符串. 它具有 headerLength, footerLength 参数). ItemsAppendString<T, TSpan>(TSpan, in T, StringBuilder, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) Convert items data append string. The headerLength parameter uses the value of SpanViewLength (将各项数据转追加字符串. headerLength 参数使用 SpanViewLength 的值). ItemsAppendString<T, TSpan>(TSpan, in T, StringBuilder, nint, nint, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) Convert items data append string. It has the headerLength, footerLength parameter (将各项数据追加字符串. 它具有 headerLength, footerLength 参数). ItemsToString<T>(ExSpan<T>, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) Convert items data into string. The headerLength parameter uses the value of SpanViewLength (将各项数据转为字符串. headerLength 参数使用 SpanViewLength 的值). ItemsToString<T>(ExSpan<T>, nint, nint, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) Convert items data into string. It has the headerLength, footerLength parameter (将各项数据转为字符串. 它具有 headerLength, footerLength 参数). ItemsToString<T>(ReadOnlyExSpan<T>, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) Convert items data into string. The headerLength parameter uses the value of SpanViewLength (将各项数据转为字符串. headerLength 参数使用 SpanViewLength 的值). ItemsToString<T>(ReadOnlyExSpan<T>, nint, nint, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) Convert items data into string. It has the headerLength, footerLength parameter (将各项数据转为字符串. 它具有 headerLength, footerLength 参数). ItemsToString<T, TSpan>(TSpan, in T, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) Convert items data into string. It has the typeSample parameter. The headerLength parameter uses the value of SpanViewLength (将各项数据转为字符串. 它具有 typeSample 参数. headerLength 参数使用 SpanViewLength 的值). ItemsToString<T, TSpan>(TSpan, in T, nint, nint, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) Convert items data into string. It has the typeSample, headerLength, footerLength parameter (将各项数据转为字符串. 它具有 typeSample, headerLength, footerLength 参数). LastAsReadOnlySpan<T>(ReadOnlyExSpan<T>) An conversion of a ReadOnlyExSpan<T> to a ReadOnlySpan<T>, last beginning at end. The length will saturating limited to the maximum length it supports (ReadOnlyExSpan<T> 到 ReadOnlySpan<T> 的转换, 从尾部索引处开始. 长度会饱和限制为它所支持的最大长度). LastAsReadOnlySpan<T>(ReadOnlyExSpan<T>, nint, int) An conversion of a ReadOnlyExSpan<T> to a ReadOnlySpan<T>, last beginning at 'end', of given length (ReadOnlyExSpan<T> 到 ReadOnlySpan<T> 的转换, 从尾部指定索引处开始, 且使用指定长度). LastAsSpan<T>(ExSpan<T>) An conversion of a ExSpan<T> to a Span<T>, last beginning at end. The length will saturating limited to the maximum length it supports (ExSpan<T> 到 Span<T> 的转换, 从尾部索引处开始. 长度会饱和限制为它所支持的最大长度). LastAsSpan<T>(ExSpan<T>, nint, int) An conversion of a ExSpan<T> to a Span<T>, last beginning at 'end', of given length (ExSpan<T> 到 Span<T> 的转换, 从尾部指定索引处开始, 且使用指定长度)."
  },
  "api/Zyl.ExSpans.Exceptions.ExSpanAbstractException.-ctor.html": {
    "href": "api/Zyl.ExSpans.Exceptions.ExSpanAbstractException.-ctor.html",
    "title": "Constructor ExSpanAbstractException | ExSpans",
    "summary": "Constructor ExSpanAbstractException Namespace Zyl.ExSpans.Exceptions Assembly ExSpans.Core.dll ExSpanAbstractException() Create ExSpanAbstractException. protected ExSpanAbstractException() ExSpanAbstractException(string?) Create ExSpanAbstractException, with message params. protected ExSpanAbstractException(string? message) Parameters message string The message. ExSpanAbstractException(string?, Exception?) Create ExSpanAbstractException, with message/inner params. protected ExSpanAbstractException(string? message, Exception? inner) Parameters message string The message. inner Exception The inner. ExSpanAbstractException(SerializationInfo, StreamingContext) Create ExSpanAbstractException, with info/context params. protected ExSpanAbstractException(SerializationInfo info, StreamingContext context) Parameters info SerializationInfo The info. context StreamingContext The context."
  },
  "api/Zyl.ExSpans.Exceptions.ExSpanAbstractException.html": {
    "href": "api/Zyl.ExSpans.Exceptions.ExSpanAbstractException.html",
    "title": "Class ExSpanAbstractException | ExSpans",
    "summary": "Class ExSpanAbstractException Namespace Zyl.ExSpans.Exceptions Assembly ExSpans.Core.dll Abstract class with ExSpan (扩展跨度的异常抽象类). [Serializable] public abstract class ExSpanAbstractException : Exception, ISerializable Inheritance object Exception ExSpanAbstractException Implements ISerializable Derived ExSpanTooLongException Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ExSpanExtensions.ItemsAppendStringTo<T, TSpan>(TSpan, in T, Action<string>, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) ExSpanExtensions.ItemsAppendStringTo<T, TSpan>(TSpan, in T, Action<string>, nint, nint, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) ExSpanExtensions.ItemsAppendString<T, TSpan>(TSpan, in T, StringBuilder, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) ExSpanExtensions.ItemsAppendString<T, TSpan>(TSpan, in T, StringBuilder, nint, nint, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) ExSpanExtensions.ItemsToString<T, TSpan>(TSpan, in T, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) ExSpanExtensions.ItemsToString<T, TSpan>(TSpan, in T, nint, nint, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) Constructors ExSpanAbstractException() Create ExSpanAbstractException. ExSpanAbstractException(SerializationInfo, StreamingContext) Create ExSpanAbstractException, with info/context params. ExSpanAbstractException(string?) Create ExSpanAbstractException, with message params. ExSpanAbstractException(string?, Exception?) Create ExSpanAbstractException, with message/inner params."
  },
  "api/Zyl.ExSpans.Exceptions.ExSpanTooLongException.-ctor.html": {
    "href": "api/Zyl.ExSpans.Exceptions.ExSpanTooLongException.-ctor.html",
    "title": "Constructor ExSpanTooLongException | ExSpans",
    "summary": "Constructor ExSpanTooLongException Namespace Zyl.ExSpans.Exceptions Assembly ExSpans.Core.dll ExSpanTooLongException() Create ExSpanTooLongException. public ExSpanTooLongException() ExSpanTooLongException(string?) Create ExSpanTooLongException, with message params. public ExSpanTooLongException(string? message) Parameters message string The message. ExSpanTooLongException(string?, Exception?) Create ExSpanTooLongException, with message/inner params. public ExSpanTooLongException(string? message, Exception? inner) Parameters message string The message. inner Exception The inner. ExSpanTooLongException(SerializationInfo, StreamingContext) Create ExSpanTooLongException, with info/context params. protected ExSpanTooLongException(SerializationInfo info, StreamingContext context) Parameters info SerializationInfo The info. context StreamingContext The context."
  },
  "api/Zyl.ExSpans.Exceptions.ExSpanTooLongException.ThrowByLength.html": {
    "href": "api/Zyl.ExSpans.Exceptions.ExSpanTooLongException.ThrowByLength.html",
    "title": "Method ThrowByLength | ExSpans",
    "summary": "Method ThrowByLength Namespace Zyl.ExSpans.Exceptions Assembly ExSpans.Core.dll ThrowByLength(nint, string?) Throw exceptions constructed from length (抛出根据长度构造的异常). public static void ThrowByLength(nint length, string? memberName = null) Parameters length nint The length. memberName string The member name. Exceptions ExSpanTooLongException Alway throws exception."
  },
  "api/Zyl.ExSpans.Exceptions.ExSpanTooLongException.ThrowIfOutInt32.html": {
    "href": "api/Zyl.ExSpans.Exceptions.ExSpanTooLongException.ThrowIfOutInt32.html",
    "title": "Method ThrowIfOutInt32 | ExSpans",
    "summary": "Method ThrowIfOutInt32 Namespace Zyl.ExSpans.Exceptions Assembly ExSpans.Core.dll ThrowIfOutInt32(nint, string?) Throws an exception if the length is out of the range of int (当长度超出 int 的范围时抛出异常). public static void ThrowIfOutInt32(nint length, string? memberName = null) Parameters length nint The length. memberName string The member name. Exceptions ExSpanTooLongException Throws an exception if the length is out of the range of Int32."
  },
  "api/Zyl.ExSpans.Exceptions.ExSpanTooLongException.html": {
    "href": "api/Zyl.ExSpans.Exceptions.ExSpanTooLongException.html",
    "title": "Class ExSpanTooLongException | ExSpans",
    "summary": "Class ExSpanTooLongException Namespace Zyl.ExSpans.Exceptions Assembly ExSpans.Core.dll ExSpan length too long exception (扩展跨度长度太长的异常) [Serializable] public class ExSpanTooLongException : ExSpanAbstractException, ISerializable Inheritance object Exception ExSpanAbstractException ExSpanTooLongException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ExSpanExtensions.ItemsAppendStringTo<T, TSpan>(TSpan, in T, Action<string>, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) ExSpanExtensions.ItemsAppendStringTo<T, TSpan>(TSpan, in T, Action<string>, nint, nint, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) ExSpanExtensions.ItemsAppendString<T, TSpan>(TSpan, in T, StringBuilder, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) ExSpanExtensions.ItemsAppendString<T, TSpan>(TSpan, in T, StringBuilder, nint, nint, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) ExSpanExtensions.ItemsToString<T, TSpan>(TSpan, in T, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) ExSpanExtensions.ItemsToString<T, TSpan>(TSpan, in T, nint, nint, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) Constructors ExSpanTooLongException() Create ExSpanTooLongException. ExSpanTooLongException(SerializationInfo, StreamingContext) Create ExSpanTooLongException, with info/context params. ExSpanTooLongException(string?) Create ExSpanTooLongException, with message params. ExSpanTooLongException(string?, Exception?) Create ExSpanTooLongException, with message/inner params. Methods ThrowByLength(nint, string?) Throw exceptions constructed from length (抛出根据长度构造的异常). ThrowIfOutInt32(nint, string?) Throws an exception if the length is out of the range of int (当长度超出 int 的范围时抛出异常)."
  },
  "api/Zyl.ExSpans.Exceptions.html": {
    "href": "api/Zyl.ExSpans.Exceptions.html",
    "title": "Namespace Zyl.ExSpans.Exceptions | ExSpans",
    "summary": "Namespace Zyl.ExSpans.Exceptions Classes ExSpanAbstractException Abstract class with ExSpan (扩展跨度的异常抽象类). ExSpanTooLongException ExSpan length too long exception (扩展跨度长度太长的异常)"
  },
  "api/Zyl.ExSpans.Extensions.ApplySpans.ApplySpanCoreExtensions.ItemsAppendString.html": {
    "href": "api/Zyl.ExSpans.Extensions.ApplySpans.ApplySpanCoreExtensions.ItemsAppendString.html",
    "title": "Method ItemsAppendString | ExSpans",
    "summary": "Method ItemsAppendString Namespace Zyl.ExSpans.Extensions.ApplySpans Assembly ExSpans.Core.dll ItemsAppendString<T>(ReadOnlySpan<T>, StringBuilder, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) Convert items data append string. The headerLength parameter uses the value of SpanViewLength (将各项数据转追加字符串. headerLength 参数使用 SpanViewLength 的值). [FakeCLSCompliant(false)] public static void ItemsAppendString<T>(this ReadOnlySpan<T> source, StringBuilder output, Func<nint, T, string>? itemFormater = null, ItemsToStringFlags stringFlags = ItemsToStringFlags.Default, TypeNameFlags nameFlags = TypeNameFlags.Default) Parameters source ReadOnlySpan<T> The source data (源数据). output StringBuilder The output StringBuilder (输出的 StringBuilder). itemFormater Func<nint, T, string> The formater of each item (各项的格式化器). Default value is ItemFormaters.Default. Prototype is string func(TSize index, T value). stringFlags ItemsToStringFlags Flags for convert items data into string (各项数据转字符串的标志). nameFlags TypeNameFlags Flags for type name (类型名的标志). Type Parameters T The element type (元素的类型). See Also ItemFormaters ItemsAppendString<T>(ReadOnlySpan<T>, StringBuilder, nint, nint, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) Convert items data append string. It has the headerLength, footerLength parameter (将各项数据追加字符串. 它具有 headerLength, footerLength 参数). [FakeCLSCompliant(false)] public static void ItemsAppendString<T>(this ReadOnlySpan<T> source, StringBuilder output, nint headerLength, nint footerLength = 0, Func<nint, T, string>? itemFormater = null, ItemsToStringFlags stringFlags = ItemsToStringFlags.Default, TypeNameFlags nameFlags = TypeNameFlags.Default) Parameters source ReadOnlySpan<T> The source data (源数据). output StringBuilder The output StringBuilder (输出的 StringBuilder). headerLength nint The max length of header data (头部的最大长度). footerLength nint The max length of footer data (尾部的最大长度). itemFormater Func<nint, T, string> The formater of each item (各项的格式化器). Default value is ItemFormaters.Default. Prototype is string func(TSize index, T value). stringFlags ItemsToStringFlags Flags for convert items data into string (各项数据转字符串的标志). nameFlags TypeNameFlags Flags for type name (类型名的标志). Type Parameters T The element type (元素的类型). See Also ItemFormaters ItemsAppendString<T>(Span<T>, StringBuilder, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) Convert items data append string. The headerLength parameter uses the value of SpanViewLength (将各项数据转追加字符串. headerLength 参数使用 SpanViewLength 的值). [FakeCLSCompliant(false)] public static void ItemsAppendString<T>(this Span<T> source, StringBuilder output, Func<nint, T, string>? itemFormater = null, ItemsToStringFlags stringFlags = ItemsToStringFlags.Default, TypeNameFlags nameFlags = TypeNameFlags.Default) Parameters source Span<T> The source data (源数据). output StringBuilder The output StringBuilder (输出的 StringBuilder). itemFormater Func<nint, T, string> The formater of each item (各项的格式化器). Default value is ItemFormaters.Default. Prototype is string func(TSize index, T value). stringFlags ItemsToStringFlags Flags for convert items data into string (各项数据转字符串的标志). nameFlags TypeNameFlags Flags for type name (类型名的标志). Type Parameters T The element type (元素的类型). See Also ItemFormaters ItemsAppendString<T>(Span<T>, StringBuilder, nint, nint, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) Convert items data append string. It has the headerLength, footerLength parameter (将各项数据追加字符串. 它具有 headerLength, footerLength 参数). [FakeCLSCompliant(false)] public static void ItemsAppendString<T>(this Span<T> source, StringBuilder output, nint headerLength, nint footerLength = 0, Func<nint, T, string>? itemFormater = null, ItemsToStringFlags stringFlags = ItemsToStringFlags.Default, TypeNameFlags nameFlags = TypeNameFlags.Default) Parameters source Span<T> The source data (源数据). output StringBuilder The output StringBuilder (输出的 StringBuilder). headerLength nint The max length of header data (头部的最大长度). footerLength nint The max length of footer data (尾部的最大长度). itemFormater Func<nint, T, string> The formater of each item (各项的格式化器). Default value is ItemFormaters.Default. Prototype is string func(TSize index, T value). stringFlags ItemsToStringFlags Flags for convert items data into string (各项数据转字符串的标志). nameFlags TypeNameFlags Flags for type name (类型名的标志). Type Parameters T The element type (元素的类型). See Also ItemFormaters"
  },
  "api/Zyl.ExSpans.Extensions.ApplySpans.ApplySpanCoreExtensions.ItemsAppendStringTo.html": {
    "href": "api/Zyl.ExSpans.Extensions.ApplySpans.ApplySpanCoreExtensions.ItemsAppendStringTo.html",
    "title": "Method ItemsAppendStringTo | ExSpans",
    "summary": "Method ItemsAppendStringTo Namespace Zyl.ExSpans.Extensions.ApplySpans Assembly ExSpans.Core.dll ItemsAppendStringTo<T>(ReadOnlySpan<T>, Action<string>, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) Convert items data append string to action. The headerLength parameter uses the value of SpanViewLength (将各项数据转追加字符串到动作. headerLength 参数使用 SpanViewLength 的值). [FakeCLSCompliant(false)] public static void ItemsAppendStringTo<T>(this ReadOnlySpan<T> source, Action<string> output, Func<nint, T, string>? itemFormater = null, ItemsToStringFlags stringFlags = ItemsToStringFlags.Default, TypeNameFlags nameFlags = TypeNameFlags.Default) Parameters source ReadOnlySpan<T> The source data (源数据). output Action<string> The output action (输出动作). itemFormater Func<nint, T, string> The formater of each item (各项的格式化器). Default value is ItemFormaters.Default. Prototype is string func(TSize index, T value). stringFlags ItemsToStringFlags Flags for convert items data into string (各项数据转字符串的标志). nameFlags TypeNameFlags Flags for type name (类型名的标志). Type Parameters T The element type (元素的类型). See Also ItemFormaters ItemsAppendStringTo<T>(ReadOnlySpan<T>, Action<string>, nint, nint, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) Convert items data append string to action. It has the headerLength, footerLength parameter (将各项数据转追加字符串到动作. 它具有 headerLength, footerLength 参数). [FakeCLSCompliant(false)] public static void ItemsAppendStringTo<T>(this ReadOnlySpan<T> source, Action<string> output, nint headerLength, nint footerLength = 0, Func<nint, T, string>? itemFormater = null, ItemsToStringFlags stringFlags = ItemsToStringFlags.Default, TypeNameFlags nameFlags = TypeNameFlags.Default) Parameters source ReadOnlySpan<T> The source data (源数据). output Action<string> The output action (输出动作). headerLength nint The max length of header data (头部的最大长度). footerLength nint The max length of footer data (尾部的最大长度). itemFormater Func<nint, T, string> The formater of each item (各项的格式化器). Default value is ItemFormaters.Default. Prototype is string func(TSize index, T value). stringFlags ItemsToStringFlags Flags for convert items data into string (各项数据转字符串的标志). nameFlags TypeNameFlags Flags for type name (类型名的标志). Type Parameters T The element type (元素的类型). See Also ItemFormaters ItemsAppendStringTo<T>(Span<T>, Action<string>, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) Convert items data append string to action. The headerLength parameter uses the value of SpanViewLength (将各项数据转追加字符串到动作. headerLength 参数使用 SpanViewLength 的值). [FakeCLSCompliant(false)] public static void ItemsAppendStringTo<T>(this Span<T> source, Action<string> output, Func<nint, T, string>? itemFormater = null, ItemsToStringFlags stringFlags = ItemsToStringFlags.Default, TypeNameFlags nameFlags = TypeNameFlags.Default) Parameters source Span<T> The source data (源数据). output Action<string> The output action (输出动作). itemFormater Func<nint, T, string> The formater of each item (各项的格式化器). Default value is ItemFormaters.Default. Prototype is string func(TSize index, T value). stringFlags ItemsToStringFlags Flags for convert items data into string (各项数据转字符串的标志). nameFlags TypeNameFlags Flags for type name (类型名的标志). Type Parameters T The element type (元素的类型). See Also ItemFormaters ItemsAppendStringTo<T>(Span<T>, Action<string>, nint, nint, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) Convert items data append string to action. It has the headerLength, footerLength parameter (将各项数据转追加字符串到动作. 它具有 headerLength, footerLength 参数). [FakeCLSCompliant(false)] public static void ItemsAppendStringTo<T>(this Span<T> source, Action<string> output, nint headerLength, nint footerLength = 0, Func<nint, T, string>? itemFormater = null, ItemsToStringFlags stringFlags = ItemsToStringFlags.Default, TypeNameFlags nameFlags = TypeNameFlags.Default) Parameters source Span<T> The source data (源数据). output Action<string> The output action (输出动作). headerLength nint The max length of header data (头部的最大长度). footerLength nint The max length of footer data (尾部的最大长度). itemFormater Func<nint, T, string> The formater of each item (各项的格式化器). Default value is ItemFormaters.Default. Prototype is string func(TSize index, T value). stringFlags ItemsToStringFlags Flags for convert items data into string (各项数据转字符串的标志). nameFlags TypeNameFlags Flags for type name (类型名的标志). Type Parameters T The element type (元素的类型). See Also ItemFormaters"
  },
  "api/Zyl.ExSpans.Extensions.ApplySpans.ApplySpanCoreExtensions.ItemsToString.html": {
    "href": "api/Zyl.ExSpans.Extensions.ApplySpans.ApplySpanCoreExtensions.ItemsToString.html",
    "title": "Method ItemsToString | ExSpans",
    "summary": "Method ItemsToString Namespace Zyl.ExSpans.Extensions.ApplySpans Assembly ExSpans.Core.dll ItemsToString<T>(ReadOnlySpan<T>, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) Convert items data into string. The headerLength parameter uses the value of SpanViewLength (将各项数据转为字符串. headerLength 参数使用 SpanViewLength 的值). [FakeCLSCompliant(false)] public static string ItemsToString<T>(this ReadOnlySpan<T> source, Func<nint, T, string>? itemFormater = null, ItemsToStringFlags stringFlags = ItemsToStringFlags.Default, TypeNameFlags nameFlags = TypeNameFlags.Default) Parameters source ReadOnlySpan<T> The source data (源数据). itemFormater Func<nint, T, string> The formater of each item (各项的格式化器). Default value is ItemFormaters.Default. Prototype is string func(TSize index, T value). stringFlags ItemsToStringFlags Flags for convert items data into string (各项数据转字符串的标志). nameFlags TypeNameFlags Flags for type name (类型名的标志). Returns string A formatted string (格式化后的字符串). Type Parameters T The element type (元素的类型). See Also ItemFormaters ItemsToString<T>(ReadOnlySpan<T>, nint, nint, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) Convert items data into string. It has the headerLength, footerLength parameter (将各项数据转为字符串. 它具有 headerLength, footerLength 参数). [FakeCLSCompliant(false)] public static string ItemsToString<T>(this ReadOnlySpan<T> source, nint headerLength, nint footerLength = 0, Func<nint, T, string>? itemFormater = null, ItemsToStringFlags stringFlags = ItemsToStringFlags.Default, TypeNameFlags nameFlags = TypeNameFlags.Default) Parameters source ReadOnlySpan<T> The source data (源数据). headerLength nint The max length of header data (头部的最大长度). footerLength nint The max length of footer data (尾部的最大长度). itemFormater Func<nint, T, string> The formater of each item (各项的格式化器). Default value is ItemFormaters.Default. Prototype is string func(TSize index, T value). stringFlags ItemsToStringFlags Flags for convert items data into string (各项数据转字符串的标志). nameFlags TypeNameFlags Flags for type name (类型名的标志). Returns string A formatted string (格式化后的字符串). Type Parameters T The element type (元素的类型). See Also ItemFormaters ItemsToString<T>(Span<T>, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) Convert items data into string. The headerLength parameter uses the value of SpanViewLength (将各项数据转为字符串. headerLength 参数使用 SpanViewLength 的值). [FakeCLSCompliant(false)] public static string ItemsToString<T>(this Span<T> source, Func<nint, T, string>? itemFormater = null, ItemsToStringFlags stringFlags = ItemsToStringFlags.Default, TypeNameFlags nameFlags = TypeNameFlags.Default) Parameters source Span<T> The source data (源数据). itemFormater Func<nint, T, string> The formater of each item (各项的格式化器). Default value is ItemFormaters.Default. Prototype is string func(TSize index, T value). stringFlags ItemsToStringFlags Flags for convert items data into string (各项数据转字符串的标志). nameFlags TypeNameFlags Flags for type name (类型名的标志). Returns string A formatted string (格式化后的字符串). Type Parameters T The element type (元素的类型). See Also ItemFormaters ItemsToString<T>(Span<T>, nint, nint, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) Convert items data into string. It has the headerLength, footerLength parameter (将各项数据转为字符串. 它具有 headerLength, footerLength 参数). [FakeCLSCompliant(false)] public static string ItemsToString<T>(this Span<T> source, nint headerLength, nint footerLength = 0, Func<nint, T, string>? itemFormater = null, ItemsToStringFlags stringFlags = ItemsToStringFlags.Default, TypeNameFlags nameFlags = TypeNameFlags.Default) Parameters source Span<T> The source data (源数据). headerLength nint The max length of header data (头部的最大长度). footerLength nint The max length of footer data (尾部的最大长度). itemFormater Func<nint, T, string> The formater of each item (各项的格式化器). Default value is ItemFormaters.Default. Prototype is string func(TSize index, T value). stringFlags ItemsToStringFlags Flags for convert items data into string (各项数据转字符串的标志). nameFlags TypeNameFlags Flags for type name (类型名的标志). Returns string A formatted string (格式化后的字符串). Type Parameters T The element type (元素的类型). See Also ItemFormaters"
  },
  "api/Zyl.ExSpans.Extensions.ApplySpans.ApplySpanCoreExtensions.html": {
    "href": "api/Zyl.ExSpans.Extensions.ApplySpans.ApplySpanCoreExtensions.html",
    "title": "Class ApplySpanCoreExtensions | ExSpans",
    "summary": "Class ApplySpanCoreExtensions Namespace Zyl.ExSpans.Extensions.ApplySpans Assembly ExSpans.Core.dll Provides commonly used extension methods for the span-related types, such as Span<T> and ReadOnlySpan<T> (提供跨度相关的类型的常用的扩展方法，例如 Span<T> 和 ReadOnlySpan<T>). public static class ApplySpanCoreExtensions Inheritance object ApplySpanCoreExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ItemsAppendStringTo<T>(ReadOnlySpan<T>, Action<string>, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) Convert items data append string to action. The headerLength parameter uses the value of SpanViewLength (将各项数据转追加字符串到动作. headerLength 参数使用 SpanViewLength 的值). ItemsAppendStringTo<T>(ReadOnlySpan<T>, Action<string>, nint, nint, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) Convert items data append string to action. It has the headerLength, footerLength parameter (将各项数据转追加字符串到动作. 它具有 headerLength, footerLength 参数). ItemsAppendStringTo<T>(Span<T>, Action<string>, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) Convert items data append string to action. The headerLength parameter uses the value of SpanViewLength (将各项数据转追加字符串到动作. headerLength 参数使用 SpanViewLength 的值). ItemsAppendStringTo<T>(Span<T>, Action<string>, nint, nint, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) Convert items data append string to action. It has the headerLength, footerLength parameter (将各项数据转追加字符串到动作. 它具有 headerLength, footerLength 参数). ItemsAppendString<T>(ReadOnlySpan<T>, StringBuilder, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) Convert items data append string. The headerLength parameter uses the value of SpanViewLength (将各项数据转追加字符串. headerLength 参数使用 SpanViewLength 的值). ItemsAppendString<T>(ReadOnlySpan<T>, StringBuilder, nint, nint, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) Convert items data append string. It has the headerLength, footerLength parameter (将各项数据追加字符串. 它具有 headerLength, footerLength 参数). ItemsAppendString<T>(Span<T>, StringBuilder, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) Convert items data append string. The headerLength parameter uses the value of SpanViewLength (将各项数据转追加字符串. headerLength 参数使用 SpanViewLength 的值). ItemsAppendString<T>(Span<T>, StringBuilder, nint, nint, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) Convert items data append string. It has the headerLength, footerLength parameter (将各项数据追加字符串. 它具有 headerLength, footerLength 参数). ItemsToString<T>(ReadOnlySpan<T>, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) Convert items data into string. The headerLength parameter uses the value of SpanViewLength (将各项数据转为字符串. headerLength 参数使用 SpanViewLength 的值). ItemsToString<T>(ReadOnlySpan<T>, nint, nint, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) Convert items data into string. It has the headerLength, footerLength parameter (将各项数据转为字符串. 它具有 headerLength, footerLength 参数). ItemsToString<T>(Span<T>, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) Convert items data into string. The headerLength parameter uses the value of SpanViewLength (将各项数据转为字符串. headerLength 参数使用 SpanViewLength 的值). ItemsToString<T>(Span<T>, nint, nint, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) Convert items data into string. It has the headerLength, footerLength parameter (将各项数据转为字符串. 它具有 headerLength, footerLength 参数)."
  },
  "api/Zyl.ExSpans.Extensions.ApplySpans.html": {
    "href": "api/Zyl.ExSpans.Extensions.ApplySpans.html",
    "title": "Namespace Zyl.ExSpans.Extensions.ApplySpans | ExSpans",
    "summary": "Namespace Zyl.ExSpans.Extensions.ApplySpans Classes ApplySpanCoreExtensions Provides commonly used extension methods for the span-related types, such as Span<T> and ReadOnlySpan<T> (提供跨度相关的类型的常用的扩展方法，例如 Span<T> 和 ReadOnlySpan<T>)."
  },
  "api/Zyl.ExSpans.Extensions.ExLengthExtensions.ExLength.html": {
    "href": "api/Zyl.ExSpans.Extensions.ExLengthExtensions.ExLength.html",
    "title": "Method ExLength | ExSpans",
    "summary": "Method ExLength Namespace Zyl.ExSpans.Extensions Assembly ExSpans.Core.dll ExLength<T>(T[]) Gets a native unsigned integer that represents the total number of elements in all the dimensions of the array (获取一个本机整数，该整数表示数组所有维度中的元素总数). [FakeCLSCompliant(false)] public static nint ExLength<T>(this T[] source) Parameters source T[] Source array (源数组). Returns nint A native unsigned integer that represents the total number of elements in all the dimensions of the array (一个本机整数，表示数组所有维度中的元素总数) Type Parameters T The type of the elements of the array (数组元素的类型). ExLength<T>(ArraySegment<T>) Gets a native unsigned integer that represents the total number of elements in ArraySegment<T> (获取一个本机整数，该整数表示 ArraySegment<T> 的元素总数). [FakeCLSCompliant(false)] public static nint ExLength<T>(this ArraySegment<T> source) Parameters source ArraySegment<T> Source array (源数组). Returns nint A native unsigned integer that represents the total number of elements in ArraySegment<T> (一个本机整数，表示 ArraySegment<T> 的元素总数) Type Parameters T The element type (元素的类型). ExLength<T>(ReadOnlySpan<T>) Gets a native unsigned integer that represents the total number of elements in ReadOnlySpan<T> (获取一个本机整数，该整数表示 ReadOnlySpan<T> 的元素总数). [FakeCLSCompliant(false)] public static nint ExLength<T>(this ReadOnlySpan<T> source) Parameters source ReadOnlySpan<T> Source array (源数组). Returns nint A native unsigned integer that represents the total number of elements in ReadOnlySpan<T> (一个本机整数，表示 ReadOnlySpan<T> 的元素总数) Type Parameters T The element type (元素的类型). ExLength<T>(Span<T>) Gets a native unsigned integer that represents the total number of elements in Span<T> (获取一个本机整数，该整数表示 Span<T> 的元素总数). [FakeCLSCompliant(false)] public static nint ExLength<T>(this Span<T> source) Parameters source Span<T> Source array (源数组). Returns nint A native unsigned integer that represents the total number of elements in Span<T> (一个本机整数，表示 Span<T> 的元素总数) Type Parameters T The element type (元素的类型). ExLength<T>(string) Gets a native unsigned integer that represents the total number of elements in String (获取一个本机整数，该整数表示 String 的元素总数). [FakeCLSCompliant(false)] public static nint ExLength<T>(this string source) Parameters source string Source array (源数组). Returns nint A native unsigned integer that represents the total number of elements in String (一个本机整数，表示 String 的元素总数) Type Parameters T The element type (元素的类型)."
  },
  "api/Zyl.ExSpans.Extensions.ExLengthExtensions.html": {
    "href": "api/Zyl.ExSpans.Extensions.ExLengthExtensions.html",
    "title": "Class ExLengthExtensions | ExSpans",
    "summary": "Class ExLengthExtensions Namespace Zyl.ExSpans.Extensions Assembly ExSpans.Core.dll Extensions of ExLength methods (ExLength 方法的扩展) public static class ExLengthExtensions Inheritance object ExLengthExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ExLength<T>(ArraySegment<T>) Gets a native unsigned integer that represents the total number of elements in ArraySegment<T> (获取一个本机整数，该整数表示 ArraySegment<T> 的元素总数). ExLength<T>(ReadOnlySpan<T>) Gets a native unsigned integer that represents the total number of elements in ReadOnlySpan<T> (获取一个本机整数，该整数表示 ReadOnlySpan<T> 的元素总数). ExLength<T>(Span<T>) Gets a native unsigned integer that represents the total number of elements in Span<T> (获取一个本机整数，该整数表示 Span<T> 的元素总数). ExLength<T>(string) Gets a native unsigned integer that represents the total number of elements in String (获取一个本机整数，该整数表示 String 的元素总数). ExLength<T>(T[]) Gets a native unsigned integer that represents the total number of elements in all the dimensions of the array (获取一个本机整数，该整数表示数组所有维度中的元素总数)."
  },
  "api/Zyl.ExSpans.Extensions.IntPtrExtensions.IntPtrMaxValue.html": {
    "href": "api/Zyl.ExSpans.Extensions.IntPtrExtensions.IntPtrMaxValue.html",
    "title": "Field IntPtrMaxValue | ExSpans",
    "summary": "Field IntPtrMaxValue Namespace Zyl.ExSpans.Extensions Assembly ExSpans.Core.dll Represents the largest possible value of nint (表示 nint 的最大可能值). [CLSCompliant(false)] public static readonly nint IntPtrMaxValue Returns nint Represents the largest possible value of (表示 的最大可能值)."
  },
  "api/Zyl.ExSpans.Extensions.IntPtrExtensions.IsByteLengthInInt32.html": {
    "href": "api/Zyl.ExSpans.Extensions.IntPtrExtensions.IsByteLengthInInt32.html",
    "title": "Method IsByteLengthInInt32 | ExSpans",
    "summary": "Method IsByteLengthInInt32 Namespace Zyl.ExSpans.Extensions Assembly ExSpans.Core.dll IsByteLengthInInt32<T>(nint) Is the byte length within the Int32 range. This method does not check for negative numbers (字节长度是否在 Int32 范围内. 该方法不检查负数). public static bool IsByteLengthInInt32<T>(this nint source) Parameters source nint Source value (源值). Returns bool true if within; otherwise, false Type Parameters T IsByteLengthInInt32<T>(nuint) Is the byte length within the Int32 range. This method does not check for negative numbers (字节长度是否在 Int32 范围内. 该方法不检查负数). [CLSCompliant(false)] public static bool IsByteLengthInInt32<T>(this nuint source) Parameters source nuint Source value (源值). Returns bool true if within; otherwise, false Type Parameters T"
  },
  "api/Zyl.ExSpans.Extensions.IntPtrExtensions.IsLengthInInt32.html": {
    "href": "api/Zyl.ExSpans.Extensions.IntPtrExtensions.IsLengthInInt32.html",
    "title": "Method IsLengthInInt32 | ExSpans",
    "summary": "Method IsLengthInInt32 Namespace Zyl.ExSpans.Extensions Assembly ExSpans.Core.dll IsLengthInInt32(nint) Is the length within the Int32 range. This method does not check for negative numbers (长度是否在 Int32 范围内. 该方法不检查负数). public static bool IsLengthInInt32(this nint source) Parameters source nint Source value (源值). Returns bool true if within; otherwise, false IsLengthInInt32(nuint) Is the length within the Int32 range. This method does not check for negative numbers (长度是否在 Int32 范围内. 该方法不检查负数). [CLSCompliant(false)] public static bool IsLengthInInt32(this nuint source) Parameters source nuint Source value (源值). Returns bool true if within; otherwise, false"
  },
  "api/Zyl.ExSpans.Extensions.IntPtrExtensions.SaturatingToInt32.html": {
    "href": "api/Zyl.ExSpans.Extensions.IntPtrExtensions.SaturatingToInt32.html",
    "title": "Method SaturatingToInt32 | ExSpans",
    "summary": "Method SaturatingToInt32 Namespace Zyl.ExSpans.Extensions Assembly ExSpans.Core.dll SaturatingToInt32(long) Convert long saturating to int (将 long 饱和转换为 int). public static int SaturatingToInt32(this long source) Parameters source long Source value (源值). Returns int A value after saturating convert (饱和转换后的值). SaturatingToInt32(nint) Convert nuint saturating to int (将 nuint 饱和转换为 int). public static int SaturatingToInt32(this nint source) Parameters source nint Source value (源值). Returns int A value after saturating convert (饱和转换后的值). SaturatingToInt32(nuint) Convert nuint saturating to int (将 nuint 饱和转换为 int). [CLSCompliant(false)] public static int SaturatingToInt32(this nuint source) Parameters source nuint Source value (源值). Returns int A value after saturating convert (饱和转换后的值)."
  },
  "api/Zyl.ExSpans.Extensions.IntPtrExtensions.SaturatingToIntPtr.html": {
    "href": "api/Zyl.ExSpans.Extensions.IntPtrExtensions.SaturatingToIntPtr.html",
    "title": "Method SaturatingToIntPtr | ExSpans",
    "summary": "Method SaturatingToIntPtr Namespace Zyl.ExSpans.Extensions Assembly ExSpans.Core.dll SaturatingToIntPtr(ulong) Convert ulong saturating to nint (将 ulong 饱和转换为 nint). [CLSCompliant(false)] public static nint SaturatingToIntPtr(this ulong source) Parameters source ulong Source value (源值). Returns nint A value after saturating convert (饱和转换后的值)."
  },
  "api/Zyl.ExSpans.Extensions.IntPtrExtensions.SaturatingToTSize.html": {
    "href": "api/Zyl.ExSpans.Extensions.IntPtrExtensions.SaturatingToTSize.html",
    "title": "Method SaturatingToTSize | ExSpans",
    "summary": "Method SaturatingToTSize Namespace Zyl.ExSpans.Extensions Assembly ExSpans.Core.dll SaturatingToTSize(ulong) Convert ulong saturating to TSize (将 ulong 饱和转换为 TSize). [CLSCompliant(false)] public static nint SaturatingToTSize(this ulong source) Parameters source ulong Source value (源值). Returns nint A value after saturating convert (饱和转换后的值)."
  },
  "api/Zyl.ExSpans.Extensions.IntPtrExtensions.SaturatingToUIntPtr.html": {
    "href": "api/Zyl.ExSpans.Extensions.IntPtrExtensions.SaturatingToUIntPtr.html",
    "title": "Method SaturatingToUIntPtr | ExSpans",
    "summary": "Method SaturatingToUIntPtr Namespace Zyl.ExSpans.Extensions Assembly ExSpans.Core.dll SaturatingToUIntPtr(ulong) Convert ulong saturating to nuint (将 ulong 饱和转换为 nuint). [CLSCompliant(false)] public static nuint SaturatingToUIntPtr(this ulong source) Parameters source ulong Source value (源值). Returns nuint A value after saturating convert (饱和转换后的值)."
  },
  "api/Zyl.ExSpans.Extensions.IntPtrExtensions.ToIntPtr.html": {
    "href": "api/Zyl.ExSpans.Extensions.IntPtrExtensions.ToIntPtr.html",
    "title": "Method ToIntPtr | ExSpans",
    "summary": "Method ToIntPtr Namespace Zyl.ExSpans.Extensions Assembly ExSpans.Core.dll ToIntPtr(nint) The nint to nint. public static nint ToIntPtr(this nint source) Parameters source nint The source (源). Returns nint nint value. ToIntPtr(nuint) The nuint to nint. [CLSCompliant(false)] public static nint ToIntPtr(this nuint source) Parameters source nuint The source (源). Returns nint nint value."
  },
  "api/Zyl.ExSpans.Extensions.IntPtrExtensions.ToUIntPtr.html": {
    "href": "api/Zyl.ExSpans.Extensions.IntPtrExtensions.ToUIntPtr.html",
    "title": "Method ToUIntPtr | ExSpans",
    "summary": "Method ToUIntPtr Namespace Zyl.ExSpans.Extensions Assembly ExSpans.Core.dll ToUIntPtr(nint) The nint to nuint. [CLSCompliant(false)] public static nuint ToUIntPtr(this nint source) Parameters source nint The source (源). Returns nuint nuint value. ToUIntPtr(nuint) The nuint to nuint. [CLSCompliant(false)] public static nuint ToUIntPtr(this nuint source) Parameters source nuint The source (源). Returns nuint nuint value."
  },
  "api/Zyl.ExSpans.Extensions.IntPtrExtensions.UIntPtrMaxValue.html": {
    "href": "api/Zyl.ExSpans.Extensions.IntPtrExtensions.UIntPtrMaxValue.html",
    "title": "Field UIntPtrMaxValue | ExSpans",
    "summary": "Field UIntPtrMaxValue Namespace Zyl.ExSpans.Extensions Assembly ExSpans.Core.dll Represents the largest possible value of nuint (表示 nuint 的最大可能值). [CLSCompliant(false)] public static readonly nuint UIntPtrMaxValue Returns nuint Represents the largest possible value of (表示 的最大可能值)."
  },
  "api/Zyl.ExSpans.Extensions.IntPtrExtensions.html": {
    "href": "api/Zyl.ExSpans.Extensions.IntPtrExtensions.html",
    "title": "Class IntPtrExtensions | ExSpans",
    "summary": "Class IntPtrExtensions Namespace Zyl.ExSpans.Extensions Assembly ExSpans.Core.dll Extensions of nint types (nint 类型的扩展) public static class IntPtrExtensions Inheritance object IntPtrExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields IntPtrMaxValue Represents the largest possible value of nint (表示 nint 的最大可能值). UIntPtrMaxValue Represents the largest possible value of nuint (表示 nuint 的最大可能值). Methods IsByteLengthInInt32<T>(nint) Is the byte length within the Int32 range. This method does not check for negative numbers (字节长度是否在 Int32 范围内. 该方法不检查负数). IsByteLengthInInt32<T>(nuint) Is the byte length within the Int32 range. This method does not check for negative numbers (字节长度是否在 Int32 范围内. 该方法不检查负数). IsLengthInInt32(nint) Is the length within the Int32 range. This method does not check for negative numbers (长度是否在 Int32 范围内. 该方法不检查负数). IsLengthInInt32(nuint) Is the length within the Int32 range. This method does not check for negative numbers (长度是否在 Int32 范围内. 该方法不检查负数). SaturatingToInt32(long) Convert long saturating to int (将 long 饱和转换为 int). SaturatingToInt32(nint) Convert nuint saturating to int (将 nuint 饱和转换为 int). SaturatingToInt32(nuint) Convert nuint saturating to int (将 nuint 饱和转换为 int). SaturatingToIntPtr(ulong) Convert ulong saturating to nint (将 ulong 饱和转换为 nint). SaturatingToTSize(ulong) Convert ulong saturating to TSize (将 ulong 饱和转换为 TSize). SaturatingToUIntPtr(ulong) Convert ulong saturating to nuint (将 ulong 饱和转换为 nuint). ToIntPtr(nint) The nint to nint. ToIntPtr(nuint) The nuint to nint. ToUIntPtr(nint) The nint to nuint. ToUIntPtr(nuint) The nuint to nuint."
  },
  "api/Zyl.ExSpans.Extensions.html": {
    "href": "api/Zyl.ExSpans.Extensions.html",
    "title": "Namespace Zyl.ExSpans.Extensions | ExSpans",
    "summary": "Namespace Zyl.ExSpans.Extensions Classes ExLengthExtensions Extensions of ExLength methods (ExLength 方法的扩展) IntPtrExtensions Extensions of nint types (nint 类型的扩展)"
  },
  "api/Zyl.ExSpans.IExLength.Length.html": {
    "href": "api/Zyl.ExSpans.IExLength.Length.html",
    "title": "Property Length | ExSpans",
    "summary": "Property Length Namespace Zyl.ExSpans Assembly ExSpans.Core.dll Length The number of items in the Ex span (扩展跨度中的项数). [FakeCLSCompliant(false)] nint Length { get; } Property Value nint"
  },
  "api/Zyl.ExSpans.IExLength.html": {
    "href": "api/Zyl.ExSpans.IExLength.html",
    "title": "Interface IExLength | ExSpans",
    "summary": "Interface IExLength Namespace Zyl.ExSpans Assembly ExSpans.Core.dll The interface of Ex length (扩展长度的接口). [FakeCLSCompliant(false)] public interface IExLength Extension Methods ExSpanExtensions.IsEmpty(IExLength) ExSpanExtensions.ItemsAppendStringTo<T, TSpan>(TSpan, in T, Action<string>, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) ExSpanExtensions.ItemsAppendStringTo<T, TSpan>(TSpan, in T, Action<string>, nint, nint, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) ExSpanExtensions.ItemsAppendString<T, TSpan>(TSpan, in T, StringBuilder, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) ExSpanExtensions.ItemsAppendString<T, TSpan>(TSpan, in T, StringBuilder, nint, nint, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) ExSpanExtensions.ItemsToString<T, TSpan>(TSpan, in T, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) ExSpanExtensions.ItemsToString<T, TSpan>(TSpan, in T, nint, nint, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) Properties Length The number of items in the Ex span (扩展跨度中的项数)."
  },
  "api/Zyl.ExSpans.IExSpanBase-1.GetPinnableReference.html": {
    "href": "api/Zyl.ExSpans.IExSpanBase-1.GetPinnableReference.html",
    "title": "Method GetPinnableReference | ExSpans",
    "summary": "Method GetPinnableReference Namespace Zyl.ExSpans Assembly ExSpans.Core.dll GetPinnableReference() Returns a reference to the 0th element of the span. If the span is empty, returns null reference. It can be used for pinning and is required to support the use of span within a fixed statement (返回对跨度的第0个元素的引用。如果跨度为空，则返回null引用. 它可用于固定，并且需要支持在 fixed 语句中使用跨度). ref T GetPinnableReference() Returns T"
  },
  "api/Zyl.ExSpans.IExSpanBase-1.html": {
    "href": "api/Zyl.ExSpans.IExSpanBase-1.html",
    "title": "Interface IExSpanBase<T> | ExSpans",
    "summary": "Interface IExSpanBase<T> Namespace Zyl.ExSpans Assembly ExSpans.Core.dll The base interface of Ex span (扩展跨度的基本接口). [FakeCLSCompliant(false)] public interface IExSpanBase<T> : IReadOnlyExSpanBase<T>, IExLength Type Parameters T The element type (元素的类型). Inherited Members IReadOnlyExSpanBase<T>.GetPinnableReadOnlyReference() IExLength.Length Extension Methods ExSpanExtensions.IsEmpty(IExLength) ExSpanExtensions.ItemsAppendStringTo<T, TSpan>(TSpan, in T, Action<string>, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) ExSpanExtensions.ItemsAppendStringTo<T, TSpan>(TSpan, in T, Action<string>, nint, nint, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) ExSpanExtensions.ItemsAppendString<T, TSpan>(TSpan, in T, StringBuilder, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) ExSpanExtensions.ItemsAppendString<T, TSpan>(TSpan, in T, StringBuilder, nint, nint, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) ExSpanExtensions.ItemsToString<T, TSpan>(TSpan, in T, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) ExSpanExtensions.ItemsToString<T, TSpan>(TSpan, in T, nint, nint, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) Methods GetPinnableReference() Returns a reference to the 0th element of the span. If the span is empty, returns null reference. It can be used for pinning and is required to support the use of span within a fixed statement (返回对跨度的第0个元素的引用。如果跨度为空，则返回null引用. 它可用于固定，并且需要支持在 fixed 语句中使用跨度)."
  },
  "api/Zyl.ExSpans.IReadOnlyExSpanBase-1.GetPinnableReadOnlyReference.html": {
    "href": "api/Zyl.ExSpans.IReadOnlyExSpanBase-1.GetPinnableReadOnlyReference.html",
    "title": "Method GetPinnableReadOnlyReference | ExSpans",
    "summary": "Method GetPinnableReadOnlyReference Namespace Zyl.ExSpans Assembly ExSpans.Core.dll GetPinnableReadOnlyReference() Returns a read only reference to the 0th element of the span. If the span is empty, returns null reference. It can be used for pinning and is required to support the use of span within a fixed statement (返回对只读跨度的第0个元素的引用。如果跨度为空，则返回null引用. 它可用于固定，并且需要支持在 fixed 语句中使用跨度). ref readonly T GetPinnableReadOnlyReference() Returns T"
  },
  "api/Zyl.ExSpans.IReadOnlyExSpanBase-1.html": {
    "href": "api/Zyl.ExSpans.IReadOnlyExSpanBase-1.html",
    "title": "Interface IReadOnlyExSpanBase<T> | ExSpans",
    "summary": "Interface IReadOnlyExSpanBase<T> Namespace Zyl.ExSpans Assembly ExSpans.Core.dll The base interface of read only Ex span (只读扩展跨度的基本接口). [FakeCLSCompliant(false)] public interface IReadOnlyExSpanBase<T> : IExLength Type Parameters T The element type (元素的类型). Inherited Members IExLength.Length Extension Methods ExSpanExtensions.IsEmpty(IExLength) ExSpanExtensions.ItemsAppendStringTo<T, TSpan>(TSpan, in T, Action<string>, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) ExSpanExtensions.ItemsAppendStringTo<T, TSpan>(TSpan, in T, Action<string>, nint, nint, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) ExSpanExtensions.ItemsAppendString<T, TSpan>(TSpan, in T, StringBuilder, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) ExSpanExtensions.ItemsAppendString<T, TSpan>(TSpan, in T, StringBuilder, nint, nint, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) ExSpanExtensions.ItemsToString<T, TSpan>(TSpan, in T, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) ExSpanExtensions.ItemsToString<T, TSpan>(TSpan, in T, nint, nint, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) Methods GetPinnableReadOnlyReference() Returns a read only reference to the 0th element of the span. If the span is empty, returns null reference. It can be used for pinning and is required to support the use of span within a fixed statement (返回对只读跨度的第0个元素的引用。如果跨度为空，则返回null引用. 它可用于固定，并且需要支持在 fixed 语句中使用跨度)."
  },
  "api/Zyl.ExSpans.Impl.ArrayHelper.Empty.html": {
    "href": "api/Zyl.ExSpans.Impl.ArrayHelper.Empty.html",
    "title": "Method Empty | ExSpans",
    "summary": "Method Empty Namespace Zyl.ExSpans.Impl Assembly ExSpans.Core.dll Empty<T>() Returns an empty array (返回一个空数组). public static T[] Empty<T>() Returns T[] An empty array (一个空数组). Type Parameters T The type of the elements of the array (数组元素的类型)."
  },
  "api/Zyl.ExSpans.Impl.ArrayHelper.Fill.html": {
    "href": "api/Zyl.ExSpans.Impl.ArrayHelper.Fill.html",
    "title": "Method Fill | ExSpans",
    "summary": "Method Fill Namespace Zyl.ExSpans.Impl Assembly ExSpans.Core.dll Fill<T>(T[], T) Assigns the given value of type T to each element of the specified array. public static void Fill<T>(T[] array, T value) Parameters array T[] The array to be filled. value T The value to assign to each array element. Type Parameters T The type of the elements in the array."
  },
  "api/Zyl.ExSpans.Impl.ArrayHelper.html": {
    "href": "api/Zyl.ExSpans.Impl.ArrayHelper.html",
    "title": "Class ArrayHelper | ExSpans",
    "summary": "Class ArrayHelper Namespace Zyl.ExSpans.Impl Assembly ExSpans.Core.dll Array Helper. public static class ArrayHelper Inheritance object ArrayHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Empty<T>() Returns an empty array (返回一个空数组). Fill<T>(T[], T) Assigns the given value of type T to each element of the specified array."
  },
  "api/Zyl.ExSpans.Impl.BitOperationsHelper.FlipBit.html": {
    "href": "api/Zyl.ExSpans.Impl.BitOperationsHelper.FlipBit.html",
    "title": "Method FlipBit | ExSpans",
    "summary": "Method FlipBit Namespace Zyl.ExSpans.Impl Assembly ExSpans.dll FlipBit(uint, int) Flip the bit at a specific position in a given value. Similar in behavior to the x86 instruction BTC (Bit Test and Complement). [CLSCompliant(false)] public static uint FlipBit(uint value, int index) Parameters value uint The value. index int The zero-based index of the bit to flip. Any value outside the range [0..31] is treated as congruent mod 32. Returns uint The new value. FlipBit(ulong, int) Flip the bit at a specific position in a given value. Similar in behavior to the x86 instruction BTC (Bit Test and Complement). [CLSCompliant(false)] public static ulong FlipBit(ulong value, int index) Parameters value ulong The value. index int The zero-based index of the bit to flip. Any value outside the range [0..63] is treated as congruent mod 64. Returns ulong The new value."
  },
  "api/Zyl.ExSpans.Impl.BitOperationsHelper.ResetLowestSetBit.html": {
    "href": "api/Zyl.ExSpans.Impl.BitOperationsHelper.ResetLowestSetBit.html",
    "title": "Method ResetLowestSetBit | ExSpans",
    "summary": "Method ResetLowestSetBit Namespace Zyl.ExSpans.Impl Assembly ExSpans.dll ResetLowestSetBit(uint) Reset the lowest significant bit in the given value [CLSCompliant(false)] public static uint ResetLowestSetBit(uint value) Parameters value uint The value. Returns uint Returns reset the lowest significant bit in the given value. ResetLowestSetBit(ulong) Reset the lowest significant bit in the given value [CLSCompliant(false)] public static ulong ResetLowestSetBit(ulong value) Parameters value ulong The value. Returns ulong Returns reset the lowest significant bit in the given value."
  },
  "api/Zyl.ExSpans.Impl.BitOperationsHelper.html": {
    "href": "api/Zyl.ExSpans.Impl.BitOperationsHelper.html",
    "title": "Class BitOperationsHelper | ExSpans",
    "summary": "Class BitOperationsHelper Namespace Zyl.ExSpans.Impl Assembly ExSpans.dll BitOperations Helper. public static class BitOperationsHelper Inheritance object BitOperationsHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods FlipBit(uint, int) Flip the bit at a specific position in a given value. Similar in behavior to the x86 instruction BTC (Bit Test and Complement). FlipBit(ulong, int) Flip the bit at a specific position in a given value. Similar in behavior to the x86 instruction BTC (Bit Test and Complement). ResetLowestSetBit(uint) Reset the lowest significant bit in the given value ResetLowestSetBit(ulong) Reset the lowest significant bit in the given value"
  },
  "api/Zyl.ExSpans.Impl.BufferHelper.Memmove.html": {
    "href": "api/Zyl.ExSpans.Impl.BufferHelper.Memmove.html",
    "title": "Method Memmove | ExSpans",
    "summary": "Method Memmove Namespace Zyl.ExSpans.Impl Assembly ExSpans.Core.dll Memmove<T>(ref T, ref readonly T, nuint) Memory move.If some regions of the source area and the destination overlap, the function ensures that the original source bytes in the overlapping region are copied before being overwritten (内存移动. 如果源区域的某些区域与目标区域重叠, 函数可确保在覆盖之前复制重叠区域中的原始源字节). [CLSCompliant(false)] public static void Memmove<T>(ref T destination, ref readonly T source, nuint elementCount) Parameters destination T Destination address (目标地址). source T Source address (源地址). elementCount nuint Element count(元素数量). Type Parameters T The element type (元素的类型)."
  },
  "api/Zyl.ExSpans.Impl.BufferHelper.MemoryCopy.html": {
    "href": "api/Zyl.ExSpans.Impl.BufferHelper.MemoryCopy.html",
    "title": "Method MemoryCopy | ExSpans",
    "summary": "Method MemoryCopy Namespace Zyl.ExSpans.Impl Assembly ExSpans.Core.dll MemoryCopy(void*, void*, long, long) Copies a number of bytes specified as a long integer value from one address in memory to another. .If some regions of the source area and the destination overlap, the function ensures that the original source bytes in the overlapping region are copied before being overwritten (将指定为长整型值的一些字节从内存中的一个地址复制到另一个地址. 如果源区域的某些区域与目标区域重叠, 函数可确保在覆盖之前复制重叠区域中的原始源字节). [CLSCompliant(false)] public static void MemoryCopy(void* source, void* destination, long destinationSizeInBytes, long sourceBytesToCopy) Parameters source void* The address of the bytes to copy (要复制的字节的地址). destination void* The target address (目标地址). destinationSizeInBytes long The number of bytes available in the destination memory block (目标内存块中可用的字节数). sourceBytesToCopy long The number of bytes to copy (要复制的字节数). Exceptions ArgumentOutOfRangeException sourceBytesToCopy is greater than destinationSizeInBytes. MemoryCopy(void*, void*, ulong, ulong) Copies a number of bytes specified as a ulong integer value from one address in memory to another. .If some regions of the source area and the destination overlap, the function ensures that the original source bytes in the overlapping region are copied before being overwritten (将指定为无符号长整型值的一些字节从内存中的一个地址复制到另一个地址. 如果源区域的某些区域与目标区域重叠, 函数可确保在覆盖之前复制重叠区域中的原始源字节). [CLSCompliant(false)] public static void MemoryCopy(void* source, void* destination, ulong destinationSizeInBytes, ulong sourceBytesToCopy) Parameters source void* The address of the bytes to copy (要复制的字节的地址). destination void* The target address (目标地址). destinationSizeInBytes ulong The number of bytes available in the destination memory block (目标内存块中可用的字节数). sourceBytesToCopy ulong The number of bytes to copy (要复制的字节数). Exceptions ArgumentOutOfRangeException sourceBytesToCopy is greater than destinationSizeInBytes."
  },
  "api/Zyl.ExSpans.Impl.BufferHelper.html": {
    "href": "api/Zyl.ExSpans.Impl.BufferHelper.html",
    "title": "Class BufferHelper | ExSpans",
    "summary": "Class BufferHelper Namespace Zyl.ExSpans.Impl Assembly ExSpans.Core.dll Buffer Helper. public static class BufferHelper Inheritance object BufferHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Memmove<T>(ref T, ref readonly T, nuint) Memory move.If some regions of the source area and the destination overlap, the function ensures that the original source bytes in the overlapping region are copied before being overwritten (内存移动. 如果源区域的某些区域与目标区域重叠, 函数可确保在覆盖之前复制重叠区域中的原始源字节). MemoryCopy(void*, void*, long, long) Copies a number of bytes specified as a long integer value from one address in memory to another. .If some regions of the source area and the destination overlap, the function ensures that the original source bytes in the overlapping region are copied before being overwritten (将指定为长整型值的一些字节从内存中的一个地址复制到另一个地址. 如果源区域的某些区域与目标区域重叠, 函数可确保在覆盖之前复制重叠区域中的原始源字节). MemoryCopy(void*, void*, ulong, ulong) Copies a number of bytes specified as a ulong integer value from one address in memory to another. .If some regions of the source area and the destination overlap, the function ensures that the original source bytes in the overlapping region are copied before being overwritten (将指定为无符号长整型值的一些字节从内存中的一个地址复制到另一个地址. 如果源区域的某些区域与目标区域重叠, 函数可确保在覆盖之前复制重叠区域中的原始源字节)."
  },
  "api/Zyl.ExSpans.Impl.CompositeFormatHelper.GetFormattedCount.html": {
    "href": "api/Zyl.ExSpans.Impl.CompositeFormatHelper.GetFormattedCount.html",
    "title": "Method GetFormattedCount | ExSpans",
    "summary": "Method GetFormattedCount Namespace Zyl.ExSpans.Impl Assembly ExSpans.dll GetFormattedCount(CompositeFormat) Get _formattedCount value. public static int GetFormattedCount(CompositeFormat format) Parameters format CompositeFormat The format. Returns int Returns value."
  },
  "api/Zyl.ExSpans.Impl.CompositeFormatHelper.GetLiteralLength.html": {
    "href": "api/Zyl.ExSpans.Impl.CompositeFormatHelper.GetLiteralLength.html",
    "title": "Method GetLiteralLength | ExSpans",
    "summary": "Method GetLiteralLength Namespace Zyl.ExSpans.Impl Assembly ExSpans.dll GetLiteralLength(CompositeFormat) Get _literalLength value. public static int GetLiteralLength(CompositeFormat format) Parameters format CompositeFormat The format. Returns int Returns value."
  },
  "api/Zyl.ExSpans.Impl.CompositeFormatHelper.GetSegments.html": {
    "href": "api/Zyl.ExSpans.Impl.CompositeFormatHelper.GetSegments.html",
    "title": "Method GetSegments | ExSpans",
    "summary": "Method GetSegments Namespace Zyl.ExSpans.Impl Assembly ExSpans.dll GetSegments(CompositeFormat) Get _segments value. public static (string? Literal, int ArgIndex, int Alignment, string? Format)[] GetSegments(CompositeFormat format) Parameters format CompositeFormat The format. Returns (string Literal, int ArgIndex, int Alignment, string Format)[] Returns value."
  },
  "api/Zyl.ExSpans.Impl.CompositeFormatHelper.ValidateNumberOfArgs.html": {
    "href": "api/Zyl.ExSpans.Impl.CompositeFormatHelper.ValidateNumberOfArgs.html",
    "title": "Method ValidateNumberOfArgs | ExSpans",
    "summary": "Method ValidateNumberOfArgs Namespace Zyl.ExSpans.Impl Assembly ExSpans.dll ValidateNumberOfArgs(CompositeFormat, int) Throws an exception if the specified number of arguments is fewer than the number required. public static void ValidateNumberOfArgs(CompositeFormat format, int numArgs) Parameters format CompositeFormat The format. numArgs int The number of arguments provided by the caller. Exceptions FormatException An insufficient number of arguments were provided."
  },
  "api/Zyl.ExSpans.Impl.CompositeFormatHelper.html": {
    "href": "api/Zyl.ExSpans.Impl.CompositeFormatHelper.html",
    "title": "Class CompositeFormatHelper | ExSpans",
    "summary": "Class CompositeFormatHelper Namespace Zyl.ExSpans.Impl Assembly ExSpans.dll CompositeFormat Helper. public static class CompositeFormatHelper Inheritance object CompositeFormatHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetFormattedCount(CompositeFormat) Get _formattedCount value. GetLiteralLength(CompositeFormat) Get _literalLength value. GetSegments(CompositeFormat) Get _segments value. ValidateNumberOfArgs(CompositeFormat, int) Throws an exception if the specified number of arguments is fewer than the number required."
  },
  "api/Zyl.ExSpans.Impl.DebugHelper.Fail.html": {
    "href": "api/Zyl.ExSpans.Impl.DebugHelper.Fail.html",
    "title": "Method Fail | ExSpans",
    "summary": "Method Fail Namespace Zyl.ExSpans.Impl Assembly ExSpans.Core.dll Fail(string?) Emits the specified error message. [Conditional(\"DEBUG\")] public static void Fail(string? message) Parameters message string A message to emit. Fail(string?, string?) Emits an error message and a detailed error message. [Conditional(\"DEBUG\")] public static void Fail(string? message, string? detailMessage) Parameters message string A message to emit. detailMessage string A detailed message to emit."
  },
  "api/Zyl.ExSpans.Impl.DebugHelper.html": {
    "href": "api/Zyl.ExSpans.Impl.DebugHelper.html",
    "title": "Class DebugHelper | ExSpans",
    "summary": "Class DebugHelper Namespace Zyl.ExSpans.Impl Assembly ExSpans.Core.dll Helper methods of Debug (Debug 的帮助方法). public static class DebugHelper Inheritance object DebugHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Fail(string?) Emits the specified error message. Fail(string?, string?) Emits an error message and a detailed error message."
  },
  "api/Zyl.ExSpans.Impl.EnumHelper.TryFormat.html": {
    "href": "api/Zyl.ExSpans.Impl.EnumHelper.TryFormat.html",
    "title": "Method TryFormat | ExSpans",
    "summary": "Method TryFormat Namespace Zyl.ExSpans.Impl Assembly ExSpans.dll TryFormat<TEnum>(TEnum, Span<char>, out int, ReadOnlySpan<char>) Tries to format the value of the enumerated type instance into the provided span of characters. public static bool TryFormat<TEnum>(TEnum value, Span<char> destination, out int charsWritten, ReadOnlySpan<char> format = default) where TEnum : struct Parameters value TEnum destination Span<char> The span into which to write the instance's value formatted as a span of characters. charsWritten int When this method returns, contains the number of characters that were written in destination. format ReadOnlySpan<char> A span containing the character that represents the standard format string that defines the acceptable format of destination. This may be empty, or \"g\", \"d\", \"f\", or \"x\". Returns bool true if the formatting was successful; otherwise, false if the destination span wasn't large enough to contain the formatted value. Type Parameters TEnum Exceptions FormatException The format parameter contains an invalid value."
  },
  "api/Zyl.ExSpans.Impl.EnumHelper.html": {
    "href": "api/Zyl.ExSpans.Impl.EnumHelper.html",
    "title": "Class EnumHelper | ExSpans",
    "summary": "Class EnumHelper Namespace Zyl.ExSpans.Impl Assembly ExSpans.dll Enum Helper. public static class EnumHelper Inheritance object EnumHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods TryFormat<TEnum>(TEnum, Span<char>, out int, ReadOnlySpan<char>) Tries to format the value of the enumerated type instance into the provided span of characters."
  },
  "api/Zyl.ExSpans.Impl.ExUnsafe.Add.html": {
    "href": "api/Zyl.ExSpans.Impl.ExUnsafe.Add.html",
    "title": "Method Add | ExSpans",
    "summary": "Method Add Namespace Zyl.ExSpans.Impl Assembly ExSpans.Core.dll Add<T>(ref T, nint) Adds an element offset to the given managed pointer. public static ref T Add<T>(ref T source, nint elementOffset) Parameters source T The managed pointer to add the offset to. elementOffset nint The offset to add. Returns T A new managed pointer that reflects the addition of the specified offset to the source pointer. Type Parameters T The elemental type of the managed pointer. Add<T>(ref T, nuint) Adds an element offset to the given managed pointer. [CLSCompliant(false)] public static ref T Add<T>(ref T source, nuint elementOffset) Parameters source T The managed pointer to add the offset to. elementOffset nuint The offset to add. Returns T A new managed pointer that reflects the addition of the specified offset to the source pointer. Type Parameters T The elemental type of the managed pointer."
  },
  "api/Zyl.ExSpans.Impl.ExUnsafe.AddAsRef.html": {
    "href": "api/Zyl.ExSpans.Impl.ExUnsafe.AddAsRef.html",
    "title": "Method AddAsRef | ExSpans",
    "summary": "Method AddAsRef Namespace Zyl.ExSpans.Impl Assembly ExSpans.Core.dll AddAsRef<T>(nint, nint) Adds an element offset to the given managed pointer. public static ref T AddAsRef<T>(nint source, nint elementOffset) Parameters source nint The managed pointer to add the offset to. elementOffset nint The offset to add. Returns T A new managed pointer that reflects the addition of the specified offset to the source pointer. Type Parameters T The elemental type of the managed pointer. AddAsRef<T>(nuint, nuint) Adds an element offset to the given managed pointer. [CLSCompliant(false)] public static ref T AddAsRef<T>(nuint source, nuint elementOffset) Parameters source nuint The managed pointer to add the offset to. elementOffset nuint The offset to add. Returns T A new managed pointer that reflects the addition of the specified offset to the source pointer. Type Parameters T The elemental type of the managed pointer."
  },
  "api/Zyl.ExSpans.Impl.ExUnsafe.AddByteOffset.html": {
    "href": "api/Zyl.ExSpans.Impl.ExUnsafe.AddByteOffset.html",
    "title": "Method AddByteOffset | ExSpans",
    "summary": "Method AddByteOffset Namespace Zyl.ExSpans.Impl Assembly ExSpans.Core.dll AddByteOffset<T>(ref T, nint) Adds a byte offset to the given managed pointer. public static ref T AddByteOffset<T>(ref T source, nint byteOffset) Parameters source T The managed pointer to add the offset to. byteOffset nint The offset to add. Returns T A new managed pointer that reflects the addition of the specified byte offset to the source pointer. Type Parameters T The elemental type of the managed pointer. AddByteOffset<T>(ref T, nuint) Adds a byte offset to the given managed pointer. [CLSCompliant(false)] public static ref T AddByteOffset<T>(ref T source, nuint byteOffset) Parameters source T The managed pointer to add the offset to. byteOffset nuint The offset to add. Returns T A new managed pointer that reflects the addition of the specified byte offset to the source pointer. Type Parameters T The elemental type of the managed pointer."
  },
  "api/Zyl.ExSpans.Impl.ExUnsafe.AddPointer.html": {
    "href": "api/Zyl.ExSpans.Impl.ExUnsafe.AddPointer.html",
    "title": "Method AddPointer | ExSpans",
    "summary": "Method AddPointer Namespace Zyl.ExSpans.Impl Assembly ExSpans.Core.dll AddPointer<T>(nint, nint) Native pointer add (原生指针加法). public static nint AddPointer<T>(nint source, nint elementOffset) Parameters source nint The managed pointer to add the offset to. elementOffset nint The offset to add. Returns nint Returns added pointer (返回相加后的指针). Type Parameters T The element type (元素的类型). AddPointer<T>(nuint, nuint) Native pointer add (原生指针加法). [CLSCompliant(false)] public static nuint AddPointer<T>(nuint source, nuint elementOffset) Parameters source nuint The managed pointer to add the offset to. elementOffset nuint The offset to add. Returns nuint Returns added pointer (返回相加后的指针). Type Parameters T The element type (元素的类型)."
  },
  "api/Zyl.ExSpans.Impl.ExUnsafe.AsPointerInt.html": {
    "href": "api/Zyl.ExSpans.Impl.ExUnsafe.AsPointerInt.html",
    "title": "Method AsPointerInt | ExSpans",
    "summary": "Method AsPointerInt Namespace Zyl.ExSpans.Impl Assembly ExSpans.Core.dll AsPointerInt<T>(ref readonly T) Returns a pointer integer to the given by-ref parameter (返回所给引用的指针整数值). public static nint AsPointerInt<T>(ref readonly T value) Parameters value T The object whose pointer is obtained (指针被获取的对象). Returns nint A pointer integer to the given value (所给引用的指针整数值). Type Parameters T The type of object (对象类型)."
  },
  "api/Zyl.ExSpans.Impl.ExUnsafe.BitCast.html": {
    "href": "api/Zyl.ExSpans.Impl.ExUnsafe.BitCast.html",
    "title": "Method BitCast | ExSpans",
    "summary": "Method BitCast Namespace Zyl.ExSpans.Impl Assembly ExSpans.Core.dll BitCast<TFrom, TTo>(TFrom) Reinterprets the given value of type TFrom as a value of type TTo. public static TTo BitCast<TFrom, TTo>(TFrom source) Parameters source TFrom Returns TTo Type Parameters TFrom TTo Exceptions NotSupportedException The sizes of TFrom and TTo are not the same or the type parameters are not structs."
  },
  "api/Zyl.ExSpans.Impl.ExUnsafe.GetByteSize.html": {
    "href": "api/Zyl.ExSpans.Impl.ExUnsafe.GetByteSize.html",
    "title": "Method GetByteSize | ExSpans",
    "summary": "Method GetByteSize Namespace Zyl.ExSpans.Impl Assembly ExSpans.Core.dll GetByteSize<T>(nint) Get byte size (取得字节长度). [CLSCompliant(false)] public static nint GetByteSize<T>(nint length) Parameters length nint The length (长度). Returns nint The byte length (字节长度). Type Parameters T The element type (元素的类型). GetByteSize<T>(nuint) Get byte size (取得字节长度). [CLSCompliant(false)] public static nuint GetByteSize<T>(nuint length) Parameters length nuint The length (长度). Returns nuint The byte length (字节长度). Type Parameters T The element type (元素的类型)."
  },
  "api/Zyl.ExSpans.Impl.ExUnsafe.Subtract.html": {
    "href": "api/Zyl.ExSpans.Impl.ExUnsafe.Subtract.html",
    "title": "Method Subtract | ExSpans",
    "summary": "Method Subtract Namespace Zyl.ExSpans.Impl Assembly ExSpans.Core.dll Subtract<T>(ref T, nint) Subtracts an element offset to the given managed pointer. public static ref T Subtract<T>(ref T source, nint elementOffset) Parameters source T The managed pointer to subtract the offset to. elementOffset nint The offset to subtract. Returns T A new managed pointer that reflects the subtractition of the specified offset to the source pointer. Type Parameters T The elemental type of the managed pointer. Subtract<T>(ref T, nuint) Subtracts an element offset to the given managed pointer. [CLSCompliant(false)] public static ref T Subtract<T>(ref T source, nuint elementOffset) Parameters source T The managed pointer to subtract the offset to. elementOffset nuint The offset to subtract. Returns T A new managed pointer that reflects the subtractition of the specified offset to the source pointer. Type Parameters T The elemental type of the managed pointer."
  },
  "api/Zyl.ExSpans.Impl.ExUnsafe.html": {
    "href": "api/Zyl.ExSpans.Impl.ExUnsafe.html",
    "title": "Class ExUnsafe | ExSpans",
    "summary": "Class ExUnsafe Namespace Zyl.ExSpans.Impl Assembly ExSpans.Core.dll Ex Unsafe methods. public static class ExUnsafe Inheritance object ExUnsafe Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddAsRef<T>(nint, nint) Adds an element offset to the given managed pointer. AddAsRef<T>(nuint, nuint) Adds an element offset to the given managed pointer. AddByteOffset<T>(ref T, nint) Adds a byte offset to the given managed pointer. AddByteOffset<T>(ref T, nuint) Adds a byte offset to the given managed pointer. AddPointer<T>(nint, nint) Native pointer add (原生指针加法). AddPointer<T>(nuint, nuint) Native pointer add (原生指针加法). Add<T>(ref T, nint) Adds an element offset to the given managed pointer. Add<T>(ref T, nuint) Adds an element offset to the given managed pointer. AsPointerInt<T>(ref readonly T) Returns a pointer integer to the given by-ref parameter (返回所给引用的指针整数值). BitCast<TFrom, TTo>(TFrom) Reinterprets the given value of type TFrom as a value of type TTo. GetByteSize<T>(nint) Get byte size (取得字节长度). GetByteSize<T>(nuint) Get byte size (取得字节长度). Subtract<T>(ref T, nint) Subtracts an element offset to the given managed pointer. Subtract<T>(ref T, nuint) Subtracts an element offset to the given managed pointer."
  },
  "api/Zyl.ExSpans.Impl.FakeCLSCompliantAttribute.-ctor.html": {
    "href": "api/Zyl.ExSpans.Impl.FakeCLSCompliantAttribute.-ctor.html",
    "title": "Constructor FakeCLSCompliantAttribute | ExSpans",
    "summary": "Constructor FakeCLSCompliantAttribute Namespace Zyl.ExSpans.Impl Assembly ExSpans.Core.dll FakeCLSCompliantAttribute(bool) Initializes an instance of the System.CLSCompliantAttribute class with a Boolean value indicating whether the indicated program element is CLS-compliant. public FakeCLSCompliantAttribute(bool isCompliant) Parameters isCompliant bool true if CLS-compliant; otherwise, false."
  },
  "api/Zyl.ExSpans.Impl.FakeCLSCompliantAttribute.IsCompliant.html": {
    "href": "api/Zyl.ExSpans.Impl.FakeCLSCompliantAttribute.IsCompliant.html",
    "title": "Property IsCompliant | ExSpans",
    "summary": "Property IsCompliant Namespace Zyl.ExSpans.Impl Assembly ExSpans.Core.dll IsCompliant Gets the Boolean value indicating whether the indicated program element is CLS-compliant. public bool IsCompliant { get; } Property Value bool true if the program element is CLS-compliant; otherwise, false."
  },
  "api/Zyl.ExSpans.Impl.FakeCLSCompliantAttribute.html": {
    "href": "api/Zyl.ExSpans.Impl.FakeCLSCompliantAttribute.html",
    "title": "Class FakeCLSCompliantAttribute | ExSpans",
    "summary": "Class FakeCLSCompliantAttribute Namespace Zyl.ExSpans.Impl Assembly ExSpans.Core.dll Fake - Indicates whether a program element is compliant with the Common Language Specification (CLS). This class cannot be inherited. [AttributeUsage(AttributeTargets.All, Inherited = true, AllowMultiple = false)] public sealed class FakeCLSCompliantAttribute : Attribute Inheritance object Attribute FakeCLSCompliantAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods ExSpanExtensions.ItemsAppendStringTo<T, TSpan>(TSpan, in T, Action<string>, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) ExSpanExtensions.ItemsAppendStringTo<T, TSpan>(TSpan, in T, Action<string>, nint, nint, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) ExSpanExtensions.ItemsAppendString<T, TSpan>(TSpan, in T, StringBuilder, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) ExSpanExtensions.ItemsAppendString<T, TSpan>(TSpan, in T, StringBuilder, nint, nint, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) ExSpanExtensions.ItemsToString<T, TSpan>(TSpan, in T, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) ExSpanExtensions.ItemsToString<T, TSpan>(TSpan, in T, nint, nint, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) Constructors FakeCLSCompliantAttribute(bool) Initializes an instance of the System.CLSCompliantAttribute class with a Boolean value indicating whether the indicated program element is CLS-compliant. Properties IsCompliant Gets the Boolean value indicating whether the indicated program element is CLS-compliant."
  },
  "api/Zyl.ExSpans.Impl.MemoryMarshalHelper.CreateReadOnlySpanSaturating.html": {
    "href": "api/Zyl.ExSpans.Impl.MemoryMarshalHelper.CreateReadOnlySpanSaturating.html",
    "title": "Method CreateReadOnlySpanSaturating | ExSpans",
    "summary": "Method CreateReadOnlySpanSaturating Namespace Zyl.ExSpans.Impl Assembly ExSpans.Core.dll CreateReadOnlySpanSaturating<T>(ref T, nint) [Saturating] Creates a new read-only span over a portion of a regular managed object. [FakeCLSCompliant(false)] public static ReadOnlySpan<T> CreateReadOnlySpanSaturating<T>(ref T reference, nint length) Parameters reference T A reference to data. length nint The number of T elements that reference contains. Returns ReadOnlySpan<T> A read-only span. Type Parameters T The type of the data items."
  },
  "api/Zyl.ExSpans.Impl.MemoryMarshalHelper.CreateSpanSaturating.html": {
    "href": "api/Zyl.ExSpans.Impl.MemoryMarshalHelper.CreateSpanSaturating.html",
    "title": "Method CreateSpanSaturating | ExSpans",
    "summary": "Method CreateSpanSaturating Namespace Zyl.ExSpans.Impl Assembly ExSpans.Core.dll CreateSpanSaturating<T>(ref T, nint) [Saturating] Creates a new span over a portion of a regular managed object. [FakeCLSCompliant(false)] public static Span<T> CreateSpanSaturating<T>(ref T reference, nint length) Parameters reference T A reference to data. length nint The number of T elements that reference contains. Returns Span<T> A span. Type Parameters T The type of the data items."
  },
  "api/Zyl.ExSpans.Impl.MemoryMarshalHelper.GetSpanSaturatingLength.html": {
    "href": "api/Zyl.ExSpans.Impl.MemoryMarshalHelper.GetSpanSaturatingLength.html",
    "title": "Method GetSpanSaturatingLength | ExSpans",
    "summary": "Method GetSpanSaturatingLength Namespace Zyl.ExSpans.Impl Assembly ExSpans.Core.dll GetSpanSaturatingLength(nint) Get the saturating length of the span (取得跨度的饱和长度). [FakeCLSCompliant(false)] public static int GetSpanSaturatingLength(nint length) Parameters length nint The length of the span (跨度的长度) Returns int The saturating length of the span (跨度的饱和长度)."
  },
  "api/Zyl.ExSpans.Impl.MemoryMarshalHelper.html": {
    "href": "api/Zyl.ExSpans.Impl.MemoryMarshalHelper.html",
    "title": "Class MemoryMarshalHelper | ExSpans",
    "summary": "Class MemoryMarshalHelper Namespace Zyl.ExSpans.Impl Assembly ExSpans.Core.dll MemoryMarshal helper. public static class MemoryMarshalHelper Inheritance object MemoryMarshalHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CreateReadOnlySpanSaturating<T>(ref T, nint) [Saturating] Creates a new read-only span over a portion of a regular managed object. CreateSpanSaturating<T>(ref T, nint) [Saturating] Creates a new span over a portion of a regular managed object. GetSpanSaturatingLength(nint) Get the saturating length of the span (取得跨度的饱和长度)."
  },
  "api/Zyl.ExSpans.Impl.StringHelper.CheckStringComparison.html": {
    "href": "api/Zyl.ExSpans.Impl.StringHelper.CheckStringComparison.html",
    "title": "Method CheckStringComparison | ExSpans",
    "summary": "Method CheckStringComparison Namespace Zyl.ExSpans.Impl Assembly ExSpans.dll CheckStringComparison(StringComparison) Check StringComparison. public static void CheckStringComparison(StringComparison comparisonType) Parameters comparisonType StringComparison Source comparisonType."
  },
  "api/Zyl.ExSpans.Impl.StringHelper.HasCustomFormatter.html": {
    "href": "api/Zyl.ExSpans.Impl.StringHelper.HasCustomFormatter.html",
    "title": "Method HasCustomFormatter | ExSpans",
    "summary": "Method HasCustomFormatter Namespace Zyl.ExSpans.Impl Assembly ExSpans.dll HasCustomFormatter(IFormatProvider) Gets whether the provider provides a custom formatter. public static bool HasCustomFormatter(IFormatProvider provider) Parameters provider IFormatProvider Returns bool"
  },
  "api/Zyl.ExSpans.Impl.StringHelper.html": {
    "href": "api/Zyl.ExSpans.Impl.StringHelper.html",
    "title": "Class StringHelper | ExSpans",
    "summary": "Class StringHelper Namespace Zyl.ExSpans.Impl Assembly ExSpans.dll string Helper. public static class StringHelper Inheritance object StringHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckStringComparison(StringComparison) Check StringComparison. HasCustomFormatter(IFormatProvider) Gets whether the provider provides a custom formatter."
  },
  "api/Zyl.ExSpans.Impl.Vector128Helper.Equals.html": {
    "href": "api/Zyl.ExSpans.Impl.Vector128Helper.Equals.html",
    "title": "Method Equals | ExSpans",
    "summary": "Method Equals Namespace Zyl.ExSpans.Impl Assembly ExSpans.dll Equals<T>(Vector128<T>, Vector128<T>) Compares two vectors to determine if they are equal on a per-element basis. public static Vector128<T> Equals<T>(Vector128<T> left, Vector128<T> right) Parameters left Vector128<T> The vector to compare with right. right Vector128<T> The vector to compare with left. Returns Vector128<T> A vector whose elements are all-bits-set or zero, depending on if the corresponding elements in left and right were equal. Type Parameters T Exceptions NotSupportedException The type of left and right (T) is not supported."
  },
  "api/Zyl.ExSpans.Impl.Vector128Helper.EqualsAll.html": {
    "href": "api/Zyl.ExSpans.Impl.Vector128Helper.EqualsAll.html",
    "title": "Method EqualsAll | ExSpans",
    "summary": "Method EqualsAll Namespace Zyl.ExSpans.Impl Assembly ExSpans.dll EqualsAll<T>(Vector128<T>, Vector128<T>) Compares two vectors to determine if all elements are equal. public static bool EqualsAll<T>(Vector128<T> left, Vector128<T> right) Parameters left Vector128<T> The vector to compare with right. right Vector128<T> The vector to compare with left. Returns bool true if all elements in left was equal to the corresponding element in right. Type Parameters T The type of the elements in the vector. Exceptions NotSupportedException The type of left and right (T) is not supported."
  },
  "api/Zyl.ExSpans.Impl.Vector128Helper.EqualsAny.html": {
    "href": "api/Zyl.ExSpans.Impl.Vector128Helper.EqualsAny.html",
    "title": "Method EqualsAny | ExSpans",
    "summary": "Method EqualsAny Namespace Zyl.ExSpans.Impl Assembly ExSpans.dll EqualsAny<T>(Vector128<T>, Vector128<T>) Compares two vectors to determine if any elements are equal. public static bool EqualsAny<T>(Vector128<T> left, Vector128<T> right) Parameters left Vector128<T> The vector to compare with right. right Vector128<T> The vector to compare with left. Returns bool true if any elements in left was equal to the corresponding element in right. Type Parameters T The type of the elements in the vector. Exceptions NotSupportedException The type of left and right (T) is not supported."
  },
  "api/Zyl.ExSpans.Impl.Vector128Helper.ExtractMostSignificantBits.html": {
    "href": "api/Zyl.ExSpans.Impl.Vector128Helper.ExtractMostSignificantBits.html",
    "title": "Method ExtractMostSignificantBits | ExSpans",
    "summary": "Method ExtractMostSignificantBits Namespace Zyl.ExSpans.Impl Assembly ExSpans.dll ExtractMostSignificantBits<T>(Vector128<T>) Extracts the most significant bit from each element in a vector. [CLSCompliant(false)] public static uint ExtractMostSignificantBits<T>(Vector128<T> vector) Parameters vector Vector128<T> The vector whose elements should have their most significant bit extracted. Returns uint The packed most significant bits extracted from the elements in vector. Type Parameters T The type of the elements in the vector. Exceptions NotSupportedException The type of vector (T) is not supported."
  },
  "api/Zyl.ExSpans.Impl.Vector128Helper.LastIndexOf.html": {
    "href": "api/Zyl.ExSpans.Impl.Vector128Helper.LastIndexOf.html",
    "title": "Method LastIndexOf | ExSpans",
    "summary": "Method LastIndexOf Namespace Zyl.ExSpans.Impl Assembly ExSpans.dll LastIndexOf<T>(Vector128<T>, T) Determines the index of the last element in a vector that is equal to a given value. public static int LastIndexOf<T>(Vector128<T> vector, T value) where T : struct Parameters vector Vector128<T> The vector whose elements are being checked. value T The value to check for in vector Returns int The index into vector representing the last element that was equal to value; otherwise, -1 if no such element exists. Type Parameters T The type of the elements in the vector. Exceptions NotSupportedException The type of vector and value (T) is not supported."
  },
  "api/Zyl.ExSpans.Impl.Vector128Helper.LastIndexOfWhereAllBitsSet.html": {
    "href": "api/Zyl.ExSpans.Impl.Vector128Helper.LastIndexOfWhereAllBitsSet.html",
    "title": "Method LastIndexOfWhereAllBitsSet | ExSpans",
    "summary": "Method LastIndexOfWhereAllBitsSet Namespace Zyl.ExSpans.Impl Assembly ExSpans.dll LastIndexOfWhereAllBitsSet<T>(Vector128<T>) Determines the index of the last element in a vector that has all bits set. public static int LastIndexOfWhereAllBitsSet<T>(Vector128<T> vector) where T : struct Parameters vector Vector128<T> The vector whose elements are being checked. Returns int The index into vector representing the last element that had all bits set; otherwise, -1 if no such element exists. Type Parameters T The type of the elements in the vector. Exceptions NotSupportedException The type of vector (T) is not supported."
  },
  "api/Zyl.ExSpans.Impl.Vector128Helper.html": {
    "href": "api/Zyl.ExSpans.Impl.Vector128Helper.html",
    "title": "Class Vector128Helper | ExSpans",
    "summary": "Class Vector128Helper Namespace Zyl.ExSpans.Impl Assembly ExSpans.dll Vector128 Helper. public static class Vector128Helper Inheritance object Vector128Helper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods EqualsAll<T>(Vector128<T>, Vector128<T>) Compares two vectors to determine if all elements are equal. EqualsAny<T>(Vector128<T>, Vector128<T>) Compares two vectors to determine if any elements are equal. Equals<T>(Vector128<T>, Vector128<T>) Compares two vectors to determine if they are equal on a per-element basis. ExtractMostSignificantBits<T>(Vector128<T>) Extracts the most significant bit from each element in a vector. LastIndexOfWhereAllBitsSet<T>(Vector128<T>) Determines the index of the last element in a vector that has all bits set. LastIndexOf<T>(Vector128<T>, T) Determines the index of the last element in a vector that is equal to a given value."
  },
  "api/Zyl.ExSpans.Impl.Vector256Helper.Equals.html": {
    "href": "api/Zyl.ExSpans.Impl.Vector256Helper.Equals.html",
    "title": "Method Equals | ExSpans",
    "summary": "Method Equals Namespace Zyl.ExSpans.Impl Assembly ExSpans.dll Equals<T>(Vector256<T>, Vector256<T>) Compares two vectors to determine if they are equal on a per-element basis. public static Vector256<T> Equals<T>(Vector256<T> left, Vector256<T> right) Parameters left Vector256<T> The vector to compare with right. right Vector256<T> The vector to compare with left. Returns Vector256<T> A vector whose elements are all-bits-set or zero, depending on if the corresponding elements in left and right were equal. Type Parameters T Exceptions NotSupportedException The type of left and right (T) is not supported."
  },
  "api/Zyl.ExSpans.Impl.Vector256Helper.EqualsAll.html": {
    "href": "api/Zyl.ExSpans.Impl.Vector256Helper.EqualsAll.html",
    "title": "Method EqualsAll | ExSpans",
    "summary": "Method EqualsAll Namespace Zyl.ExSpans.Impl Assembly ExSpans.dll EqualsAll<T>(Vector256<T>, Vector256<T>) Compares two vectors to determine if all elements are equal. public static bool EqualsAll<T>(Vector256<T> left, Vector256<T> right) Parameters left Vector256<T> The vector to compare with right. right Vector256<T> The vector to compare with left. Returns bool true if all elements in left was equal to the corresponding element in right. Type Parameters T The type of the elements in the vector. Exceptions NotSupportedException The type of left and right (T) is not supported."
  },
  "api/Zyl.ExSpans.Impl.Vector256Helper.EqualsAny.html": {
    "href": "api/Zyl.ExSpans.Impl.Vector256Helper.EqualsAny.html",
    "title": "Method EqualsAny | ExSpans",
    "summary": "Method EqualsAny Namespace Zyl.ExSpans.Impl Assembly ExSpans.dll EqualsAny<T>(Vector256<T>, Vector256<T>) Compares two vectors to determine if any elements are equal. public static bool EqualsAny<T>(Vector256<T> left, Vector256<T> right) Parameters left Vector256<T> The vector to compare with right. right Vector256<T> The vector to compare with left. Returns bool true if any elements in left was equal to the corresponding element in right. Type Parameters T The type of the elements in the vector. Exceptions NotSupportedException The type of left and right (T) is not supported."
  },
  "api/Zyl.ExSpans.Impl.Vector256Helper.ExtractMostSignificantBits.html": {
    "href": "api/Zyl.ExSpans.Impl.Vector256Helper.ExtractMostSignificantBits.html",
    "title": "Method ExtractMostSignificantBits | ExSpans",
    "summary": "Method ExtractMostSignificantBits Namespace Zyl.ExSpans.Impl Assembly ExSpans.dll ExtractMostSignificantBits<T>(Vector256<T>) Extracts the most significant bit from each element in a vector. [CLSCompliant(false)] public static uint ExtractMostSignificantBits<T>(Vector256<T> vector) Parameters vector Vector256<T> The vector whose elements should have their most significant bit extracted. Returns uint The packed most significant bits extracted from the elements in vector. Type Parameters T The type of the elements in the vector. Exceptions NotSupportedException The type of vector (T) is not supported."
  },
  "api/Zyl.ExSpans.Impl.Vector256Helper.LastIndexOf.html": {
    "href": "api/Zyl.ExSpans.Impl.Vector256Helper.LastIndexOf.html",
    "title": "Method LastIndexOf | ExSpans",
    "summary": "Method LastIndexOf Namespace Zyl.ExSpans.Impl Assembly ExSpans.dll LastIndexOf<T>(Vector256<T>, T) Determines the index of the last element in a vector that is equal to a given value. public static int LastIndexOf<T>(Vector256<T> vector, T value) where T : struct Parameters vector Vector256<T> The vector whose elements are being checked. value T The value to check for in vector Returns int The index into vector representing the last element that was equal to value; otherwise, -1 if no such element exists. Type Parameters T The type of the elements in the vector. Exceptions NotSupportedException The type of vector and value (T) is not supported."
  },
  "api/Zyl.ExSpans.Impl.Vector256Helper.LastIndexOfWhereAllBitsSet.html": {
    "href": "api/Zyl.ExSpans.Impl.Vector256Helper.LastIndexOfWhereAllBitsSet.html",
    "title": "Method LastIndexOfWhereAllBitsSet | ExSpans",
    "summary": "Method LastIndexOfWhereAllBitsSet Namespace Zyl.ExSpans.Impl Assembly ExSpans.dll LastIndexOfWhereAllBitsSet<T>(Vector256<T>) Determines the index of the last element in a vector that has all bits set. public static int LastIndexOfWhereAllBitsSet<T>(Vector256<T> vector) where T : struct Parameters vector Vector256<T> The vector whose elements are being checked. Returns int The index into vector representing the last element that had all bits set; otherwise, -1 if no such element exists. Type Parameters T The type of the elements in the vector. Exceptions NotSupportedException The type of vector (T) is not supported."
  },
  "api/Zyl.ExSpans.Impl.Vector256Helper.html": {
    "href": "api/Zyl.ExSpans.Impl.Vector256Helper.html",
    "title": "Class Vector256Helper | ExSpans",
    "summary": "Class Vector256Helper Namespace Zyl.ExSpans.Impl Assembly ExSpans.dll Vector256 Helper. public static class Vector256Helper Inheritance object Vector256Helper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods EqualsAll<T>(Vector256<T>, Vector256<T>) Compares two vectors to determine if all elements are equal. EqualsAny<T>(Vector256<T>, Vector256<T>) Compares two vectors to determine if any elements are equal. Equals<T>(Vector256<T>, Vector256<T>) Compares two vectors to determine if they are equal on a per-element basis. ExtractMostSignificantBits<T>(Vector256<T>) Extracts the most significant bit from each element in a vector. LastIndexOfWhereAllBitsSet<T>(Vector256<T>) Determines the index of the last element in a vector that has all bits set. LastIndexOf<T>(Vector256<T>, T) Determines the index of the last element in a vector that is equal to a given value."
  },
  "api/Zyl.ExSpans.Impl.Vector512Helper.LastIndexOf.html": {
    "href": "api/Zyl.ExSpans.Impl.Vector512Helper.LastIndexOf.html",
    "title": "Method LastIndexOf | ExSpans",
    "summary": "Method LastIndexOf Namespace Zyl.ExSpans.Impl Assembly ExSpans.dll LastIndexOf<T>(Vector512<T>, T) Determines the index of the last element in a vector that is equal to a given value. public static int LastIndexOf<T>(Vector512<T> vector, T value) where T : struct Parameters vector Vector512<T> The vector whose elements are being checked. value T The value to check for in vector Returns int The index into vector representing the last element that was equal to value; otherwise, -1 if no such element exists. Type Parameters T The type of the elements in the vector. Exceptions NotSupportedException The type of vector and value (T) is not supported."
  },
  "api/Zyl.ExSpans.Impl.Vector512Helper.LastIndexOfWhereAllBitsSet.html": {
    "href": "api/Zyl.ExSpans.Impl.Vector512Helper.LastIndexOfWhereAllBitsSet.html",
    "title": "Method LastIndexOfWhereAllBitsSet | ExSpans",
    "summary": "Method LastIndexOfWhereAllBitsSet Namespace Zyl.ExSpans.Impl Assembly ExSpans.dll LastIndexOfWhereAllBitsSet<T>(Vector512<T>) Determines the index of the last element in a vector that has all bits set. public static int LastIndexOfWhereAllBitsSet<T>(Vector512<T> vector) where T : struct Parameters vector Vector512<T> The vector whose elements are being checked. Returns int The index into vector representing the last element that had all bits set; otherwise, -1 if no such element exists. Type Parameters T The type of the elements in the vector. Exceptions NotSupportedException The type of vector (T) is not supported."
  },
  "api/Zyl.ExSpans.Impl.Vector512Helper.html": {
    "href": "api/Zyl.ExSpans.Impl.Vector512Helper.html",
    "title": "Class Vector512Helper | ExSpans",
    "summary": "Class Vector512Helper Namespace Zyl.ExSpans.Impl Assembly ExSpans.dll Vector512 Helper. public static class Vector512Helper Inheritance object Vector512Helper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods LastIndexOfWhereAllBitsSet<T>(Vector512<T>) Determines the index of the last element in a vector that has all bits set. LastIndexOf<T>(Vector512<T>, T) Determines the index of the last element in a vector that is equal to a given value."
  },
  "api/Zyl.ExSpans.Impl.VectorHelper.ExtractMostSignificantBits.html": {
    "href": "api/Zyl.ExSpans.Impl.VectorHelper.ExtractMostSignificantBits.html",
    "title": "Method ExtractMostSignificantBits | ExSpans",
    "summary": "Method ExtractMostSignificantBits Namespace Zyl.ExSpans.Impl Assembly ExSpans.dll ExtractMostSignificantBits<T>(Vector<T>) Extracts the most significant bit from each element in a vector. [CLSCompliant(false)] public static ulong ExtractMostSignificantBits<T>(this Vector<T> vector) where T : struct Parameters vector Vector<T> The vector whose elements should have their most significant bit extracted. Returns ulong The packed most significant bits extracted from the elements in vector. Type Parameters T The type of the elements in the vector. Exceptions NotSupportedException The type of vector (T) is not supported."
  },
  "api/Zyl.ExSpans.Impl.VectorHelper.LastIndexOf.html": {
    "href": "api/Zyl.ExSpans.Impl.VectorHelper.LastIndexOf.html",
    "title": "Method LastIndexOf | ExSpans",
    "summary": "Method LastIndexOf Namespace Zyl.ExSpans.Impl Assembly ExSpans.dll LastIndexOf<T>(Vector<T>, T) Determines the index of the last element in a vector that is equal to a given value. public static int LastIndexOf<T>(Vector<T> vector, T value) where T : struct Parameters vector Vector<T> The vector whose elements are being checked. value T The value to check for in vector Returns int The index into vector representing the last element that was equal to value; otherwise, -1 if no such element exists. Type Parameters T The type of the elements in the vector. Exceptions NotSupportedException The type of vector and value (T) is not supported."
  },
  "api/Zyl.ExSpans.Impl.VectorHelper.LastIndexOfWhereAllBitsSet.html": {
    "href": "api/Zyl.ExSpans.Impl.VectorHelper.LastIndexOfWhereAllBitsSet.html",
    "title": "Method LastIndexOfWhereAllBitsSet | ExSpans",
    "summary": "Method LastIndexOfWhereAllBitsSet Namespace Zyl.ExSpans.Impl Assembly ExSpans.dll LastIndexOfWhereAllBitsSet<T>(Vector<T>) Determines the index of the last element in a vector that has all bits set. public static int LastIndexOfWhereAllBitsSet<T>(Vector<T> vector) where T : struct Parameters vector Vector<T> The vector whose elements are being checked. Returns int The index into vector representing the last element that had all bits set; otherwise, -1 if no such element exists. Type Parameters T The type of the elements in the vector. Exceptions NotSupportedException The type of vector (T) is not supported."
  },
  "api/Zyl.ExSpans.Impl.VectorHelper.LoadUnsafe.html": {
    "href": "api/Zyl.ExSpans.Impl.VectorHelper.LoadUnsafe.html",
    "title": "Method LoadUnsafe | ExSpans",
    "summary": "Method LoadUnsafe Namespace Zyl.ExSpans.Impl Assembly ExSpans.dll LoadUnsafe<T>(ref readonly T, nuint) Loads a vector from the given source and element offset. [CLSCompliant(false)] public static Vector<T> LoadUnsafe<T>(ref readonly T source, nuint elementOffset) Parameters source T The source to which elementOffset will be added before loading the vector. elementOffset nuint The element offset from source from which the vector will be loaded. Returns Vector<T> The vector loaded from source plus elementOffset. Type Parameters T The type of the elements in the vector. Exceptions NotSupportedException The type of source (T) is not supported. LoadUnsafe<T>(ref readonly T) Loads a vector from the given source. public static Vector<T> LoadUnsafe<T>(ref readonly T source) Parameters source T The source from which the vector will be loaded. Returns Vector<T> The vector loaded from source. Type Parameters T The type of the elements in the vector. Exceptions NotSupportedException The type of source (T) is not supported."
  },
  "api/Zyl.ExSpans.Impl.VectorHelper.StoreUnsafe.html": {
    "href": "api/Zyl.ExSpans.Impl.VectorHelper.StoreUnsafe.html",
    "title": "Method StoreUnsafe | ExSpans",
    "summary": "Method StoreUnsafe Namespace Zyl.ExSpans.Impl Assembly ExSpans.dll StoreUnsafe<T>(Vector<T>, ref T) Stores a vector at the given destination. public static void StoreUnsafe<T>(Vector<T> source, ref T destination) Parameters source Vector<T> The vector that will be stored. destination T The destination at which source will be stored. Type Parameters T The type of the elements in the vector. Exceptions NotSupportedException The type of source (T) is not supported. StoreUnsafe<T>(Vector<T>, ref T, nuint) Stores a vector at the given destination. [CLSCompliant(false)] public static void StoreUnsafe<T>(Vector<T> source, ref T destination, nuint elementOffset) Parameters source Vector<T> The vector that will be stored. destination T The destination to which elementOffset will be added before the vector will be stored. elementOffset nuint The element offset from destination from which the vector will be stored. Type Parameters T The type of the elements in the vector."
  },
  "api/Zyl.ExSpans.Impl.VectorHelper.html": {
    "href": "api/Zyl.ExSpans.Impl.VectorHelper.html",
    "title": "Class VectorHelper | ExSpans",
    "summary": "Class VectorHelper Namespace Zyl.ExSpans.Impl Assembly ExSpans.dll Vector Helper. public static class VectorHelper Inheritance object VectorHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ExtractMostSignificantBits<T>(Vector<T>) Extracts the most significant bit from each element in a vector. LastIndexOfWhereAllBitsSet<T>(Vector<T>) Determines the index of the last element in a vector that has all bits set. LastIndexOf<T>(Vector<T>, T) Determines the index of the last element in a vector that is equal to a given value. LoadUnsafe<T>(ref readonly T) Loads a vector from the given source. LoadUnsafe<T>(ref readonly T, nuint) Loads a vector from the given source and element offset. StoreUnsafe<T>(Vector<T>, ref T) Stores a vector at the given destination. StoreUnsafe<T>(Vector<T>, ref T, nuint) Stores a vector at the given destination."
  },
  "api/Zyl.ExSpans.Impl.html": {
    "href": "api/Zyl.ExSpans.Impl.html",
    "title": "Namespace Zyl.ExSpans.Impl | ExSpans",
    "summary": "Namespace Zyl.ExSpans.Impl Classes ArrayHelper Array Helper. BitOperationsHelper BitOperations Helper. BufferHelper Buffer Helper. CompositeFormatHelper CompositeFormat Helper. DebugHelper Helper methods of Debug (Debug 的帮助方法). EnumHelper Enum Helper. ExUnsafe Ex Unsafe methods. FakeCLSCompliantAttribute Fake - Indicates whether a program element is compliant with the Common Language Specification (CLS). This class cannot be inherited. MemoryMarshalHelper MemoryMarshal helper. StringHelper string Helper. Vector128Helper Vector128 Helper. Vector256Helper Vector256 Helper. Vector512Helper Vector512 Helper. VectorHelper Vector Helper."
  },
  "api/Zyl.ExSpans.ItemFormaters.Default.html": {
    "href": "api/Zyl.ExSpans.ItemFormaters.Default.html",
    "title": "Method Default | ExSpans",
    "summary": "Method Default Namespace Zyl.ExSpans Assembly ExSpans.Core.dll Default<T>(nint, T) The formater of each item - Default (各项的格式化器 - 默认). [FakeCLSCompliant(false)] public static string Default<T>(nint index, T value) Parameters index nint Item index (项的索引). value T Item value (项的值). Returns string A formatted string (格式化后的字符串). Type Parameters T The element type (元素的类型)."
  },
  "api/Zyl.ExSpans.ItemFormaters.Hex.html": {
    "href": "api/Zyl.ExSpans.ItemFormaters.Hex.html",
    "title": "Method Hex | ExSpans",
    "summary": "Method Hex Namespace Zyl.ExSpans Assembly ExSpans.Core.dll Hex<T>(nint, T) The formater of each item - Hexadecimal (各项的格式化器 - 十六进制). [FakeCLSCompliant(false)] public static string Hex<T>(nint index, T value) Parameters index nint Item index (项的索引). value T Item value (项的值). Returns string A formatted string (格式化后的字符串). Type Parameters T The element type (元素的类型)."
  },
  "api/Zyl.ExSpans.ItemFormaters.html": {
    "href": "api/Zyl.ExSpans.ItemFormaters.html",
    "title": "Class ItemFormaters | ExSpans",
    "summary": "Class ItemFormaters Namespace Zyl.ExSpans Assembly ExSpans.Core.dll The formaters of each item (各项的格式化器集). public static class ItemFormaters Inheritance object ItemFormaters Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Default<T>(nint, T) The formater of each item - Default (各项的格式化器 - 默认). Hex<T>(nint, T) The formater of each item - Hexadecimal (各项的格式化器 - 十六进制). See Also ItemsToString<T>(ReadOnlyExSpan<T>, Func<nint, T, string>, ItemsToStringFlags, TypeNameFlags)"
  },
  "api/Zyl.ExSpans.ItemsToStringFlags.html": {
    "href": "api/Zyl.ExSpans.ItemsToStringFlags.html",
    "title": "Enum ItemsToStringFlags | ExSpans",
    "summary": "Enum ItemsToStringFlags Namespace Zyl.ExSpans Assembly ExSpans.Core.dll Flags for convert items data into string (各项数据转字符串的标志). [Flags] public enum ItemsToStringFlags Extension Methods ExSpanExtensions.ItemsAppendStringTo<T, TSpan>(TSpan, in T, Action<string>, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) ExSpanExtensions.ItemsAppendStringTo<T, TSpan>(TSpan, in T, Action<string>, nint, nint, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) ExSpanExtensions.ItemsAppendString<T, TSpan>(TSpan, in T, StringBuilder, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) ExSpanExtensions.ItemsAppendString<T, TSpan>(TSpan, in T, StringBuilder, nint, nint, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) ExSpanExtensions.ItemsToString<T, TSpan>(TSpan, in T, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) ExSpanExtensions.ItemsToString<T, TSpan>(TSpan, in T, nint, nint, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) Fields Default = 0 Default (默认). HideBrace = 4 Hide brace (隐藏大括号). The brace are { or } symbols. HideLength = 2 Hide length (隐藏长度). HideType = 1 Hide type name (隐藏类型名)."
  },
  "api/Zyl.ExSpans.ItemsToStringFlagsUtil.All.html": {
    "href": "api/Zyl.ExSpans.ItemsToStringFlagsUtil.All.html",
    "title": "Field All | ExSpans",
    "summary": "Field All Namespace Zyl.ExSpans Assembly ExSpans.Core.dll All flags of ItemsToStringFlags (ItemsToStringFlags的所有标志). public static readonly ItemsToStringFlags All Returns ItemsToStringFlags All flags of (ItemsToStringFlags的所有标志)."
  },
  "api/Zyl.ExSpans.ItemsToStringFlagsUtil.html": {
    "href": "api/Zyl.ExSpans.ItemsToStringFlagsUtil.html",
    "title": "Class ItemsToStringFlagsUtil | ExSpans",
    "summary": "Class ItemsToStringFlagsUtil Namespace Zyl.ExSpans Assembly ExSpans.Core.dll The utilities of flags for convert items data into string (各项数据转字符串的标志的工具) public static class ItemsToStringFlagsUtil Inheritance object ItemsToStringFlagsUtil Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields All All flags of ItemsToStringFlags (ItemsToStringFlags的所有标志). See Also ItemsToStringFlags"
  },
  "api/Zyl.ExSpans.ReadOnlyExSpan-1.-ctor.html": {
    "href": "api/Zyl.ExSpans.ReadOnlyExSpan-1.-ctor.html",
    "title": "Constructor ReadOnlyExSpan | ExSpans",
    "summary": "Constructor ReadOnlyExSpan Namespace Zyl.ExSpans Assembly ExSpans.Core.dll ReadOnlyExSpan(T[]?) Creates a new ReadOnlyExSpan<T> over the entirety of the target array (在整个指定数组中创建新的 ReadOnlyExSpan<T>). public ReadOnlyExSpan(T[]? array) Parameters array T[] The target array (指定数组). Remarks Returns default when array is null (当 array 为 null 时返回默认值). ReadOnlyExSpan(T[]?, nint, nint) Creates a new ReadOnlyExSpan<T> over the portion of the target array beginning at 'start' index and ending at 'end' index (exclusive) (创建一个新的 ReadOnlyExSpan<T>，其中包含从指定索引开始的数组的指定数量的元素). [FakeCLSCompliant(false)] public ReadOnlyExSpan(T[]? array, nint start, nint length) Parameters array T[] The target array (指定数组). start nint The zero-based index at which to begin the span (从零开始的跨度索引). length nint The number of items in the span (跨度的项数). Remarks Returns default when array is null (当 array 为 null 时返回默认值). Exceptions ArgumentOutOfRangeException Thrown when the specified start or end index is not in the range (<0 or >Length). ReadOnlyExSpan(void*, nint) Creates a new ReadOnlyExSpan<T> over the target unmanaged buffer (在目标非托管缓冲区上创建新 ReadOnlyExSpan<T>). [CLSCompliant(false)] public ReadOnlyExSpan(void* pointer, nint length) Parameters pointer void* An unmanaged pointer to memory (指向内存的非托管指针). length nint The number of T elements the memory contains (内存中包含的 T 元素数量). Exceptions ArgumentException Thrown when T is reference type or contains pointers and hence cannot be stored in unmanaged memory. ReadOnlyExSpan(ref readonly T) Creates a new ReadOnlyExSpan<T> of length 1 around the specified reference (在指定的引用周围创建长度为 1 的新 ReadOnlyExSpan<T>). public ReadOnlyExSpan(ref readonly T reference) Parameters reference T A reference to data (数据的引用)."
  },
  "api/Zyl.ExSpans.ReadOnlyExSpan-1.CastUp.html": {
    "href": "api/Zyl.ExSpans.ReadOnlyExSpan-1.CastUp.html",
    "title": "Method CastUp | ExSpans",
    "summary": "Method CastUp Namespace Zyl.ExSpans Assembly ExSpans.Core.dll CastUp<TDerived>(ReadOnlyExSpan<TDerived>) Casts a read-only ExSpan of TDerived to a read-only ExSpan of T. public static ReadOnlyExSpan<T> CastUp<TDerived>(ReadOnlyExSpan<TDerived> items) where TDerived : class?, T Parameters items ReadOnlyExSpan<TDerived> The source read-only ExSpan. No copy is made. Returns ReadOnlyExSpan<T> A read-only ExSpan with elements cast to the new type. Type Parameters TDerived The element type of the source read-only ExSpan, which must be derived from T. Remarks This method uses a covariant cast, producing a read-only ExSpan that shares the same memory as the source. The relationships expressed in the type constraints ensure that the cast is a safe operation."
  },
  "api/Zyl.ExSpans.ReadOnlyExSpan-1.CopyTo.html": {
    "href": "api/Zyl.ExSpans.ReadOnlyExSpan-1.CopyTo.html",
    "title": "Method CopyTo | ExSpans",
    "summary": "Method CopyTo Namespace Zyl.ExSpans Assembly ExSpans.Core.dll CopyTo(ExSpan<T>) Copies the contents of this read-only span into destination span. If the source and destinations overlap, this method behaves as if the original values in a temporary location before the destination is overwritten (将此只读跨度的内容复制到目标跨度. 如果源和目标重叠, 则此方法的行为就像覆盖目标之前临时位置中的原始值一样). public void CopyTo(ExSpan<T> destination) Parameters destination ExSpan<T> The destination span (目标跨度). Exceptions ArgumentException Thrown when the destination span is shorter than the source span."
  },
  "api/Zyl.ExSpans.ReadOnlyExSpan-1.Empty.html": {
    "href": "api/Zyl.ExSpans.ReadOnlyExSpan-1.Empty.html",
    "title": "Property Empty | ExSpans",
    "summary": "Property Empty Namespace Zyl.ExSpans Assembly ExSpans.Core.dll Empty Returns a 0-length read-only Ex span whose base is the null pointer (返回一个值，该值指示当前只读扩展跨度为空). public static ReadOnlyExSpan<T> Empty { get; } Property Value ReadOnlyExSpan<T>"
  },
  "api/Zyl.ExSpans.ReadOnlyExSpan-1.Enumerator.Current.html": {
    "href": "api/Zyl.ExSpans.ReadOnlyExSpan-1.Enumerator.Current.html",
    "title": "Property Current | ExSpans",
    "summary": "Property Current Namespace Zyl.ExSpans Assembly ExSpans.Core.dll Current Gets the element at the current position of the enumerator (获取对枚举器当前位置的元素的引用). public readonly ref readonly T Current { get; } Property Value T"
  },
  "api/Zyl.ExSpans.ReadOnlyExSpan-1.Enumerator.MoveNext.html": {
    "href": "api/Zyl.ExSpans.ReadOnlyExSpan-1.Enumerator.MoveNext.html",
    "title": "Method MoveNext | ExSpans",
    "summary": "Method MoveNext Namespace Zyl.ExSpans Assembly ExSpans.Core.dll MoveNext() Advances the enumerator to the next element of the span (将枚举器推进到跨度的下一元素). public bool MoveNext() Returns bool"
  },
  "api/Zyl.ExSpans.ReadOnlyExSpan-1.Enumerator.html": {
    "href": "api/Zyl.ExSpans.ReadOnlyExSpan-1.Enumerator.html",
    "title": "Struct ReadOnlyExSpan<T>.Enumerator | ExSpans",
    "summary": "Struct ReadOnlyExSpan<T>.Enumerator Namespace Zyl.ExSpans Assembly ExSpans.Core.dll Enumerates the elements of a ReadOnlyExSpan<T> (为 ReadOnlyExSpan<T> 的元素提供枚举器). public ref struct ReadOnlyExSpan<T>.Enumerator Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties Current Gets the element at the current position of the enumerator (获取对枚举器当前位置的元素的引用). Methods MoveNext() Advances the enumerator to the next element of the span (将枚举器推进到跨度的下一元素)."
  },
  "api/Zyl.ExSpans.ReadOnlyExSpan-1.GetEnumerator.html": {
    "href": "api/Zyl.ExSpans.ReadOnlyExSpan-1.GetEnumerator.html",
    "title": "Method GetEnumerator | ExSpans",
    "summary": "Method GetEnumerator Namespace Zyl.ExSpans Assembly ExSpans.Core.dll GetEnumerator() Gets an enumerator for this span (返回此跨度的枚举器). public ReadOnlyExSpan<T>.Enumerator GetEnumerator() Returns ReadOnlyExSpan<T>.Enumerator"
  },
  "api/Zyl.ExSpans.ReadOnlyExSpan-1.IsEmpty.html": {
    "href": "api/Zyl.ExSpans.ReadOnlyExSpan-1.IsEmpty.html",
    "title": "Property IsEmpty | ExSpans",
    "summary": "Property IsEmpty Namespace Zyl.ExSpans Assembly ExSpans.Core.dll IsEmpty Gets a value indicating whether this ReadOnlyExSpan<T> is empty (返回一个值，该值指示当前只读扩展跨度为空). public bool IsEmpty { get; } Property Value bool true if this Ex span is empty; otherwise, false (当前跨度为空时为 true; 否则为 false)."
  },
  "api/Zyl.ExSpans.ReadOnlyExSpan-1.Item.html": {
    "href": "api/Zyl.ExSpans.ReadOnlyExSpan-1.Item.html",
    "title": "Property this | ExSpans",
    "summary": "Property this Namespace Zyl.ExSpans Assembly ExSpans.Core.dll this[nint] Returns the specified element of the read-only Ex span (从只读扩展跨度中返回指定项). [FakeCLSCompliant(false)] public ref readonly T this[nint index] { get; } Parameters index nint The zero-based index (从零开始的索引). Property Value T Returns the specified element (返回指定项). Exceptions IndexOutOfRangeException Thrown when index less than 0 or index greater than or equal to Length"
  },
  "api/Zyl.ExSpans.ReadOnlyExSpan-1.LastSlice.html": {
    "href": "api/Zyl.ExSpans.ReadOnlyExSpan-1.LastSlice.html",
    "title": "Method LastSlice | ExSpans",
    "summary": "Method LastSlice Namespace Zyl.ExSpans Assembly ExSpans.Core.dll LastSlice(nint) Forms a slice out of the given read-only Ex span, last beginning at 'TSize' (从尾部指定索引处的只读扩展跨度形成切片). [FakeCLSCompliant(false)] public ReadOnlyExSpan<T> LastSlice(nint end) Parameters end nint The zero-based index at which to begin this slice (从零开始的切片尾部索引). Returns ReadOnlyExSpan<T> Returns the new read-only Ex span (返回新的只读扩展跨度). Exceptions ArgumentOutOfRangeException Thrown when the specified end index is not in range (<0 or >Length). LastSlice(nint, nint) Forms a slice out of the given read-only Ex span, last beginning at 'end', of given length (从尾部指定长度的指定索引处开始的当前只读扩展跨度形成切片) [FakeCLSCompliant(false)] public ReadOnlyExSpan<T> LastSlice(nint end, nint length) Parameters end nint The zero-based index at which to begin this slice (从零开始的切片尾部索引). length nint The desired length for the slice (exclusive) (切片所需的长度). Returns ReadOnlyExSpan<T> Returns the new read-only Ex span (返回新的只读扩展跨度). Exceptions ArgumentOutOfRangeException Thrown when the specified end or end index is not in range (<0 or >Length)."
  },
  "api/Zyl.ExSpans.ReadOnlyExSpan-1.Length.html": {
    "href": "api/Zyl.ExSpans.ReadOnlyExSpan-1.Length.html",
    "title": "Property Length | ExSpans",
    "summary": "Property Length Namespace Zyl.ExSpans Assembly ExSpans.Core.dll Length The number of items in the read-only Ex span (只读扩展跨度中的项数). [FakeCLSCompliant(false)] public nint Length { get; } Property Value nint"
  },
  "api/Zyl.ExSpans.ReadOnlyExSpan-1.Slice.html": {
    "href": "api/Zyl.ExSpans.ReadOnlyExSpan-1.Slice.html",
    "title": "Method Slice | ExSpans",
    "summary": "Method Slice Namespace Zyl.ExSpans Assembly ExSpans.Core.dll Slice(nint) Forms a slice out of the given read-only Ex span, beginning at 'start' (从指定索引处开始的只读扩展跨度形成切片). [FakeCLSCompliant(false)] public ReadOnlyExSpan<T> Slice(nint start) Parameters start nint The zero-based index at which to begin this slice (从零开始的切片索引). Returns ReadOnlyExSpan<T> Returns the new read-only Ex span (返回新的只读扩展跨度). Exceptions ArgumentOutOfRangeException Thrown when the specified start index is not in range (<0 or >Length). Slice(nint, nint) Forms a slice out of the given read-only Ex span, beginning at 'start', of given length (从指定长度的指定索引处开始的当前只读扩展跨度形成切片) [FakeCLSCompliant(false)] public ReadOnlyExSpan<T> Slice(nint start, nint length) Parameters start nint The zero-based index at which to begin this slice (从零开始的切片索引). length nint The desired length for the slice (exclusive) (切片所需的长度). Returns ReadOnlyExSpan<T> Returns the new read-only Ex span (返回新的只读扩展跨度). Exceptions ArgumentOutOfRangeException Thrown when the specified start or end index is not in range (<0 or >Length)."
  },
  "api/Zyl.ExSpans.ReadOnlyExSpan-1.ToArray.html": {
    "href": "api/Zyl.ExSpans.ReadOnlyExSpan-1.ToArray.html",
    "title": "Method ToArray | ExSpans",
    "summary": "Method ToArray Namespace Zyl.ExSpans Assembly ExSpans.Core.dll ToArray() Copies the contents of this span into a new array. The maxLength parameter uses the value of ArrayMaxLengthSafe (将此范围的内容复制到新建数组中. maxLength 参数使用 ArrayMaxLengthSafe 的值). public T[] ToArray() Returns T[] An array containing the data in the current span (包含当前跨度中数据的数组). ToArray(int) Copies the contents of this span into a new array. It has a maxLength parameters (将此跨度的内容复制到新建数组中. 它具有 maxLength 参数). public T[] ToArray(int maxLength) Parameters maxLength int The max length of array (数组的最大长度). Returns T[] An array containing the data in the current span (包含当前跨度中数据的数组). Exceptions ArgumentOutOfRangeException The maxLength parameter must be greater than 0"
  },
  "api/Zyl.ExSpans.ReadOnlyExSpan-1.ToString.html": {
    "href": "api/Zyl.ExSpans.ReadOnlyExSpan-1.ToString.html",
    "title": "Method ToString | ExSpans",
    "summary": "Method ToString Namespace Zyl.ExSpans Assembly ExSpans.Core.dll ToString() Returns the string representation of this ReadOnlyExSpan<T> (返回此 ReadOnlyExSpan<T> 的字符串表示形式). public override string ToString() Returns string See Also ItemsToString<T>(ReadOnlyExSpan<T>, Func<nint, T, string>, ItemsToStringFlags, TypeNameFlags)"
  },
  "api/Zyl.ExSpans.ReadOnlyExSpan-1.TryCopyTo.html": {
    "href": "api/Zyl.ExSpans.ReadOnlyExSpan-1.TryCopyTo.html",
    "title": "Method TryCopyTo | ExSpans",
    "summary": "Method TryCopyTo Namespace Zyl.ExSpans Assembly ExSpans.Core.dll TryCopyTo(ExSpan<T>) Try copies the contents of this read-only span into destination span. If the source and destinations overlap, this method behaves as if the original values in a temporary location before the destination is overwritten (尝试将此只读跨度的内容复制到目标跨度. 如果源和目标重叠, 则此方法的行为就像覆盖目标之前临时位置中的原始值一样). public bool TryCopyTo(ExSpan<T> destination) Parameters destination ExSpan<T> The destination span (目标跨度). Returns bool true if the copy operation succeeded; otherwise, false (如果复制操作已成功，则为 true；否则，为 false)."
  },
  "api/Zyl.ExSpans.ReadOnlyExSpan-1.html": {
    "href": "api/Zyl.ExSpans.ReadOnlyExSpan-1.html",
    "title": "Struct ReadOnlyExSpan<T> | ExSpans",
    "summary": "Struct ReadOnlyExSpan<T> Namespace Zyl.ExSpans Assembly ExSpans.Core.dll Provides a type-safe and memory-safe read-only representation of a contiguous region of arbitrary memory. It can be regarded as the ReadOnlySpan<T> of nint index range (提供任意内存连续区域的类型安全且内存安全的只读表示形式. 它可以被视为 nint 索引范围的 ReadOnlySpan<T>). public readonly ref struct ReadOnlyExSpan<T> : IReadOnlyExSpanBase<T>, IExLength Type Parameters T The element type (元素的类型). Implements IReadOnlyExSpanBase<T> IExLength Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Extension Methods ExMemoryExtensions.BinarySearch<T>(ReadOnlyExSpan<T>, IComparable<T>) ExMemoryExtensions.BinarySearch<T, TComparable>(ReadOnlyExSpan<T>, TComparable) ExMemoryExtensions.BinarySearch<T, TComparer>(ReadOnlyExSpan<T>, T, TComparer) ExMemoryExtensions.CommonPrefixLength<T>(ReadOnlyExSpan<T>, ReadOnlyExSpan<T>) ExMemoryExtensions.CommonPrefixLength<T>(ReadOnlyExSpan<T>, ReadOnlyExSpan<T>, IEqualityComparer<T>?) ExMemoryExtensions.ContainsAnyExcept<T>(ReadOnlyExSpan<T>, ReadOnlyExSpan<T>, IEqualityComparer<T>?) ExMemoryExtensions.ContainsAnyExcept<T>(ReadOnlyExSpan<T>, T, IEqualityComparer<T>?) ExMemoryExtensions.ContainsAnyExcept<T>(ReadOnlyExSpan<T>, T, T, IEqualityComparer<T>?) ExMemoryExtensions.ContainsAnyExcept<T>(ReadOnlyExSpan<T>, T, T, T, IEqualityComparer<T>?) ExMemoryExtensions.ContainsAny<T>(ReadOnlyExSpan<T>, ReadOnlyExSpan<T>, IEqualityComparer<T>?) ExMemoryExtensions.ContainsAny<T>(ReadOnlyExSpan<T>, T, T, IEqualityComparer<T>?) ExMemoryExtensions.ContainsAny<T>(ReadOnlyExSpan<T>, T, T, T, IEqualityComparer<T>?) ExMemoryExtensions.Contains<T>(ReadOnlyExSpan<T>, T, IEqualityComparer<T>?) ExMemoryExtensions.CountAny<T>(ReadOnlyExSpan<T>, ReadOnlyExSpan<T>, IEqualityComparer<T>?) ExMemoryExtensions.Count<T>(ReadOnlyExSpan<T>, ReadOnlyExSpan<T>, IEqualityComparer<T>?) ExMemoryExtensions.Count<T>(ReadOnlyExSpan<T>, T, IEqualityComparer<T>?) ExMemoryExtensions.EndsWith<T>(ReadOnlyExSpan<T>, ReadOnlyExSpan<T>, IEqualityComparer<T>?) ExMemoryExtensions.EndsWith<T>(ReadOnlyExSpan<T>, T, IEqualityComparer<T>?) ExMemoryExtensions.IndexOfAnyExcept<T>(ReadOnlyExSpan<T>, ReadOnlyExSpan<T>, IEqualityComparer<T>?) ExMemoryExtensions.IndexOfAnyExcept<T>(ReadOnlyExSpan<T>, T, IEqualityComparer<T>?) ExMemoryExtensions.IndexOfAnyExcept<T>(ReadOnlyExSpan<T>, T, T, IEqualityComparer<T>?) ExMemoryExtensions.IndexOfAnyExcept<T>(ReadOnlyExSpan<T>, T, T, T, IEqualityComparer<T>?) ExMemoryExtensions.IndexOfAny<T>(ReadOnlyExSpan<T>, ReadOnlyExSpan<T>, IEqualityComparer<T>?) ExMemoryExtensions.IndexOfAny<T>(ReadOnlyExSpan<T>, T, T, IEqualityComparer<T>?) ExMemoryExtensions.IndexOfAny<T>(ReadOnlyExSpan<T>, T, T, T, IEqualityComparer<T>?) ExMemoryExtensions.IndexOf<T>(ReadOnlyExSpan<T>, ReadOnlyExSpan<T>, IEqualityComparer<T>?) ExMemoryExtensions.IndexOf<T>(ReadOnlyExSpan<T>, T, IEqualityComparer<T>?) ExMemoryExtensions.LastIndexOfAnyExcept<T>(ReadOnlyExSpan<T>, ReadOnlyExSpan<T>, IEqualityComparer<T>?) ExMemoryExtensions.LastIndexOfAnyExcept<T>(ReadOnlyExSpan<T>, T, IEqualityComparer<T>?) ExMemoryExtensions.LastIndexOfAnyExcept<T>(ReadOnlyExSpan<T>, T, T, IEqualityComparer<T>?) ExMemoryExtensions.LastIndexOfAnyExcept<T>(ReadOnlyExSpan<T>, T, T, T, IEqualityComparer<T>?) ExMemoryExtensions.LastIndexOfAny<T>(ReadOnlyExSpan<T>, ReadOnlyExSpan<T>, IEqualityComparer<T>?) ExMemoryExtensions.LastIndexOfAny<T>(ReadOnlyExSpan<T>, T, T, IEqualityComparer<T>?) ExMemoryExtensions.LastIndexOfAny<T>(ReadOnlyExSpan<T>, T, T, T, IEqualityComparer<T>?) ExMemoryExtensions.LastIndexOf<T>(ReadOnlyExSpan<T>, ReadOnlyExSpan<T>, IEqualityComparer<T>?) ExMemoryExtensions.LastIndexOf<T>(ReadOnlyExSpan<T>, T, IEqualityComparer<T>?) ExMemoryExtensions.Overlaps<T>(ReadOnlyExSpan<T>, ReadOnlyExSpan<T>) ExMemoryExtensions.Overlaps<T>(ReadOnlyExSpan<T>, ReadOnlyExSpan<T>, out int) ExMemoryExtensions.Replace<T>(ReadOnlyExSpan<T>, ExSpan<T>, T, T, IEqualityComparer<T>?) ExMemoryExtensions.SequenceCompareTo<T>(ReadOnlyExSpan<T>, ReadOnlyExSpan<T>, IComparer<T>?) ExMemoryExtensions.SequenceEqual<T>(ReadOnlyExSpan<T>, ReadOnlyExSpan<T>, IEqualityComparer<T>?) ExMemoryExtensions.StartsWith<T>(ReadOnlyExSpan<T>, ReadOnlyExSpan<T>, IEqualityComparer<T>?) ExMemoryExtensions.StartsWith<T>(ReadOnlyExSpan<T>, T, IEqualityComparer<T>?) ExSpanExtensions.AsReadOnlySpan<T>(ReadOnlyExSpan<T>) ExSpanExtensions.AsReadOnlySpan<T>(ReadOnlyExSpan<T>, nint) ExSpanExtensions.AsReadOnlySpan<T>(ReadOnlyExSpan<T>, nint, int) ExSpanExtensions.ItemsAppendStringTo<T>(ReadOnlyExSpan<T>, Action<string>, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) ExSpanExtensions.ItemsAppendStringTo<T>(ReadOnlyExSpan<T>, Action<string>, nint, nint, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) ExSpanExtensions.ItemsAppendString<T>(ReadOnlyExSpan<T>, StringBuilder, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) ExSpanExtensions.ItemsAppendString<T>(ReadOnlyExSpan<T>, StringBuilder, nint, nint, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) ExSpanExtensions.ItemsToString<T>(ReadOnlyExSpan<T>, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) ExSpanExtensions.ItemsToString<T>(ReadOnlyExSpan<T>, nint, nint, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) ExSpanExtensions.LastAsReadOnlySpan<T>(ReadOnlyExSpan<T>) ExSpanExtensions.LastAsReadOnlySpan<T>(ReadOnlyExSpan<T>, nint, int) Constructors ReadOnlyExSpan(void*, nint) Creates a new ReadOnlyExSpan<T> over the target unmanaged buffer (在目标非托管缓冲区上创建新 ReadOnlyExSpan<T>). ReadOnlyExSpan(ref readonly T) Creates a new ReadOnlyExSpan<T> of length 1 around the specified reference (在指定的引用周围创建长度为 1 的新 ReadOnlyExSpan<T>). ReadOnlyExSpan(T[]?) Creates a new ReadOnlyExSpan<T> over the entirety of the target array (在整个指定数组中创建新的 ReadOnlyExSpan<T>). ReadOnlyExSpan(T[]?, nint, nint) Creates a new ReadOnlyExSpan<T> over the portion of the target array beginning at 'start' index and ending at 'end' index (exclusive) (创建一个新的 ReadOnlyExSpan<T>，其中包含从指定索引开始的数组的指定数量的元素). Properties Empty Returns a 0-length read-only Ex span whose base is the null pointer (返回一个值，该值指示当前只读扩展跨度为空). IsEmpty Gets a value indicating whether this ReadOnlyExSpan<T> is empty (返回一个值，该值指示当前只读扩展跨度为空). this[nint] Returns the specified element of the read-only Ex span (从只读扩展跨度中返回指定项). Length The number of items in the read-only Ex span (只读扩展跨度中的项数). Methods CastUp<TDerived>(ReadOnlyExSpan<TDerived>) Casts a read-only ExSpan of TDerived to a read-only ExSpan of T. CopyTo(ExSpan<T>) Copies the contents of this read-only span into destination span. If the source and destinations overlap, this method behaves as if the original values in a temporary location before the destination is overwritten (将此只读跨度的内容复制到目标跨度. 如果源和目标重叠, 则此方法的行为就像覆盖目标之前临时位置中的原始值一样). GetEnumerator() Gets an enumerator for this span (返回此跨度的枚举器). LastSlice(nint) Forms a slice out of the given read-only Ex span, last beginning at 'TSize' (从尾部指定索引处的只读扩展跨度形成切片). LastSlice(nint, nint) Forms a slice out of the given read-only Ex span, last beginning at 'end', of given length (从尾部指定长度的指定索引处开始的当前只读扩展跨度形成切片) Slice(nint) Forms a slice out of the given read-only Ex span, beginning at 'start' (从指定索引处开始的只读扩展跨度形成切片). Slice(nint, nint) Forms a slice out of the given read-only Ex span, beginning at 'start', of given length (从指定长度的指定索引处开始的当前只读扩展跨度形成切片) ToArray() Copies the contents of this span into a new array. The maxLength parameter uses the value of ArrayMaxLengthSafe (将此范围的内容复制到新建数组中. maxLength 参数使用 ArrayMaxLengthSafe 的值). ToArray(int) Copies the contents of this span into a new array. It has a maxLength parameters (将此跨度的内容复制到新建数组中. 它具有 maxLength 参数). ToString() Returns the string representation of this ReadOnlyExSpan<T> (返回此 ReadOnlyExSpan<T> 的字符串表示形式). TryCopyTo(ExSpan<T>) Try copies the contents of this read-only span into destination span. If the source and destinations overlap, this method behaves as if the original values in a temporary location before the destination is overwritten (尝试将此只读跨度的内容复制到目标跨度. 如果源和目标重叠, 则此方法的行为就像覆盖目标之前临时位置中的原始值一样). Operators operator ==(ReadOnlyExSpan<T>, ReadOnlyExSpan<T>) Returns a value that indicates whether two ReadOnlySpan<T> instances are equal (返回一个值，该值指示两个 ReadOnlySpan<T> 实例是否相等). explicit operator ReadOnlySpan<T>(ReadOnlyExSpan<T>) Defines an explicit conversion of a ReadOnlyExSpan<T> to a ReadOnlySpan<T>. The length will saturating limited to the maximum length it supports (定义 ReadOnlyExSpan<T> 到 ReadOnlySpan<T> 的显式转换. 长度会饱和限制为它所支持的最大长度). implicit operator ReadOnlyExSpan<T>(ArraySegment<T>) Defines an implicit conversion of a ArraySegment<T> to a ReadOnlyExSpan<T> (定义 ArraySegment<T> 到 ReadOnlyExSpan<T> 的隐式转换) implicit operator ReadOnlyExSpan<T>(ReadOnlySpan<T>) Defines an implicit conversion of a ReadOnlySpan<T> to a ReadOnlyExSpan<T> (定义 ReadOnlySpan<T> 到 ReadOnlyExSpan<T> 的隐式转换). implicit operator ReadOnlyExSpan<T>(T[]?) Defines an implicit conversion of an array to a ReadOnlyExSpan<T> (定义数组到 ReadOnlyExSpan<T> 的隐式转换) operator !=(ReadOnlyExSpan<T>, ReadOnlyExSpan<T>) Returns a value that indicates whether two ReadOnlyExSpan<T> instances are not equal (返回一个值，该值指示两个 ReadOnlyExSpan<T> 实例是否不相等)."
  },
  "api/Zyl.ExSpans.ReadOnlyExSpan-1.op_Equality.html": {
    "href": "api/Zyl.ExSpans.ReadOnlyExSpan-1.op_Equality.html",
    "title": "Operator operator == | ExSpans",
    "summary": "Operator operator == Namespace Zyl.ExSpans Assembly ExSpans.Core.dll operator ==(ReadOnlyExSpan<T>, ReadOnlyExSpan<T>) Returns a value that indicates whether two ReadOnlySpan<T> instances are equal (返回一个值，该值指示两个 ReadOnlySpan<T> 实例是否相等). public static bool operator ==(ReadOnlyExSpan<T> left, ReadOnlyExSpan<T> right) Parameters left ReadOnlyExSpan<T> right ReadOnlyExSpan<T> Returns bool"
  },
  "api/Zyl.ExSpans.ReadOnlyExSpan-1.op_Explicit.html": {
    "href": "api/Zyl.ExSpans.ReadOnlyExSpan-1.op_Explicit.html",
    "title": "Operator explicit operator | ExSpans",
    "summary": "Operator explicit operator Namespace Zyl.ExSpans Assembly ExSpans.Core.dll explicit operator ReadOnlySpan<T>(ReadOnlyExSpan<T>) Defines an explicit conversion of a ReadOnlyExSpan<T> to a ReadOnlySpan<T>. The length will saturating limited to the maximum length it supports (定义 ReadOnlyExSpan<T> 到 ReadOnlySpan<T> 的显式转换. 长度会饱和限制为它所支持的最大长度). public static explicit operator ReadOnlySpan<T>(ReadOnlyExSpan<T> span) Parameters span ReadOnlyExSpan<T> The object to convert (要转换的对象). Returns ReadOnlySpan<T> See Also GetSpanSaturatingLength(nint)"
  },
  "api/Zyl.ExSpans.ReadOnlyExSpan-1.op_Implicit.html": {
    "href": "api/Zyl.ExSpans.ReadOnlyExSpan-1.op_Implicit.html",
    "title": "Operator implicit operator | ExSpans",
    "summary": "Operator implicit operator Namespace Zyl.ExSpans Assembly ExSpans.Core.dll implicit operator ReadOnlyExSpan<T>(T[]?) Defines an implicit conversion of an array to a ReadOnlyExSpan<T> (定义数组到 ReadOnlyExSpan<T> 的隐式转换) public static implicit operator ReadOnlyExSpan<T>(T[]? array) Parameters array T[] Returns ReadOnlyExSpan<T> implicit operator ReadOnlyExSpan<T>(ArraySegment<T>) Defines an implicit conversion of a ArraySegment<T> to a ReadOnlyExSpan<T> (定义 ArraySegment<T> 到 ReadOnlyExSpan<T> 的隐式转换) public static implicit operator ReadOnlyExSpan<T>(ArraySegment<T> segment) Parameters segment ArraySegment<T> Returns ReadOnlyExSpan<T> implicit operator ReadOnlyExSpan<T>(ReadOnlySpan<T>) Defines an implicit conversion of a ReadOnlySpan<T> to a ReadOnlyExSpan<T> (定义 ReadOnlySpan<T> 到 ReadOnlyExSpan<T> 的隐式转换). public static implicit operator ReadOnlyExSpan<T>(ReadOnlySpan<T> span) Parameters span ReadOnlySpan<T> The object to convert (要转换的对象). Returns ReadOnlyExSpan<T>"
  },
  "api/Zyl.ExSpans.ReadOnlyExSpan-1.op_Inequality.html": {
    "href": "api/Zyl.ExSpans.ReadOnlyExSpan-1.op_Inequality.html",
    "title": "Operator operator != | ExSpans",
    "summary": "Operator operator != Namespace Zyl.ExSpans Assembly ExSpans.Core.dll operator !=(ReadOnlyExSpan<T>, ReadOnlyExSpan<T>) Returns a value that indicates whether two ReadOnlyExSpan<T> instances are not equal (返回一个值，该值指示两个 ReadOnlyExSpan<T> 实例是否不相等). public static bool operator !=(ReadOnlyExSpan<T> left, ReadOnlyExSpan<T> right) Parameters left ReadOnlyExSpan<T> right ReadOnlyExSpan<T> Returns bool"
  },
  "api/Zyl.ExSpans.Reflection.TypeHelper.GetBaseName.html": {
    "href": "api/Zyl.ExSpans.Reflection.TypeHelper.GetBaseName.html",
    "title": "Method GetBaseName | ExSpans",
    "summary": "Method GetBaseName Namespace Zyl.ExSpans.Reflection Assembly ExSpans.Core.dll GetBaseName<T>() Get the base name of the type (取得类型的基本名). public static string GetBaseName<T>() Returns string The base name (基本名). Type Parameters T The type (类型). GetBaseName(Type) Get the base name of the type (取得类型的基本名). public static string GetBaseName(Type atype) Parameters atype Type The type (类型). Returns string Full base name (返回完整基本名)."
  },
  "api/Zyl.ExSpans.Reflection.TypeHelper.GetFullBaseName.html": {
    "href": "api/Zyl.ExSpans.Reflection.TypeHelper.GetFullBaseName.html",
    "title": "Method GetFullBaseName | ExSpans",
    "summary": "Method GetFullBaseName Namespace Zyl.ExSpans.Reflection Assembly ExSpans.Core.dll GetFullBaseName<T>() Get the namespace and base name of the type (取得类型的名称空间与基本名). public static string GetFullBaseName<T>() Returns string The full base name (完整基本名). Type Parameters T The type (类型). GetFullBaseName(Type) Get the namespace and base name of the type (取得类型的名称空间与基本名). public static string GetFullBaseName(Type atype) Parameters atype Type The type (类型). Returns string The full base name (完整基本名)."
  },
  "api/Zyl.ExSpans.Reflection.TypeHelper.IsBitwiseEquatable.html": {
    "href": "api/Zyl.ExSpans.Reflection.TypeHelper.IsBitwiseEquatable.html",
    "title": "Method IsBitwiseEquatable | ExSpans",
    "summary": "Method IsBitwiseEquatable Namespace Zyl.ExSpans.Reflection Assembly ExSpans.Core.dll IsBitwiseEquatable<T>() Is BitwiseEquatable types (是按位相等的类型) public static bool IsBitwiseEquatable<T>() Returns bool true is BitwiseEquatable types; otherwise is false. Type Parameters T The element type (元素的类型). Remarks Due to the fact that the method was not publicly available at the time of execution, it will now rolled back to call the IsPrimitive<T>() method (由于运行时尚未公开该方法, 目前会回退为调用 IsPrimitive 方法) BitwiseEquatable types: https://github.com/dotnet/runtime/issues/46017"
  },
  "api/Zyl.ExSpans.Reflection.TypeHelper.IsBlittable.html": {
    "href": "api/Zyl.ExSpans.Reflection.TypeHelper.IsBlittable.html",
    "title": "Method IsBlittable | ExSpans",
    "summary": "Method IsBlittable Namespace Zyl.ExSpans.Reflection Assembly ExSpans.Core.dll IsBlittable<T>() Is blittable types (是可直接按位复制的类型) public static bool IsBlittable<T>() Returns bool true is blittable types; otherwise is false. Type Parameters T The element type (元素的类型). Remarks In .NET Standard 1.1~2.0, due to the inability to accurately determine, we rolled back to call the IsPrimitive<T>() method (在 .NET Standard 1.1~2.0 时, 因无法准确判断, 于是回退为调用 IsPrimitive 方法) Blittable types: https://learn.microsoft.com/en-us/dotnet/framework/interop/blittable-and-non-blittable-types See Also IsReferenceOrContainsReferences<T>()"
  },
  "api/Zyl.ExSpans.Reflection.TypeHelper.IsEnum.html": {
    "href": "api/Zyl.ExSpans.Reflection.TypeHelper.IsEnum.html",
    "title": "Method IsEnum | ExSpans",
    "summary": "Method IsEnum Namespace Zyl.ExSpans.Reflection Assembly ExSpans.Core.dll IsEnum<T>() Is enum types (是否为枚举类型). public static bool IsEnum<T>() Returns bool true if the Type is the enum types; otherwise, false (类型是枚举类型就返回 true; 否则返回 false). Type Parameters T The type (类型). See Also IsEnum IsEnum(Type) Is enum types (是否为枚举类型). public static bool IsEnum(Type atype) Parameters atype Type The type (类型). Returns bool true if the Type is the enum types; otherwise, false (类型是枚举类型就返回 true; 否则返回 false). See Also IsEnum"
  },
  "api/Zyl.ExSpans.Reflection.TypeHelper.IsGenericType.html": {
    "href": "api/Zyl.ExSpans.Reflection.TypeHelper.IsGenericType.html",
    "title": "Method IsGenericType | ExSpans",
    "summary": "Method IsGenericType Namespace Zyl.ExSpans.Reflection Assembly ExSpans.Core.dll IsGenericType<T>() Is generic types (是否为泛型类型). public static bool IsGenericType<T>() Returns bool true if the Type is the generic types; otherwise, false (类型是泛型类型就返回 true; 否则返回 false). Type Parameters T The type (类型). See Also IsGenericType IsGenericType(Type) Is generic types (是否为泛型类型). public static bool IsGenericType(Type atype) Parameters atype Type The type (类型). Returns bool true if the Type is the generic types; otherwise, false (类型是泛型类型就返回 true; 否则返回 false). See Also IsGenericType"
  },
  "api/Zyl.ExSpans.Reflection.TypeHelper.IsPrimitive.html": {
    "href": "api/Zyl.ExSpans.Reflection.TypeHelper.IsPrimitive.html",
    "title": "Method IsPrimitive | ExSpans",
    "summary": "Method IsPrimitive Namespace Zyl.ExSpans.Reflection Assembly ExSpans.Core.dll IsPrimitive<T>() Is primitive types (是否为基元类型). public static bool IsPrimitive<T>() Returns bool true if the Type is the primitive types; otherwise, false (类型是基元类型就返回 true; 否则返回 false). Type Parameters T The type (类型). See Also IsPrimitive IsPrimitive(Type) Is primitive types (是否为基元类型). public static bool IsPrimitive(Type atype) Parameters atype Type The type (类型). Returns bool true if the Type is the primitive types; otherwise, false (类型是基元类型就返回 true; 否则返回 false). See Also IsPrimitive"
  },
  "api/Zyl.ExSpans.Reflection.TypeHelper.IsReferenceOrContainsReferences.html": {
    "href": "api/Zyl.ExSpans.Reflection.TypeHelper.IsReferenceOrContainsReferences.html",
    "title": "Method IsReferenceOrContainsReferences | ExSpans",
    "summary": "Method IsReferenceOrContainsReferences Namespace Zyl.ExSpans.Reflection Assembly ExSpans.Core.dll IsReferenceOrContainsReferences<T>() Returns a value that indicates whether the specified type is a reference type or a value type that contains references or by-refs (返回一个值，该值指示指定的类型是引用类型还是包含引用或 by-refs 的值类型). public static bool IsReferenceOrContainsReferences<T>() Returns bool true if the given type is a reference type or a value type that contains references or by-refs; otherwise, false (类型是是引用类型还是包含引用或 by-refs 的值类型就返回 true; 否则返回 false). Type Parameters T The type (类型). Remarks In .NET Standard 1.1~2.0, due to the inability to accurately determine, we rolled back to call the !IsValueType<T>() method (在 .NET Standard 1.1~2.0 时, 因无法准确判断, 于是回退为调用 !IsValueType 方法) See Also IsReferenceOrContainsReferences<T>()"
  },
  "api/Zyl.ExSpans.Reflection.TypeHelper.IsValueType.html": {
    "href": "api/Zyl.ExSpans.Reflection.TypeHelper.IsValueType.html",
    "title": "Method IsValueType | ExSpans",
    "summary": "Method IsValueType Namespace Zyl.ExSpans.Reflection Assembly ExSpans.Core.dll IsValueType<T>() Is value types (是否为值类型). public static bool IsValueType<T>() Returns bool true if the Type is the value types; otherwise, false (类型是值类型就返回 true; 否则返回 false). Type Parameters T The type (类型). See Also IsValueType IsValueType(Type) Is value types (是否为值类型). public static bool IsValueType(Type atype) Parameters atype Type The type (类型). Returns bool true if the Type is the value types; otherwise, false (类型是值类型就返回 true; 否则返回 false). See Also IsValueType"
  },
  "api/Zyl.ExSpans.Reflection.TypeHelper.html": {
    "href": "api/Zyl.ExSpans.Reflection.TypeHelper.html",
    "title": "Class TypeHelper | ExSpans",
    "summary": "Class TypeHelper Namespace Zyl.ExSpans.Reflection Assembly ExSpans.Core.dll Type Helper. public static class TypeHelper Inheritance object TypeHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetBaseName(Type) Get the base name of the type (取得类型的基本名). GetBaseName<T>() Get the base name of the type (取得类型的基本名). GetFullBaseName(Type) Get the namespace and base name of the type (取得类型的名称空间与基本名). GetFullBaseName<T>() Get the namespace and base name of the type (取得类型的名称空间与基本名). IsBitwiseEquatable<T>() Is BitwiseEquatable types (是按位相等的类型) IsBlittable<T>() Is blittable types (是可直接按位复制的类型) IsEnum(Type) Is enum types (是否为枚举类型). IsEnum<T>() Is enum types (是否为枚举类型). IsGenericType(Type) Is generic types (是否为泛型类型). IsGenericType<T>() Is generic types (是否为泛型类型). IsPrimitive(Type) Is primitive types (是否为基元类型). IsPrimitive<T>() Is primitive types (是否为基元类型). IsReferenceOrContainsReferences<T>() Returns a value that indicates whether the specified type is a reference type or a value type that contains references or by-refs (返回一个值，该值指示指定的类型是引用类型还是包含引用或 by-refs 的值类型). IsValueType(Type) Is value types (是否为值类型). IsValueType<T>() Is value types (是否为值类型)."
  },
  "api/Zyl.ExSpans.Reflection.TypeNameFlags.html": {
    "href": "api/Zyl.ExSpans.Reflection.TypeNameFlags.html",
    "title": "Enum TypeNameFlags | ExSpans",
    "summary": "Enum TypeNameFlags Namespace Zyl.ExSpans.Reflection Assembly ExSpans.Core.dll Flags for type name (类型名的标志). [Flags] public enum TypeNameFlags Extension Methods ExSpanExtensions.ItemsAppendStringTo<T, TSpan>(TSpan, in T, Action<string>, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) ExSpanExtensions.ItemsAppendStringTo<T, TSpan>(TSpan, in T, Action<string>, nint, nint, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) ExSpanExtensions.ItemsAppendString<T, TSpan>(TSpan, in T, StringBuilder, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) ExSpanExtensions.ItemsAppendString<T, TSpan>(TSpan, in T, StringBuilder, nint, nint, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) ExSpanExtensions.ItemsToString<T, TSpan>(TSpan, in T, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) ExSpanExtensions.ItemsToString<T, TSpan>(TSpan, in T, nint, nint, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) Fields Default = 0 Default (默认). NoKeyword = 2 Do not use keyword type names. For example, instead of long, use Int64 (不使用关键字类型名. 例如不使用 long, 而是使用 Int64). Raw = 1 Raw type name (原始类型名). Returns Type.FullName or Type.Name. ShowNamespace = 8 Show namespace (显示名称空间). ShowNullable = 4 Show Nullable<T>. When false, it will be displayed as T? (显示 Nullable<T>. 为 false 时会显示成 T?). SubShowNamespace = 16 Whether generic subtypes show namespaces (泛型子类型是否显示名称空间)."
  },
  "api/Zyl.ExSpans.Reflection.TypeNameUtil.AppendName.html": {
    "href": "api/Zyl.ExSpans.Reflection.TypeNameUtil.AppendName.html",
    "title": "Method AppendName | ExSpans",
    "summary": "Method AppendName Namespace Zyl.ExSpans.Reflection Assembly ExSpans.Core.dll AppendName<T>(StringBuilder, TypeNameFlags) Append type name (追加类型名) public static void AppendName<T>(StringBuilder output, TypeNameFlags flags = TypeNameFlags.Default) Parameters output StringBuilder The output StringBuilder (输出的 StringBuilder). flags TypeNameFlags The flags (标志). Type Parameters T The target type (目标类型). AppendName(StringBuilder, Type, TypeNameFlags, Type?, params Type[]) Append type name (追加类型名) public static void AppendName(StringBuilder output, Type atype, TypeNameFlags flags = TypeNameFlags.Default, Type? typeFallback = null, params Type[] typeArguments) Parameters output StringBuilder The output StringBuilder (输出的 StringBuilder). atype Type The target type (目标类型). flags TypeNameFlags The flags (标志). typeFallback Type The fallback type (回退类型). Only used for .NET Standard 1.1, as it cannot obtain generic arguments, more information needs to be passed through this parameter (仅用于 .NET Standard 1.1，因它不能获取泛型参数, 于是需要借助该参数传递更多信息). typeArguments Type[] The type arguments (类型参数列表). Only used for .NET Standard 1.1, as it cannot obtain generic arguments, more information needs to be passed through this parameter (仅用于 .NET Standard 1.1，因它不能获取泛型参数, 于是需要借助该参数传递更多信息)."
  },
  "api/Zyl.ExSpans.Reflection.TypeNameUtil.AppendNameTo.html": {
    "href": "api/Zyl.ExSpans.Reflection.TypeNameUtil.AppendNameTo.html",
    "title": "Method AppendNameTo | ExSpans",
    "summary": "Method AppendNameTo Namespace Zyl.ExSpans.Reflection Assembly ExSpans.Core.dll AppendNameTo<T>(Action<string>, TypeNameFlags) Append type name to action (将类型名追加到动作) public static void AppendNameTo<T>(Action<string> output, TypeNameFlags flags = TypeNameFlags.Default) Parameters output Action<string> The output action (输出动作). flags TypeNameFlags The flags (标志). Type Parameters T The target type (目标类型). AppendNameTo(Action<string>, Type, TypeNameFlags, Type?, params Type[]) Append type name to action (将类型名追加到动作) public static void AppendNameTo(Action<string> output, Type atype, TypeNameFlags flags = TypeNameFlags.Default, Type? typeFallback = null, params Type[] typeArguments) Parameters output Action<string> The output action (输出动作). atype Type The target type (目标类型). flags TypeNameFlags The flags (标志). typeFallback Type The fallback type (回退类型). Only used for .NET Standard 1.1, as it cannot obtain generic arguments, more information needs to be passed through this parameter (仅用于 .NET Standard 1.1，因它不能获取泛型参数, 于是需要借助该参数传递更多信息). typeArguments Type[] The type arguments (类型参数列表). Only used for .NET Standard 1.1, as it cannot obtain generic arguments, more information needs to be passed through this parameter (仅用于 .NET Standard 1.1，因它不能获取泛型参数, 于是需要借助该参数传递更多信息)."
  },
  "api/Zyl.ExSpans.Reflection.TypeNameUtil.FromSub.html": {
    "href": "api/Zyl.ExSpans.Reflection.TypeNameUtil.FromSub.html",
    "title": "Method FromSub | ExSpans",
    "summary": "Method FromSub Namespace Zyl.ExSpans.Reflection Assembly ExSpans.Core.dll FromSub(TypeNameFlags) Convert the flags of a generic subtype to the current flags (将泛型子类型的标志转为当前标志). public static TypeNameFlags FromSub(TypeNameFlags flags) Parameters flags TypeNameFlags The flags of a generic subtype (泛型子类型的标志) Returns TypeNameFlags The current flags (当前标志)"
  },
  "api/Zyl.ExSpans.Reflection.TypeNameUtil.GetName.html": {
    "href": "api/Zyl.ExSpans.Reflection.TypeNameUtil.GetName.html",
    "title": "Method GetName | ExSpans",
    "summary": "Method GetName Namespace Zyl.ExSpans.Reflection Assembly ExSpans.Core.dll GetName<T>(TypeNameFlags) Get type name (取得类型名). public static string GetName<T>(TypeNameFlags flags = TypeNameFlags.Default) Parameters flags TypeNameFlags The flags (标志). Returns string The type name (类型名). Type Parameters T The target type (目标类型). GetName(Type, TypeNameFlags, Type?, params Type[]) Get type name (取得类型名). public static string GetName(Type atype, TypeNameFlags flags = TypeNameFlags.Default, Type? typeFallback = null, params Type[] typeArguments) Parameters atype Type The target type (目标类型). flags TypeNameFlags The flags (标志). typeFallback Type The fallback type (回退类型). Only used for .NET Standard 1.1, as it cannot obtain generic arguments, more information needs to be passed through this parameter (仅用于 .NET Standard 1.1，因它不能获取泛型参数, 于是需要借助该参数传递更多信息). typeArguments Type[] The type arguments (类型参数列表). Only used for .NET Standard 1.1, as it cannot obtain generic arguments, more information needs to be passed through this parameter (仅用于 .NET Standard 1.1，因它不能获取泛型参数, 于是需要借助该参数传递更多信息). Returns string The type name (类型名)."
  },
  "api/Zyl.ExSpans.Reflection.TypeNameUtil.html": {
    "href": "api/Zyl.ExSpans.Reflection.TypeNameUtil.html",
    "title": "Class TypeNameUtil | ExSpans",
    "summary": "Class TypeNameUtil Namespace Zyl.ExSpans.Reflection Assembly ExSpans.Core.dll The utilities of type name (类型名的工具) public static class TypeNameUtil Inheritance object TypeNameUtil Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AppendName(StringBuilder, Type, TypeNameFlags, Type?, params Type[]) Append type name (追加类型名) AppendNameTo(Action<string>, Type, TypeNameFlags, Type?, params Type[]) Append type name to action (将类型名追加到动作) AppendNameTo<T>(Action<string>, TypeNameFlags) Append type name to action (将类型名追加到动作) AppendName<T>(StringBuilder, TypeNameFlags) Append type name (追加类型名) FromSub(TypeNameFlags) Convert the flags of a generic subtype to the current flags (将泛型子类型的标志转为当前标志). GetName(Type, TypeNameFlags, Type?, params Type[]) Get type name (取得类型名). GetName<T>(TypeNameFlags) Get type name (取得类型名). See Also ItemsToStringFlags"
  },
  "api/Zyl.ExSpans.Reflection.html": {
    "href": "api/Zyl.ExSpans.Reflection.html",
    "title": "Namespace Zyl.ExSpans.Reflection | ExSpans",
    "summary": "Namespace Zyl.ExSpans.Reflection Classes TypeHelper Type Helper. TypeNameUtil The utilities of type name (类型名的工具) Enums TypeNameFlags Flags for type name (类型名的标志)."
  },
  "api/Zyl.ExSpans.SafeBufferSpanProvider.-ctor.html": {
    "href": "api/Zyl.ExSpans.SafeBufferSpanProvider.-ctor.html",
    "title": "Constructor SafeBufferSpanProvider | ExSpans",
    "summary": "Constructor SafeBufferSpanProvider Namespace Zyl.ExSpans Assembly ExSpans.Core.dll SafeBufferSpanProvider(SafeBuffer) Create SafeBufferSpanProvider (创建 SafeBufferSpanProvider). public SafeBufferSpanProvider(SafeBuffer source) Parameters source SafeBuffer The source (源对象)."
  },
  "api/Zyl.ExSpans.SafeBufferSpanProvider.CreateExSpan.html": {
    "href": "api/Zyl.ExSpans.SafeBufferSpanProvider.CreateExSpan.html",
    "title": "Method CreateExSpan | ExSpans",
    "summary": "Method CreateExSpan Namespace Zyl.ExSpans Assembly ExSpans.Core.dll CreateExSpan<TTo>() Create a ExSpan<T> using the specified type (使用指定类型来创建 ExSpan<T>). public ExSpan<TTo> CreateExSpan<TTo>() Returns ExSpan<TTo> a ExSpan<T>. Type Parameters TTo The specified type (指定类型)."
  },
  "api/Zyl.ExSpans.SafeBufferSpanProvider.CreateExSpanSaturating.html": {
    "href": "api/Zyl.ExSpans.SafeBufferSpanProvider.CreateExSpanSaturating.html",
    "title": "Method CreateExSpanSaturating | ExSpans",
    "summary": "Method CreateExSpanSaturating Namespace Zyl.ExSpans Assembly ExSpans.Core.dll CreateExSpanSaturating<TTo>() Create a ExSpan<T> using the specified type with saturating (饱和的使用指定类型来创建 ExSpan<T>). public ExSpan<TTo> CreateExSpanSaturating<TTo>() Returns ExSpan<TTo> a ExSpan<T>. Type Parameters TTo The specified type (指定类型)."
  },
  "api/Zyl.ExSpans.SafeBufferSpanProvider.CreateReadOnlyExSpan.html": {
    "href": "api/Zyl.ExSpans.SafeBufferSpanProvider.CreateReadOnlyExSpan.html",
    "title": "Method CreateReadOnlyExSpan | ExSpans",
    "summary": "Method CreateReadOnlyExSpan Namespace Zyl.ExSpans Assembly ExSpans.Core.dll CreateReadOnlyExSpan<TTo>() Create a ReadOnlyExSpan<T> using the specified type (使用指定类型来创建 ReadOnlyExSpan<T>). public ReadOnlyExSpan<TTo> CreateReadOnlyExSpan<TTo>() Returns ReadOnlyExSpan<TTo> a ReadOnlyExSpan<T>. Type Parameters TTo The specified type (指定类型)."
  },
  "api/Zyl.ExSpans.SafeBufferSpanProvider.CreateReadOnlyExSpanSaturating.html": {
    "href": "api/Zyl.ExSpans.SafeBufferSpanProvider.CreateReadOnlyExSpanSaturating.html",
    "title": "Method CreateReadOnlyExSpanSaturating | ExSpans",
    "summary": "Method CreateReadOnlyExSpanSaturating Namespace Zyl.ExSpans Assembly ExSpans.Core.dll CreateReadOnlyExSpanSaturating<TTo>() Create a ReadOnlyExSpan<T> using the specified type with saturating (饱和的使用指定类型来创建 ReadOnlyExSpan<T>). public ReadOnlyExSpan<TTo> CreateReadOnlyExSpanSaturating<TTo>() Returns ReadOnlyExSpan<TTo> a ReadOnlyExSpan<T>. Type Parameters TTo The specified type (指定类型)."
  },
  "api/Zyl.ExSpans.SafeBufferSpanProvider.Dispose.html": {
    "href": "api/Zyl.ExSpans.SafeBufferSpanProvider.Dispose.html",
    "title": "Method Dispose | ExSpans",
    "summary": "Method Dispose Namespace Zyl.ExSpans Assembly ExSpans.Core.dll Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose()"
  },
  "api/Zyl.ExSpans.SafeBufferSpanProvider.GetPinnableReadOnlyReference.html": {
    "href": "api/Zyl.ExSpans.SafeBufferSpanProvider.GetPinnableReadOnlyReference.html",
    "title": "Method GetPinnableReadOnlyReference | ExSpans",
    "summary": "Method GetPinnableReadOnlyReference Namespace Zyl.ExSpans Assembly ExSpans.Core.dll GetPinnableReadOnlyReference() Returns a read only reference to the 0th element of the span. If the span is empty, returns null reference. It can be used for pinning and is required to support the use of span within a fixed statement (返回对只读跨度的第0个元素的引用。如果跨度为空，则返回null引用. 它可用于固定，并且需要支持在 fixed 语句中使用跨度). public ref readonly byte GetPinnableReadOnlyReference() Returns byte"
  },
  "api/Zyl.ExSpans.SafeBufferSpanProvider.GetPinnableReference.html": {
    "href": "api/Zyl.ExSpans.SafeBufferSpanProvider.GetPinnableReference.html",
    "title": "Method GetPinnableReference | ExSpans",
    "summary": "Method GetPinnableReference Namespace Zyl.ExSpans Assembly ExSpans.Core.dll GetPinnableReference() Returns a reference to the 0th element of the span. If the span is empty, returns null reference. It can be used for pinning and is required to support the use of span within a fixed statement (返回对跨度的第0个元素的引用。如果跨度为空，则返回null引用. 它可用于固定，并且需要支持在 fixed 语句中使用跨度). public ref byte GetPinnableReference() Returns byte"
  },
  "api/Zyl.ExSpans.SafeBufferSpanProvider.Length.html": {
    "href": "api/Zyl.ExSpans.SafeBufferSpanProvider.Length.html",
    "title": "Property Length | ExSpans",
    "summary": "Property Length Namespace Zyl.ExSpans Assembly ExSpans.Core.dll Length The number of items in the Ex span (扩展跨度中的项数). [FakeCLSCompliant(false)] public nint Length { get; } Property Value nint"
  },
  "api/Zyl.ExSpans.SafeBufferSpanProvider.Source.html": {
    "href": "api/Zyl.ExSpans.SafeBufferSpanProvider.Source.html",
    "title": "Property Source | ExSpans",
    "summary": "Property Source Namespace Zyl.ExSpans Assembly ExSpans.Core.dll Source Get source SafeBuffer (取得源 SafeBuffer). public SafeBuffer? Source { get; } Property Value SafeBuffer"
  },
  "api/Zyl.ExSpans.SafeBufferSpanProvider.html": {
    "href": "api/Zyl.ExSpans.SafeBufferSpanProvider.html",
    "title": "Struct SafeBufferSpanProvider | ExSpans",
    "summary": "Struct SafeBufferSpanProvider Namespace Zyl.ExSpans Assembly ExSpans.Core.dll The span provider that manages the pointer acquire for SafeBuffer (管理 SafeBuffer 指针获取的跨度提供者). For example, it can provide span access for memory mapped files (例如它可以为内存映射文件提供跨度访问器). public readonly struct SafeBufferSpanProvider : IDisposable, IExSpanBase<byte>, IReadOnlyExSpanBase<byte>, IExLength Implements IDisposable IExSpanBase<byte> IReadOnlyExSpanBase<byte> IExLength Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Extension Methods ExSpanExtensions.IsEmpty(IExLength) ExSpanExtensions.ItemsAppendStringTo<T, TSpan>(TSpan, in T, Action<string>, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) ExSpanExtensions.ItemsAppendStringTo<T, TSpan>(TSpan, in T, Action<string>, nint, nint, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) ExSpanExtensions.ItemsAppendString<T, TSpan>(TSpan, in T, StringBuilder, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) ExSpanExtensions.ItemsAppendString<T, TSpan>(TSpan, in T, StringBuilder, nint, nint, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) ExSpanExtensions.ItemsToString<T, TSpan>(TSpan, in T, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) ExSpanExtensions.ItemsToString<T, TSpan>(TSpan, in T, nint, nint, Func<nint, T, string>?, ItemsToStringFlags, TypeNameFlags) Remarks For example: static void TestMemoryMappedFile(TextWriter writer) { try { const string MemoryMappedFilePath = \"ExSpans.Sample.tmp\"; const string? MemoryMappedFileMapName = null; // If it is not null, MacOS will throw an exception. System.PlatformNotSupportedException: Named maps are not supported. const long MemoryMappedFileSize = 1 * 1024 * 1024; // 1MB using MemoryMappedFile mappedFile = MemoryMappedFile.CreateFromFile(MemoryMappedFilePath, FileMode.Create, MemoryMappedFileMapName, MemoryMappedFileSize); using MemoryMappedViewAccessor accessor = mappedFile.CreateViewAccessor(); using SafeBufferSpanProvider spanProvider = accessor.SafeMemoryMappedViewHandle.CreateSpanProvider(); // Write. ExSpan<int> spanInt = spanProvider.CreateExSpan<int>(); spanInt.Fill(0x01020304); spanInt[0] = 0x12345678; // Read. writer.WriteLine(string.Format(\"Data[0]: {0} // 0x{0:X}\", spanInt[0])); writer.WriteLine(string.Format(\"Data[1]: {0} // 0x{0:X}\", spanInt[1])); } catch (Exception ex) { writer.WriteLine(string.Format(\"Run TestMemoryMappedFile fail! {0}\", ex.ToString())); } // Output: // Data[0]: 305419896 // 0x12345678 // Data[1]: 16909060 // 0x1020304 } Constructors SafeBufferSpanProvider(SafeBuffer) Create SafeBufferSpanProvider (创建 SafeBufferSpanProvider). Properties Length The number of items in the Ex span (扩展跨度中的项数). Source Get source SafeBuffer (取得源 SafeBuffer). Methods CreateExSpanSaturating<TTo>() Create a ExSpan<T> using the specified type with saturating (饱和的使用指定类型来创建 ExSpan<T>). CreateExSpan<TTo>() Create a ExSpan<T> using the specified type (使用指定类型来创建 ExSpan<T>). CreateReadOnlyExSpanSaturating<TTo>() Create a ReadOnlyExSpan<T> using the specified type with saturating (饱和的使用指定类型来创建 ReadOnlyExSpan<T>). CreateReadOnlyExSpan<TTo>() Create a ReadOnlyExSpan<T> using the specified type (使用指定类型来创建 ReadOnlyExSpan<T>). Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. GetPinnableReadOnlyReference() Returns a read only reference to the 0th element of the span. If the span is empty, returns null reference. It can be used for pinning and is required to support the use of span within a fixed statement (返回对只读跨度的第0个元素的引用。如果跨度为空，则返回null引用. 它可用于固定，并且需要支持在 fixed 语句中使用跨度). GetPinnableReference() Returns a reference to the 0th element of the span. If the span is empty, returns null reference. It can be used for pinning and is required to support the use of span within a fixed statement (返回对跨度的第0个元素的引用。如果跨度为空，则返回null引用. 它可用于固定，并且需要支持在 fixed 语句中使用跨度)."
  },
  "api/Zyl.ExSpans.SafeBufferSpanProviders.CreateSpanProvider.html": {
    "href": "api/Zyl.ExSpans.SafeBufferSpanProviders.CreateSpanProvider.html",
    "title": "Method CreateSpanProvider | ExSpans",
    "summary": "Method CreateSpanProvider Namespace Zyl.ExSpans Assembly ExSpans.Core.dll CreateSpanProvider<TSafeBuffer>(TSafeBuffer) Create span provider (创建跨度提供者). public static SafeBufferSpanProvider CreateSpanProvider<TSafeBuffer>(this TSafeBuffer source) where TSafeBuffer : SafeBuffer Parameters source TSafeBuffer The source SafeBuffer (源 SafeBuffer) Returns SafeBufferSpanProvider Returns span provider (返回跨度提供者). Type Parameters TSafeBuffer"
  },
  "api/Zyl.ExSpans.SafeBufferSpanProviders.html": {
    "href": "api/Zyl.ExSpans.SafeBufferSpanProviders.html",
    "title": "Class SafeBufferSpanProviders | ExSpans",
    "summary": "Class SafeBufferSpanProviders Namespace Zyl.ExSpans Assembly ExSpans.Core.dll Helper methods of SafeBufferSpanProvider (SafeBufferSpanProvider 的辅助方法). public static class SafeBufferSpanProviders Inheritance object SafeBufferSpanProviders Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CreateSpanProvider<TSafeBuffer>(TSafeBuffer) Create span provider (创建跨度提供者)."
  },
  "api/Zyl.ExSpans.Text.ExSpanLineEnumerator.Current.html": {
    "href": "api/Zyl.ExSpans.Text.ExSpanLineEnumerator.Current.html",
    "title": "Property Current | ExSpans",
    "summary": "Property Current Namespace Zyl.ExSpans.Text Assembly ExSpans.dll Current Gets the line at the current position of the enumerator. public ReadOnlyExSpan<char> Current { get; } Property Value ReadOnlyExSpan<char>"
  },
  "api/Zyl.ExSpans.Text.ExSpanLineEnumerator.GetEnumerator.html": {
    "href": "api/Zyl.ExSpans.Text.ExSpanLineEnumerator.GetEnumerator.html",
    "title": "Method GetEnumerator | ExSpans",
    "summary": "Method GetEnumerator Namespace Zyl.ExSpans.Text Assembly ExSpans.dll GetEnumerator() Returns this instance as an enumerator. public ExSpanLineEnumerator GetEnumerator() Returns ExSpanLineEnumerator"
  },
  "api/Zyl.ExSpans.Text.ExSpanLineEnumerator.MoveNext.html": {
    "href": "api/Zyl.ExSpans.Text.ExSpanLineEnumerator.MoveNext.html",
    "title": "Method MoveNext | ExSpans",
    "summary": "Method MoveNext Namespace Zyl.ExSpans.Text Assembly ExSpans.dll MoveNext() Advances the enumerator to the next line of the ExSpan. public bool MoveNext() Returns bool True if the enumerator successfully advanced to the next line; false if the enumerator has advanced past the end of the ExSpan."
  },
  "api/Zyl.ExSpans.Text.ExSpanLineEnumerator.html": {
    "href": "api/Zyl.ExSpans.Text.ExSpanLineEnumerator.html",
    "title": "Struct ExSpanLineEnumerator | ExSpans",
    "summary": "Struct ExSpanLineEnumerator Namespace Zyl.ExSpans.Text Assembly ExSpans.dll Enumerates the lines of a ReadOnlyExSpan<T>. public ref struct ExSpanLineEnumerator Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Remarks To get an instance of this type, use EnumerateLines(ReadOnlyExSpan<char>). Properties Current Gets the line at the current position of the enumerator. Methods GetEnumerator() Returns this instance as an enumerator. MoveNext() Advances the enumerator to the next line of the ExSpan."
  },
  "api/Zyl.ExSpans.Text.ExSpanRuneEnumerator.Current.html": {
    "href": "api/Zyl.ExSpans.Text.ExSpanRuneEnumerator.Current.html",
    "title": "Property Current | ExSpans",
    "summary": "Property Current Namespace Zyl.ExSpans.Text Assembly ExSpans.dll Current Gets the element in the collection at the current position of the enumerator. public readonly Rune Current { get; } Property Value Rune The element in the collection at the current position of the enumerator."
  },
  "api/Zyl.ExSpans.Text.ExSpanRuneEnumerator.GetEnumerator.html": {
    "href": "api/Zyl.ExSpans.Text.ExSpanRuneEnumerator.GetEnumerator.html",
    "title": "Method GetEnumerator | ExSpans",
    "summary": "Method GetEnumerator Namespace Zyl.ExSpans.Text Assembly ExSpans.dll GetEnumerator() Returns an enumerator that iterates through the collection. public readonly ExSpanRuneEnumerator GetEnumerator() Returns ExSpanRuneEnumerator An enumerator that can be used to iterate through the collection."
  },
  "api/Zyl.ExSpans.Text.ExSpanRuneEnumerator.MoveNext.html": {
    "href": "api/Zyl.ExSpans.Text.ExSpanRuneEnumerator.MoveNext.html",
    "title": "Method MoveNext | ExSpans",
    "summary": "Method MoveNext Namespace Zyl.ExSpans.Text Assembly ExSpans.dll MoveNext() public bool MoveNext() Returns bool"
  },
  "api/Zyl.ExSpans.Text.ExSpanRuneEnumerator.html": {
    "href": "api/Zyl.ExSpans.Text.ExSpanRuneEnumerator.html",
    "title": "Struct ExSpanRuneEnumerator | ExSpans",
    "summary": "Struct ExSpanRuneEnumerator Namespace Zyl.ExSpans.Text Assembly ExSpans.dll Provides an enumerator for the Rune values represented by a span containing UTF-16 text (为由包含 UTF-16 文本的跨度表示的 Rune 值提供枚举器). public ref struct ExSpanRuneEnumerator : IEnumerator<Rune>, IEnumerator, IDisposable Implements IEnumerator<Rune> IEnumerator IDisposable Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties Current Gets the element in the collection at the current position of the enumerator. Methods GetEnumerator() Returns an enumerator that iterates through the collection. MoveNext()"
  },
  "api/Zyl.ExSpans.Text.html": {
    "href": "api/Zyl.ExSpans.Text.html",
    "title": "Namespace Zyl.ExSpans.Text | ExSpans",
    "summary": "Namespace Zyl.ExSpans.Text Structs ExSpanLineEnumerator Enumerates the lines of a ReadOnlyExSpan<T>. ExSpanRuneEnumerator Provides an enumerator for the Rune values represented by a span containing UTF-16 text (为由包含 UTF-16 文本的跨度表示的 Rune 值提供枚举器)."
  },
  "api/Zyl.ExSpans.html": {
    "href": "api/Zyl.ExSpans.html",
    "title": "Namespace Zyl.ExSpans | ExSpans",
    "summary": "Namespace Zyl.ExSpans Classes ExMemoryExtensions Provides extension methods for the span-related types, such as ExSpan<T> and ReadOnlyExSpan<T>. It can be regarded as the MemoryExtensions of nint index range (提供跨度相关类型的扩展方法，例如 ExSpan<T> 和 ReadOnlyExSpan<T>. 它可以被视为 nint 索引范围的 MemoryExtensions). ExMemoryMarshal Provides a collection of methods for interoperating with ExSpan<T>, and ReadOnlyExSpan<T>. It can be regarded as the MemoryMarshal of nint index range (提供与 ExSpan 和 ExReadOnlySpan 互操作的方法. 它可以被视为 nint 索引范围的 MemoryMarshal). ExNativeMemory This class contains methods that are mainly used to manage native memory. It can enable early versions NET can also use the method of NativeMemory, which will revert back to the implementation of AllocHGlobal(nint) (此类包含了主要用于管理本机内存的方法. 它能使早期版本的 .NET 也能使用 NativeMemory 的方法, 此时会回退为 AllocHGlobal(nint) 的实现). ExSpanExtensions Provides commonly used extension methods for the span-related types, such as ExSpan<T> and ReadOnlyExSpan<T> (提供跨度相关的类型的常用的扩展方法，例如 ExSpan<T> 和 ReadOnlyExSpan<T>). ItemFormaters The formaters of each item (各项的格式化器集). ItemsToStringFlagsUtil The utilities of flags for convert items data into string (各项数据转字符串的标志的工具) SafeBufferSpanProviders Helper methods of SafeBufferSpanProvider (SafeBufferSpanProvider 的辅助方法). Structs ExSpan<T> Provides a type-safe and memory-safe representation of a contiguous region of arbitrary memory. It can be regarded as the Span<T> of nint index range (提供任意内存的连续区域的类型安全和内存安全表示形式. 它可以被视为 nint 索引范围的 Span<T>). ExSpan<T>.Enumerator Enumerates the elements of a ExSpan<T> (为 ExSpan<T> 的元素提供枚举器). ReadOnlyExSpan<T> Provides a type-safe and memory-safe read-only representation of a contiguous region of arbitrary memory. It can be regarded as the ReadOnlySpan<T> of nint index range (提供任意内存连续区域的类型安全且内存安全的只读表示形式. 它可以被视为 nint 索引范围的 ReadOnlySpan<T>). ReadOnlyExSpan<T>.Enumerator Enumerates the elements of a ReadOnlyExSpan<T> (为 ReadOnlyExSpan<T> 的元素提供枚举器). SafeBufferSpanProvider The span provider that manages the pointer acquire for SafeBuffer (管理 SafeBuffer 指针获取的跨度提供者). For example, it can provide span access for memory mapped files (例如它可以为内存映射文件提供跨度访问器). Interfaces IExLength The interface of Ex length (扩展长度的接口). IExSpanBase<T> The base interface of Ex span (扩展跨度的基本接口). IReadOnlyExSpanBase<T> The base interface of read only Ex span (只读扩展跨度的基本接口). Enums ItemsToStringFlags Flags for convert items data into string (各项数据转字符串的标志)."
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "ExSpans: Extended spans of nint index range (nint 索引范围的扩展跨度). | ExSpans",
    "summary": "ExSpans: Extended spans of nint index range (nint 索引范围的扩展跨度). Commonly used types of ExSpans.Core.dll: ExMemoryMarshal: Provides a collection of methods for interoperating with ExSpan, and ExReadOnlySpan. It can be regarded as the MemoryMarshal of nint index range (提供与 ExSpan 和 ExReadOnlySpan 互操作的方法. 它可以被视为 nint 索引范围的 MemoryMarshal). ExSpan{T}: Provides a type-safe and memory-safe representation of a contiguous region of arbitrary memory. It can be regarded as the Span<T> of nint index range (提供任意内存的连续区域的类型安全和内存安全表示形式. 它可以被视为 nint 索引范围的 Span<T>). ReadOnlyExSpan{T}: Provides a type-safe and memory-safe read-only representation of a contiguous region of arbitrary memory. It can be regarded as the ReadOnlySpan<T> of nint index range (提供任意内存连续区域的类型安全且内存安全的只读表示形式. 它可以被视为 nint 索引范围的 ReadOnlySpan<T>). SafeBufferSpanProvider: The span provider that manages the pointer acquire for SafeBuffer (管理 SafeBuffer 指针获取的跨度提供者). For example, it can provide span access for memory mapped files (例如它可以为内存映射文件提供跨度访问器). Commonly used types of ExSpans.dll: ExMemoryExtensions: Provides extension methods for the span-related types, such as ExSpan and ReadOnlyExSpan . It can be regarded as the MemoryExtensions of nint index range (提供跨度相关类型的扩展方法，例如 ExSpan 和 ReadOnlyExSpan . 它可以被视为 nint 索引范围的 MemoryExtensions). ExNativeMemory: This class contains methods that are mainly used to manage native memory. It can enable early versions NET can also use the method of , which will revert back to the implementation of (此类包含了主要用于管理本机内存的方法. 它能使早期版本的 .NET 也能使用 的方法, 此时会回退为 的实现)."
  },
  "articles/ReleaseNote/v1.0_Chinese.html": {
    "href": "articles/ReleaseNote/v1.0_Chinese.html",
    "title": "发布 ExSpans v1.0, 它突破了32位索引的限制, 提供了 nint 索引范围Span类型；并能使内存映射文件支持 Span操作 | ExSpans",
    "summary": "[TOC] 发布 ExSpans v1.0, 它突破了32位索引的限制, 提供了 nint 索引范围Span类型；并能使内存映射文件支持 Span操作 源代码: https://github.com/zyl910/ExSpans ExSpans: Extended spans of nint index range (nint 索引范围的扩展跨度). Package Nuget Description ExSpans Extended spans of nint index range (nint 索引范围的扩展跨度). Commonly types: ExMemoryExtensions, ExNativeMemory. ExSpans.Core Extended spans of nint index range - Core type (nint 索引范围的扩展跨度 - 核心类型). Commonly types: ExSpan<T>, ReadOnlyExSpan<T>, ExMemoryMarshal, SafeBufferSpanProvider. 用途 Span 是 C# 7.2 引入的一种新结构, 允许开发者以类型安全的方式访问任意内存的连续区域. 它既可以用于托管内存（如数组）, 又可以用于非托管内存（如通过 Marshal.AllocHGlobal 分配的内存）, 并且不需要进行内存复制, 从而提高性能. 然而 Span 存在一个局限性, 它使用的是 int (Int32: 32位整数) 类型的索引. 即使是在 64位操作系统中, 它仅能访问最长 2G(2^31) 的数据. 而 Marshal.AllocHGlobal 方法在分配内存时支持 nint (IntPtr: 原生整数) 类型的长度, 在 64位系统上能分配超过 2GB 的非托管内存, Span 难以支持这么长的数据. 在没有 Span 的时候, 手动操作非托管内存是非常繁琐的, 而且代码的通用性不高. ExSpan 解决了这一局限性, 它使用 nint 类型的索引. nint 类型的字节大小, 与原生指针完全相同, 故在64位系统上能以64位的索引来访问数据. ExSpan 的用法与 Span 完全相同, 且像 Span 那样提供了大量的工具函数. 这使得它适用于 图像处理、视频处理、深度学习等大规模数据的领域. ExSpan 继承了Span 的优点： 零分配. ExSpan 是一个零分配的表示形式, 意味着它不会在堆上分配内存, 而是分配在栈上, 这样可以减少垃圾回收的负担. 安全性. ExSpan 提供了安全的内存访问, 避免了指针操作带来的风险, 如缓冲区溢出和空指针访问. 通用性. 既可以用于托管内存（如数组）, 又可以用于非托管内存（如通过 Marshal.AllocHGlobal 分配的内存）. 切片功能. ExSpan 支持切片操作, 可以轻松创建指向数组或内存块某一部分的 ExSpan, 而无需复制数据. 高性能. 由于 ExSpan 的设计, 操作它的性能接近于直接操作数组. 使其适合高性能应用场景, 如 缓冲区数据处理、字符串解析、图像处理 等. 功能丰富. 像 Span 那样提供了大量的工具函数. 例如用 ExMemoryMarshal 替代 MemoryMarshal, 用 ExMemoryExtensions 替代 MemoryExtensions, 用 ExNativeMemory 替代 NativeMemory. 还提供了 SafeBufferSpanProvider 等类. 且它们利用 VectorTraits 库, 实现了跨平台的SIMD硬件加速. 本库还具有这些优点: 支持多种 .NET版本. 从 .NET Framework 4.5, 到最新的 .NET 9, 全都支持. 而且支持 .NET Standard 1.1 ~ .NET Standard 2.1 . 移植新版本的功能. 能给早期版本的.NET, 提供最新的 Span功能. 例如 .NET 6.0 新增的 MemoryExtensions.TryWrite 方法. 跨平台. 它完全由托管代码所组成, 能够支持 Windows, Linux, MacOS, iOS, Android, Wasm 等平台. 能避免繁琐的“根据当前平台选择不同的原生dll”工作. 支持原生AOT. 当需要时, 可以利用原生AOT技术, 将程序编译为目标平台的原生代码(机器码). 此时不再需要 .NET 运行时, 且具有启动速度快等优点. 入门指南 1) 通过NuGet安装本库 可以使用“包管理器”GUI来安装本库. 或可在“包管理器控制台”里输入以下命令进行安装. NuGet: PM> Install-Package ExSpans 2) 简单范例 一个计算校验和的函数 首先, 我们用 ReadOnlySpan 实现一个计算校验和的函数, static int SumSpan(ReadOnlySpan<int> span) { int rt = 0; // Result. for (int i = 0; i < span.Length; i++) { rt += span[i]; } return rt; } 随后可以用 ExSpans 库中的 ReadOnlyExSpan 类型来改造这个函数. 仅需将 ReadOnlySpan 改为 ReadOnlyExSpan, 再将索引类型从 int 改为 nint, 便完成了改造. static int SumExSpan(ReadOnlyExSpan<int> span) { int rt = 0; // Result. for (nint i = 0; i < span.Length; i++) { rt += span[i]; } return rt; } 完整程序的代码 ExSpan(或 ReadOnlyExSpan) 的用法, 与 Span(或 ReadOnlySpan) 完全相同, 仅是索引类型从 int 改为了 nint . 本库像 Span 那样提供了大量的工具函数. 例如用 ExMemoryMarshal 替代 MemoryMarshal, 用 ExMemoryExtensions 替代 MemoryExtensions, 用 ExNativeMemory 替代 NativeMemory. 后面范例代码中使用的 Count 方法, 是 ExMemoryExtensions 里的扩展方法. 使用类型转换运算符, 或是 AsSpan/AsExSpan 等扩展方法, 可以方便的将 ExSpan(或 ReadOnlyExSpan) 与 Span(或 ReadOnlySpan) 进行类型转换. 下面展示了各种用法. using System; using System.IO; using Zyl.ExSpans; namespace Zyl.ExSpans.Sample { internal class Program { static void Main(string[] args) { TextWriter writer = Console.Out; OutputHeader(writer); // Test some. TestSimple(writer); Test2GB(writer); } internal static void OutputHeader(TextWriter writer) { writer.WriteLine(\"ExSpans.Sample\"); writer.WriteLine(); } static void TestSimple(TextWriter writer) { const int bufferSize = 16; // Create ExSpan by Array. int[] sourceArray = new int[bufferSize]; TestExSpan(writer, \"Array\", new ExSpan<int>(sourceArray)); // Use constructor method. //TestExSpan(writer, \"Array\", sourceArray.AsExSpan()); // Or use extension method. writer.WriteLine(); // Create ExSpan by Span. Span<int> sourceSpan = stackalloc int[bufferSize]; TestExSpan(writer, \"Span\", sourceSpan); // Use implicit conversion. //TestExSpan(writer, \"Span\", sourceSpan.AsExSpan()); // Or use extension method. // Convert ExSpan to Span. ExSpan<int> intSpan = sourceSpan; // Implicit conversion Span to ExSpan. Span<int> span = (Span<int>)intSpan; // Use explicit conversion. //Span<int> span = intSpan.AsSpan(); // Or use extension method. writer.WriteLine(string.Format(\"Span[1]: {0} // 0x{0:X}\", span[1])); int checkSum = SumExSpan(intSpan); // Implicit conversion ExSpan to ReadOnlyExSpan. writer.WriteLine(string.Format(\"CheckSum: {0} // 0x{0:X}\", checkSum)); writer.WriteLine(); } static void TestExSpan(TextWriter writer, string title, ExSpan<int> span) { try { // Write. writer.WriteLine($\"[TestExSpan-{title}]\"); span.Fill(0x01020304); span[0] = 0x12345678; span[span.Length - 1] = 0x78563412; // Read. writer.WriteLine(string.Format(\"Data[0]: {0} // 0x{0:X}\", span[0])); writer.WriteLine(string.Format(\"Data[1]: {0} // 0x{0:X}\", span[1])); writer.WriteLine(string.Format(\"Data[^1]: {0} // 0x{0:X}\", span[span.Length - 1])); writer.WriteLine(string.Format(\"Count(Data[1]): {0} // 0x{0:X}\", (long)span.Count(span[1]))); } catch (Exception ex) { writer.WriteLine(string.Format(\"Run TestExSpan fail! {0}\", ex.ToString())); } } static int SumExSpan(ReadOnlyExSpan<int> span) { int rt = 0; // Result. for (nint i = 0; i < span.Length; i++) { rt += span[i]; } return rt; } static unsafe void Test2GB(TextWriter writer) { const nint OutputMaxLength = 8; nuint byteSize = 2U * 1024 * 1024 * 1024; // 2GB if (IntPtr.Size > sizeof(int)) { byteSize += sizeof(int); } nint bufferSize = (nint)(byteSize / sizeof(int)); // Create ExSpan by Pointer. try { void* buffer = ExNativeMemory.Alloc(byteSize); try { ExSpan<int> intSpan = new ExSpan<int>(buffer, bufferSize); TestExSpan(writer, \"2GB\", intSpan); writer.WriteLine(string.Format(\"ItemsToString: {0}\", intSpan.ItemsToString(OutputMaxLength, OutputMaxLength))); writer.WriteLine(string.Format(\"intSpan.Count(): {0} // 0x{0:X}\", (long)intSpan.Count(intSpan[1]))); writer.WriteLine(string.Format(\"intSpan.Length: {0} // 0x{0:X}\", (long)intSpan.Length)); // Cast to byte. ExSpan<byte> byteSpan = ExMemoryMarshal.Cast<int, byte>(intSpan); writer.WriteLine(string.Format(\"byteSpan.Length: {0} // 0x{0:X}\", (long)byteSpan.Length)); writer.WriteLine(string.Format(\"byteSpan[0]: {0} // 0x{0:X}\", byteSpan[0])); writer.WriteLine(string.Format(\"byteSpan.ItemsToString: {0}\", byteSpan.ItemsToString(OutputMaxLength, OutputMaxLength))); writer.WriteLine(string.Format(\"byteSpan.Count(): {0} // 0x{0:X}\", (long)byteSpan.Count(byteSpan[1]))); writer.WriteLine(); } finally { ExNativeMemory.Free(buffer); } } catch (Exception ex) { writer.WriteLine(string.Format(\"Run Test2GB fail! {0}\", ex.ToString())); } } } } 该范例位于位于 samples/ExSpans.Sample/Program.cs . 本库为 ExSpan 等类型提供了 ItemsToString 扩展方法, 用于输出各个元素的值. 本库还为 Span 等类型也提供了 ItemsToString 扩展方法. 引用 Zyl.ExSpans.Extensions.ApplySpans 命名空间后便可使用它. using Zyl.ExSpans.Extensions.ApplySpans; 详见 tests/ExSpans.Tests/Extensions/ApplySpans/ApplySpanCoreExtensionsTest.cs. 输出结果 [TestExSpan-Array] Data[0]: 305419896 // 0x12345678 Data[1]: 16909060 // 0x1020304 Data[^1]: 2018915346 // 0x78563412 Count(Data[1]): 14 // 0xE [TestExSpan-Span] Data[0]: 305419896 // 0x12345678 Data[1]: 16909060 // 0x1020304 Data[^1]: 2018915346 // 0x78563412 Count(Data[1]): 14 // 0xE Span[1]: 16909060 // 0x1020304 CheckSum: -1733905214 // 0x98A6B4C2 [TestExSpan-2GB] Data[0]: 305419896 // 0x12345678 Data[1]: 16909060 // 0x1020304 Data[^1]: 2018915346 // 0x78563412 Count(Data[1]): 536870911 // 0x1FFFFFFF ItemsToString: ExSpan<int>[536870913]{305419896, 16909060, 16909060, 16909060, 16909060, 16909060, 16909060, 16909060, ..., 16909060, 16909060, 16909060, 16909060, 16909060, 16909060, 16909060, 2018915346} intSpan.Count(): 536870911 // 0x1FFFFFFF intSpan.Length: 536870913 // 0x20000001 byteSpan.Length: 2147483652 // 0x80000004 byteSpan[0]: 120 // 0x78 byteSpan.ItemsToString: ExSpan<byte>[2147483652]{120, 86, 52, 18, 4, 3, 2, 1, ..., 4, 3, 2, 1, 18, 52, 86, 120} byteSpan.Count(): 2 // 0x2 使用 ExSpan 操作内存映射文件 由于内存映射文件的数据操作方法用起来比较繁琐, 曾经希望能用 Span 来操作内存映射文件. 但内存映射文件用了 64位索引, Span的32索引力不从心. 现在 ExSpan 使用 nint 索引的范围, 在64位操作系统上是64位的, 非常适合64位索引的内存映射文件. 而且本库还提供了 SafeBufferSpanProvider 类型来简化这一操作. 使用 CreateSpanProvider 扩展方法, 基于 内存映射文件的SafeMemoryMappedViewHandle 来创建 SafeBufferSpanProvider . SafeBufferSpanProvider 支持 using 语句, 能自动管理非托管数据的释放. SafeBufferSpanProvider 的 CreateExSpan 方法可以用来创建 ExSpan . 程序的代码 using System; using System.IO; using System.IO.MemoryMappedFiles; using Zyl.ExSpans; namespace Zyl.ExSpans.Sample { internal class ATestMemoryMappedFile { static void Main(string[] args) { TextWriter writer = Console.Out; // Test some. TestMemoryMappedFile(writer); } internal static void TestMemoryMappedFile(TextWriter writer) { try { const string MemoryMappedFilePath = \"ExSpans.Sample.tmp\"; const string? MemoryMappedFileMapName = null; // If it is not null, MacOS will throw an exception. System.PlatformNotSupportedException: Named maps are not supported. const long MemoryMappedFileSize = 1 * 1024 * 1024; // 1MB using MemoryMappedFile mappedFile = MemoryMappedFile.CreateFromFile(MemoryMappedFilePath, FileMode.Create, MemoryMappedFileMapName, MemoryMappedFileSize); using MemoryMappedViewAccessor accessor = mappedFile.CreateViewAccessor(); using SafeBufferSpanProvider spanProvider = accessor.SafeMemoryMappedViewHandle.CreateSpanProvider(); // Write. writer.WriteLine(\"[TestMemoryMappedFile]\"); ExSpan<int> spanInt = spanProvider.CreateExSpan<int>(); spanInt.Fill(0x01020304); spanInt[0] = 0x12345678; // Read. writer.WriteLine(string.Format(\"Data[0]: {0} // 0x{0:X}\", spanInt[0])); writer.WriteLine(string.Format(\"Data[1]: {0} // 0x{0:X}\", spanInt[1])); // Extension methods provided by ExSpanExtensions. writer.WriteLine(string.Format(\"ItemsToString: {0}\", spanProvider.ItemsToString(spanProvider.GetPinnableReadOnlyReference(), 16))); // done. writer.WriteLine(); } catch (Exception ex) { writer.WriteLine(string.Format(\"Run TestMemoryMappedFile fail! {0}\", ex.ToString())); } } } } 该范例位于 samples/ExSpans.Sample/ATestMemoryMappedFile.cs . 注: SafeBufferSpanProvider 也支持 ItemsToString 扩展方法. 在 .NET 9 以前, 需传递 spanProvider.GetPinnableReadOnlyReference() 参数; 而从 .NET 9 开始, 可省略该参数. 输出结果 [TestMemoryMappedFile] Data[0]: 305419896 // 0x12345678 Data[1]: 16909060 // 0x1020304 ItemsToString: SafeBufferSpanProvider[1048576]{120, 86, 52, 18, 4, 3, 2, 1, 4, 3, 2, 1, 4, 3, 2, 1, ...} 基准测试 从 .NET 7 开始, ExSpan 的性能与 Span 相同. 下面的基准测试将证明这一论断. 基准测试的源代码 下面将以数组求和为例, 来对 ExSpan 编写基准测试代码. 测试工具用的是 BenchmarkDotNet . StaticSumForArray: Summation using index access to arrays (使用索引访问数组实现求和) 首先, 以数组求和的方法作为 baseline. using TMy = Int32; public static TMy StaticSumForArray(TMy[] src, int srcCount) { TMy rt = 0; // Result. for (int i = 0; i < srcCount; ++i) { rt += src[i]; } return rt; } [Benchmark(Baseline = true)] public void SumForArray() { dstTMy = StaticSumForArray(srcArray, srcArray.Length); } srcArray 是预先分配好的数组. dstTMy 是一个全局变量, 为了避免编译优化时抹掉 SumForArray 方法. Summation using index access to Span (使用索引访问 Span 实现求和) 该方法使用索引访问 Span 实现求和. public static TMy StaticSumForSpan(TMy[] src, int srcCount) { TMy rt = 0; // Result. Span<TMy> span = new Span<TMy>(src, 0, srcCount); for (int i = 0; i < srcCount; ++i) { rt += span[i]; } return rt; } [Benchmark] public void SumForSpan() { dstTMy = StaticSumForSpan(srcArray, srcArray.Length); } SumForExSpan: Summation using index access to ExSpan (使用索引访问 ExSpan 实现求和) 仅需将 Span 改为 ExSpan, 再将索引类型从 int 改为 nint, 便完成了改造. public static TMy StaticSumForExSpan(TMy[] src, int srcCount) { TMy rt = 0; // Result. nint srcCountCur = srcCount; ExSpan<TMy> span = new ExSpan<TMy>(src, 0, srcCountCur); for (nint i = 0; i < srcCountCur; ++i) { rt += span[i]; } return rt; } [Benchmark] public void SumForExSpan() { dstTMy = StaticSumForExSpan(srcArray, srcArray.Length); } 其他方法 除了上面介绍的方法外, 还有以下方法. SumForPtr: Summation using native pointer access to arrays (使用原生指针访问数组实现求和). SumForExSpanByPtr: Summation using index access to ExSpan created by pointer (使用索引访问 指针创建的ExSpan 实现求和). SumForExSpanUsePtr: Summation using native pointer access to ExSpan (使用原生指针访问 ExSpan 实现求和). SumForExSpanUseRef: Summation using managed pointer(ref) access to ExSpan (使用 托管指针(ref) 访问 ExSpan 实现求和). 详见 tests/ExSpans.Benchmarks.Inc/AExSpan/SumBenchmark_Int32.cs. X86架构的基准测试 .NET 7 BenchmarkDotNet v0.14.0, Windows 11 (10.0.26100.4351) AMD Ryzen 7 7840H w/ Radeon 780M Graphics, 1 CPU, 16 logical and 8 physical cores .NET SDK 9.0.301 [Host] : .NET 7.0.20 (7.0.2024.26716), X64 RyuJIT AVX2 MediumRun : .NET 7.0.20 (7.0.2024.26716), X64 RyuJIT AVX2 | Method | N | Mean | Error | StdDev | Ratio | Code Size | |------------------- |------- |---------:|---------:|---------:|------:|----------:| | SumForArray | 262144 | 60.40 us | 0.234 us | 0.335 us | 1.00 | 500 B | | SumForPtr | 262144 | 58.54 us | 0.173 us | 0.258 us | 0.97 | 145 B | | SumForSpan | 262144 | 58.49 us | 0.199 us | 0.297 us | 0.97 | 186 B | | SumForExSpan | 262144 | 58.47 us | 0.208 us | 0.305 us | 0.97 | 205 B | | SumForExSpanByPtr | 262144 | 58.01 us | 0.099 us | 0.135 us | 0.96 | 187 B | | SumForExSpanUsePtr | 262144 | 58.49 us | 0.121 us | 0.177 us | 0.97 | 174 B | | SumForExSpanUseRef | 262144 | 58.72 us | 0.164 us | 0.245 us | 0.97 | 159 B | 可见, ExSpan 的性能与 Span 相同. .NET Framework BenchmarkDotNet v0.14.0, Windows 11 (10.0.26100.4351) AMD Ryzen 7 7840H w/ Radeon 780M Graphics, 1 CPU, 16 logical and 8 physical cores [Host] : .NET Framework 4.8.1 (4.8.9300.0), X64 RyuJIT VectorSize=256 MediumRun : .NET Framework 4.8.1 (4.8.9300.0), X64 RyuJIT VectorSize=256 | Method | N | Mean | Error | StdDev | Ratio | RatioSD | Code Size | |------------------- |------- |----------:|---------:|----------:|------:|--------:|----------:| | SumForArray | 262144 | 69.20 us | 0.268 us | 0.376 us | 1.00 | 0.01 | 6,943 B | | SumForPtr | 262144 | 58.80 us | 0.131 us | 0.193 us | 0.85 | 0.01 | 154 B | | SumForSpan | 262144 | 122.44 us | 0.437 us | 0.640 us | 1.77 | 0.01 | 250 B | | SumForExSpan | 262144 | 562.53 us | 8.190 us | 12.259 us | 8.13 | 0.18 | 584 B | | SumForExSpanByPtr | 262144 | 219.07 us | 0.659 us | 0.965 us | 3.17 | 0.02 | 381 B | | SumForExSpanUsePtr | 262144 | 58.61 us | 0.194 us | 0.285 us | 0.85 | 0.01 | 635 B | | SumForExSpanUseRef | 262144 | 58.72 us | 0.187 us | 0.279 us | 0.85 | 0.01 | 614 B | 可见, 在 .NET 7 之前, ExSpan 的性能比 Span 慢一些. 有一种办法可以解决这种性能问题——仅将 ExSpan 用做传参, 随后用指针进行数据处理. 可参考 SumForExSpanUsePtr 或 SumForExSpanUseRef, 它们都比 SumForArray/SumForSpan 快. 本库的 ExMemoryExtensions 等类型, 就是用这个办法进行优化的. Arm架构的基准测试 .NET 7 BenchmarkDotNet v0.14.0, macOS Sequoia 15.5 (24F74) [Darwin 24.5.0] Apple M2, 1 CPU, 8 logical and 8 physical cores .NET SDK 9.0.102 [Host] : .NET 7.0.20 (7.0.2024.26716), Arm64 RyuJIT AdvSIMD MediumRun : .NET 7.0.20 (7.0.2024.26716), Arm64 RyuJIT AdvSIMD | Method | N | Mean | Error | StdDev | Ratio | RatioSD | |------------------- |------- |----------:|---------:|---------:|------:|--------:| | SumForArray | 262144 | 95.02 us | 0.303 us | 0.444 us | 1.00 | 0.01 | | SumForPtr | 262144 | 93.60 us | 3.269 us | 4.893 us | 0.99 | 0.05 | | SumForSpan | 262144 | 96.30 us | 1.313 us | 1.966 us | 1.01 | 0.02 | | SumForExSpan | 262144 | 121.74 us | 0.064 us | 0.092 us | 1.28 | 0.01 | | SumForExSpanByPtr | 262144 | 122.65 us | 0.488 us | 0.715 us | 1.29 | 0.01 | | SumForExSpanUsePtr | 262144 | 88.76 us | 0.596 us | 0.873 us | 0.93 | 0.01 | | SumForExSpanUseRef | 262144 | 89.04 us | 0.338 us | 0.506 us | 0.94 | 0.01 | 可见, ExSpan 的性能与 Span 很接近, 慢了 (121.74 / 96.30 - 1 =) 26% 左右. .NET 9 BenchmarkDotNet v0.14.0, macOS Sequoia 15.5 (24F74) [Darwin 24.5.0] Apple M2, 1 CPU, 8 logical and 8 physical cores .NET SDK 9.0.102 [Host] : .NET 9.0.1 (9.0.124.61010), Arm64 RyuJIT AdvSIMD MediumRun : .NET 9.0.1 (9.0.124.61010), Arm64 RyuJIT AdvSIMD | Method | N | Mean | Error | StdDev | Ratio | |------------------- |------- |----------:|---------:|---------:|------:| | SumForArray | 262144 | 86.25 us | 0.069 us | 0.103 us | 1.00 | | SumForPtr | 262144 | 76.78 us | 0.335 us | 0.492 us | 0.89 | | SumForSpan | 262144 | 93.34 us | 0.238 us | 0.326 us | 1.08 | | SumForExSpan | 262144 | 104.89 us | 0.087 us | 0.131 us | 1.22 | | SumForExSpanByPtr | 262144 | 104.72 us | 0.072 us | 0.105 us | 1.21 | | SumForExSpanUsePtr | 262144 | 78.05 us | 0.841 us | 1.259 us | 0.90 | | SumForExSpanUseRef | 262144 | 78.02 us | 0.854 us | 1.252 us | 0.90 | .NET 9 时性能又有进度, ExSpan 的性能与 Span 很接近了. 仅相差 (104.89 / 93.34 - 1 =) 12% 左右. 若想追求最佳性能, 也可利用指针进行优化. 可参考 SumForExSpanUsePtr 或 SumForExSpanUseRef, 它们都比 SumForSpan 快. 文档 Online document: https://zyl910.github.io/ExSpans_doc/ DocFX: Run docfx_serve.bat. Then browse http://localhost:8080/ ."
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "ExSpans: Extended spans of nint index range (nint 索引范围的扩展跨度). | ExSpans",
    "summary": "ExSpans: Extended spans of nint index range (nint 索引范围的扩展跨度). README ChangeLog Api Documentation See also NuGet: https://www.nuget.org/packages/ExSpans Source code: https://github.com/zyl910/ExSpans"
  },
  "index.html": {
    "href": "index.html",
    "title": "ExSpans: Extended spans of nint index range (nint 索引范围的扩展跨度). | ExSpans",
    "summary": "ExSpans: Extended spans of nint index range (nint 索引范围的扩展跨度). README ChangeLog Api Documentation See also NuGet: https://www.nuget.org/packages/ExSpans Source code: https://github.com/zyl910/ExSpans"
  },
  "src/ExSpans.Core/ExSpans.Core.html": {
    "href": "src/ExSpans.Core/ExSpans.Core.html",
    "title": "ExSpans.Core | ExSpans",
    "summary": "ExSpans.Core ExSpans.Core: Extended spans of nint index range - Core type (nint 索引范围的扩展跨度 - 核心类型). Commonly used types of ExSpans.Core.dll: ExMemoryMarshal: Provides a collection of methods for interoperating with ExSpan, and ExReadOnlySpan. It can be regarded as the MemoryMarshal of nint index range (提供与 ExSpan 和 ExReadOnlySpan 互操作的方法. 它可以被视为 nint 索引范围的 MemoryMarshal). ExSpan<T>: Provides a type-safe and memory-safe representation of a contiguous region of arbitrary memory. It can be regarded as the Span<T> of nint index range (提供任意内存的连续区域的类型安全和内存安全表示形式. 它可以被视为 nint 索引范围的 Span<T>). ReadOnlyExSpan<T>: Provides a type-safe and memory-safe read-only representation of a contiguous region of arbitrary memory. It can be regarded as the ReadOnlySpan<T> of nint index range (提供任意内存连续区域的类型安全且内存安全的只读表示形式. 它可以被视为 nint 索引范围的 ReadOnlySpan<T>). SafeBufferSpanProvider: The span provider that manages the pointer acquire for SafeBuffer (管理 SafeBuffer 指针获取的跨度提供者). For example, it can provide span access for memory mapped files (例如它可以为内存映射文件提供跨度访问器). See more Online document: https://zyl910.github.io/ExSpans_doc/ Source code: https://github.com/zyl910/ExSpans"
  },
  "src/ExSpans.Core/bin/Release/ExSpans.Core.1.0.0/ExSpans.Core.html": {
    "href": "src/ExSpans.Core/bin/Release/ExSpans.Core.1.0.0/ExSpans.Core.html",
    "title": "ExSpans.Core | ExSpans",
    "summary": "ExSpans.Core ExSpans.Core: Extended spans of nint index range - Core type (nint 索引范围的扩展跨度 - 核心类型). Commonly used types of ExSpans.Core.dll: ExMemoryMarshal: Provides a collection of methods for interoperating with ExSpan, and ExReadOnlySpan. It can be regarded as the MemoryMarshal of nint index range (提供与 ExSpan 和 ExReadOnlySpan 互操作的方法. 它可以被视为 nint 索引范围的 MemoryMarshal). ExSpan<T>: Provides a type-safe and memory-safe representation of a contiguous region of arbitrary memory. It can be regarded as the Span<T> of nint index range (提供任意内存的连续区域的类型安全和内存安全表示形式. 它可以被视为 nint 索引范围的 Span<T>). ReadOnlyExSpan<T>: Provides a type-safe and memory-safe read-only representation of a contiguous region of arbitrary memory. It can be regarded as the ReadOnlySpan<T> of nint index range (提供任意内存连续区域的类型安全且内存安全的只读表示形式. 它可以被视为 nint 索引范围的 ReadOnlySpan<T>). SafeBufferSpanProvider: The span provider that manages the pointer acquire for SafeBuffer (管理 SafeBuffer 指针获取的跨度提供者). For example, it can provide span access for memory mapped files (例如它可以为内存映射文件提供跨度访问器). Documentation Online document: https://zyl910.github.io/ExSpans_doc/ DocFX: Run docfx_serve.bat. Then browse http://localhost:8080/ ."
  },
  "src/ExSpans/ExSpans.html": {
    "href": "src/ExSpans/ExSpans.html",
    "title": "ExSpans | ExSpans",
    "summary": "ExSpans ExSpans: Extended spans of nint index range (nint 索引范围的扩展跨度). Commonly used types of ExSpans.Core.dll: ExMemoryMarshal: Provides a collection of methods for interoperating with ExSpan, and ExReadOnlySpan. It can be regarded as the MemoryMarshal of nint index range (提供与 ExSpan 和 ExReadOnlySpan 互操作的方法. 它可以被视为 nint 索引范围的 MemoryMarshal). ExSpan<T>: Provides a type-safe and memory-safe representation of a contiguous region of arbitrary memory. It can be regarded as the Span<T> of nint index range (提供任意内存的连续区域的类型安全和内存安全表示形式. 它可以被视为 nint 索引范围的 Span<T>). ReadOnlyExSpan<T>: Provides a type-safe and memory-safe read-only representation of a contiguous region of arbitrary memory. It can be regarded as the ReadOnlySpan<T> of nint index range (提供任意内存连续区域的类型安全且内存安全的只读表示形式. 它可以被视为 nint 索引范围的 ReadOnlySpan<T>). SafeBufferSpanProvider: The span provider that manages the pointer acquire for SafeBuffer (管理 SafeBuffer 指针获取的跨度提供者). For example, it can provide span access for memory mapped files (例如它可以为内存映射文件提供跨度访问器). Commonly used types of ExSpans.dll: ExMemoryExtensions: Provides extension methods for the span-related types, such as ExSpan and ReadOnlyExSpan . It can be regarded as the MemoryExtensions of nint index range (提供跨度相关类型的扩展方法，例如 ExSpan 和 ReadOnlyExSpan . 它可以被视为 nint 索引范围的 MemoryExtensions). ExNativeMemory: This class contains methods that are mainly used to manage native memory. It can enable early versions NET can also use the method of , which will revert back to the implementation of (此类包含了主要用于管理本机内存的方法. 它能使早期版本的 .NET 也能使用 的方法, 此时会回退为 的实现). See more Online document: https://zyl910.github.io/ExSpans_doc/ Source code: https://github.com/zyl910/ExSpans"
  },
  "src/ExSpans/bin/Release/ExSpans.1.0.0/ExSpans.html": {
    "href": "src/ExSpans/bin/Release/ExSpans.1.0.0/ExSpans.html",
    "title": "ExSpans | ExSpans",
    "summary": "ExSpans ExSpans: Extended spans of nint index range (nint 索引范围的扩展跨度). Commonly used types of ExSpans.Core.dll: ExMemoryMarshal: Provides a collection of methods for interoperating with ExSpan, and ExReadOnlySpan. It can be regarded as the MemoryMarshal of nint index range (提供与 ExSpan 和 ExReadOnlySpan 互操作的方法. 它可以被视为 nint 索引范围的 MemoryMarshal). ExSpan<T>: Provides a type-safe and memory-safe representation of a contiguous region of arbitrary memory. It can be regarded as the Span<T> of nint index range (提供任意内存的连续区域的类型安全和内存安全表示形式. 它可以被视为 nint 索引范围的 Span<T>). ReadOnlyExSpan<T>: Provides a type-safe and memory-safe read-only representation of a contiguous region of arbitrary memory. It can be regarded as the ReadOnlySpan<T> of nint index range (提供任意内存连续区域的类型安全且内存安全的只读表示形式. 它可以被视为 nint 索引范围的 ReadOnlySpan<T>). SafeBufferSpanProvider: The span provider that manages the pointer acquire for SafeBuffer (管理 SafeBuffer 指针获取的跨度提供者). For example, it can provide span access for memory mapped files (例如它可以为内存映射文件提供跨度访问器). Commonly used types of ExSpans.dll: ExMemoryExtensions: Provides extension methods for the span-related types, such as ExSpan and ReadOnlyExSpan . It can be regarded as the MemoryExtensions of nint index range (提供跨度相关类型的扩展方法，例如 ExSpan 和 ReadOnlyExSpan . 它可以被视为 nint 索引范围的 MemoryExtensions). ExNativeMemory: This class contains methods that are mainly used to manage native memory. It can enable early versions NET can also use the method of , which will revert back to the implementation of (此类包含了主要用于管理本机内存的方法. 它能使早期版本的 .NET 也能使用 的方法, 此时会回退为 的实现). See more Online document: https://zyl910.github.io/ExSpans_doc/ Source code: https://github.com/zyl910/ExSpans"
  }
}